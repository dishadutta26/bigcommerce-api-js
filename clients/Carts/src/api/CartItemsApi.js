/**
 * Carts
 * ### Cart Allows for a cart to be created using BigCommerce cart logic. The existing BigCommerce front end cart can be bypassed.  Notes: - A **cart** `id` is the same as a **checkout** `id`. - A cart can be created by adding an existing **catalog item** or a **custom item**. - Carts are valid for 30 days from the last modification. This can include creating the cart or editing the cart. - Redirect URLs can be generated only from carts created using the Server to Server Cart API. To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CartFull1 from '../model/CartFull1';
import CartLineItemUpdatePost1 from '../model/CartLineItemUpdatePost1';
import CartLineItemUpdatePost2 from '../model/CartLineItemUpdatePost2';

/**
* CartItems service.
* @module api/CartItemsApi
* @version 3.0
*/
export default class CartItemsApi {

    /**
    * Constructs a new CartItemsApi. 
    * @alias module:api/CartItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addCartLineItem operation.
     * @callback module:api/CartItemsApi~addCartLineItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartFull1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Cart Line Items
     * Adds line items to the *Cart*.  **Usage Notes**  To add a custom item use &#x60;custom_items&#x60;.   If a product has modifiers, omit the &#x60;variant_id&#x60; and instead use the &#x60;option_selections&#x60; array to describe both the **variant** and the **modifier** selections.
     * @param {Object} opts Optional parameters
     * @param {module:api/CartItemsApi~addCartLineItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartFull1}
     */
    addCartLineItem(body, cartId, accept, contentType, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartFull1;

      return this.apiClient.callApi(
        '/carts/{cartId}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteCartLineItem operation.
     * @callback module:api/CartItemsApi~deleteCartLineItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartFull1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Cart Line Item
     * Deletes a *Cart* line item.   **Notes**  Removing the last &#x60;line_item&#x60; in the *Cart* deletes the *Cart*.
     * @param {Object} opts Optional parameters
     * @param {module:api/CartItemsApi~deleteCartLineItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartFull1}
     */
    deleteCartLineItem(cartId, itemId, accept, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartFull1;

      return this.apiClient.callApi(
        '/carts/{cartId}/items/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCartLineItem operation.
     * @callback module:api/CartItemsApi~updateCartLineItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartFull1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Cart Line Item
     * Updates a *Cart* line item. Updates an existing, single line item in the cart.   **Notes**  Currently, only updating &#x60;list_price&#x60; and &#x60;quantity&#x60; are supported.   Updating a product&#x27;s &#x60;list_price&#x60; will make that item ineligible for V3 product level promotions.   If the product has modifiers, omit the &#x60;variant_id&#x60; and instead use the &#x60;option_selections&#x60; array to describe both the **variant** and the **modifier** selections.  If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:api/CartItemsApi~updateCartLineItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartFull1}
     */
    updateCartLineItem(body, cartId, itemId, accept, contentType, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartFull1;

      return this.apiClient.callApi(
        '/carts/{cartId}/items/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
