/**
 * Carts
 * ### Cart Allows for a cart to be created using BigCommerce cart logic. The existing BigCommerce front end cart can be bypassed.  Notes: - A **cart** `id` is the same as a **checkout** `id`. - A cart can be created by adding an existing **catalog item** or a **custom item**. - Carts are valid for 30 days from the last modification. This can include creating the cart or editing the cart. - Redirect URLs can be generated only from carts created using the Server to Server Cart API. To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppliedCoupon1 from './AppliedCoupon1';
import AppliedDiscount1 from './AppliedDiscount1';
import ProductOption from './ProductOption';

/**
* The BaseItem model module.
* @module model/BaseItem
* @version 3.0
*/
export default class BaseItem {
    /**
    * Constructs a new <code>BaseItem</code>.
    * @alias module:model/BaseItem
    * @class
    * @param variantId {Number} The id of the variant. Required in the /PUT or /POST if the product has variants.
    * @param productId {Number} The id of the product. Required in a /POST
    * @param quantity {Number} Quantity of this item in the cart.
    */

    constructor(variantId, productId, quantity) {
        
        
        this['variant_id'] = variantId;
        this['product_id'] = productId;
        this['quantity'] = quantity;
        
    }

    /**
    * Constructs a <code>BaseItem</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/BaseItem} obj Optional instance to populate.
    * @return {module:model/BaseItem} The populated <code>BaseItem</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseItem();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('variant_id')) {
                obj['variant_id'] = ApiClient.convertToType(data['variant_id'], 'Number');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('is_taxable')) {
                obj['is_taxable'] = ApiClient.convertToType(data['is_taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], [AppliedDiscount1]);
            }
            if (data.hasOwnProperty('coupons')) {
                obj['coupons'] = ApiClient.convertToType(data['coupons'], [AppliedCoupon1]);
            }
            if (data.hasOwnProperty('discount_amount')) {
                obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('coupon_amount')) {
                obj['coupon_amount'] = ApiClient.convertToType(data['coupon_amount'], 'Number');
            }
            if (data.hasOwnProperty('list_price')) {
                obj['list_price'] = ApiClient.convertToType(data['list_price'], 'Number');
            }
            if (data.hasOwnProperty('sale_price')) {
                obj['sale_price'] = ApiClient.convertToType(data['sale_price'], 'Number');
            }
            if (data.hasOwnProperty('extended_list_price')) {
                obj['extended_list_price'] = ApiClient.convertToType(data['extended_list_price'], 'Number');
            }
            if (data.hasOwnProperty('extended_sale_price')) {
                obj['extended_sale_price'] = ApiClient.convertToType(data['extended_sale_price'], 'Number');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [ProductOption]);
            }
        }
        return obj;
    }

    /**
    * The line-item ID.
    * @member {String} id
    */
    'id' = undefined;
    /**
    * The id of the variant. Required in the /PUT or /POST if the product has variants.
    * @member {Number} variant_id
    */
    'variant_id' = undefined;
    /**
    * The id of the product. Required in a /POST
    * @member {Number} product_id
    */
    'product_id' = undefined;
    /**
    * SKU of the variant.
    * @member {String} sku
    */
    'sku' = undefined;
    /**
    * The item's product name.
    * @member {String} name
    */
    'name' = undefined;
    /**
    * The product URL.
    * @member {String} url
    */
    'url' = undefined;
    /**
    * Quantity of this item in the cart.
    * @member {Number} quantity
    */
    'quantity' = undefined;
    /**
    * Whether the item is taxable.
    * @member {Boolean} is_taxable
    */
    'is_taxable' = undefined;
    /**
    * Image of the product or variant.
    * @member {String} image_url
    */
    'image_url' = undefined;
    /**
    * @member {Array.<module:model/AppliedDiscount1>} discounts
    */
    'discounts' = undefined;
    /**
    * @member {Array.<module:model/AppliedCoupon1>} coupons
    */
    'coupons' = undefined;
    /**
    * The total value of all discounts applied to this item. This includes coupons and cart level discounts
    * @member {Number} discount_amount
    */
    'discount_amount' = undefined;
    /**
    * The total value of all coupons applied to this item.
    * @member {Number} coupon_amount
    */
    'coupon_amount' = undefined;
    /**
    * Item's list price, as quoted by the manufacturer/distributor.
    * @member {Number} list_price
    */
    'list_price' = undefined;
    /**
    * Item's price after all discounts are applied. (The final price before tax calculation.)
    * @member {Number} sale_price
    */
    'sale_price' = undefined;
    /**
    * Item's list price multiplied by the quantity.
    * @member {Number} extended_list_price
    */
    'extended_list_price' = undefined;
    /**
    * Item's sale price multiplied by the quantity.
    * @member {Number} extended_sale_price
    */
    'extended_sale_price' = undefined;
    /**
    * The list of selected options for this product.
    * @member {Array.<module:model/ProductOption>} options
    */
    'options' = undefined;




}
