/**
 * Carts
 * ### Cart Allows for a cart to be created using BigCommerce cart logic. The existing BigCommerce front end cart can be bypassed.  Notes: - A **cart** `id` is the same as a **checkout** `id`. - A cart can be created by adding an existing **catalog item** or a **custom item**. - Carts are valid for 30 days from the last modification. This can include creating the cart or editing the cart. - Redirect URLs can be generated only from carts created using the Server to Server Cart API. To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppliedCoupon from './AppliedCoupon';
import AppliedDiscount from './AppliedDiscount';
import Currency1 from './Currency1';
import LineItem from './LineItem';

/**
* The CartFull model module.
* @module model/CartFull
* @version 3.0
*/
export default class CartFull {
    /**
    * Constructs a new <code>CartFull</code>.
    * A cart contains a collection of items, prices, discounts, etc.. It does not contain customer-related data.
    * @alias module:model/CartFull
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>CartFull</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/CartFull} obj Optional instance to populate.
    * @return {module:model/CartFull} The populated <code>CartFull</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartFull();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency1.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('tax_included')) {
                obj['tax_included'] = ApiClient.convertToType(data['tax_included'], 'Boolean');
            }
            if (data.hasOwnProperty('base_amount')) {
                obj['base_amount'] = ApiClient.convertToType(data['base_amount'], 'Number');
            }
            if (data.hasOwnProperty('discount_amount')) {
                obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('cart_amount')) {
                obj['cart_amount'] = ApiClient.convertToType(data['cart_amount'], 'Number');
            }
            if (data.hasOwnProperty('coupons')) {
                obj['coupons'] = ApiClient.convertToType(data['coupons'], [AppliedCoupon]);
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], [AppliedDiscount]);
            }
            if (data.hasOwnProperty('line_items')) {
                obj['line_items'] = ApiClient.convertToType(data['line_items'], [LineItem]);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'String');
            }
            if (data.hasOwnProperty('channel_id')) {
                obj['channel_id'] = ApiClient.convertToType(data['channel_id'], 'Number');
            }
        }
        return obj;
    }

    /**
    * Cart ID, provided after creating a cart with a POST.
    * @member {String} id
    */
    'id' = undefined;
    /**
    * Bundled items will have their parent's item Id.
    * @member {String} parent_id
    */
    'parent_id' = undefined;
    /**
    * ID of the customer to which the cart belongs.
    * @member {Number} customer_id
    */
    'customer_id' = undefined;
    /**
    * The cart's email. This is the same email that is used in the billing address
    * @member {String} email
    */
    'email' = undefined;
    /**
    * @member {module:model/Currency1} currency
    */
    'currency' = undefined;
    /**
    * @member {Boolean} tax_included
    */
    'tax_included' = undefined;
    /**
    * Cost of cart's contents, before applying discounts.
    * @member {Number} base_amount
    */
    'base_amount' = undefined;
    /**
    * Discounted amount.
    * @member {Number} discount_amount
    */
    'discount_amount' = undefined;
    /**
    * Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).
    * @member {Number} cart_amount
    */
    'cart_amount' = undefined;
    /**
    * @member {Array.<module:model/AppliedCoupon>} coupons
    */
    'coupons' = undefined;
    /**
    * @member {Array.<module:model/AppliedDiscount>} discounts
    */
    'discounts' = undefined;
    /**
    * @member {Array.<module:model/LineItem>} line_items
    */
    'line_items' = undefined;
    /**
    * Time when the cart was created.
    * @member {String} created_time
    */
    'created_time' = undefined;
    /**
    * Time when the cart was last updated.
    * @member {String} updated_time
    */
    'updated_time' = undefined;
    /**
    * If no channel is specified, defaults to 1. 
    * @member {Number} channel_id
    */
    'channel_id' = undefined;




}
