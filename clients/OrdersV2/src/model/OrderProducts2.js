/**
 * Orders V2
 * `/orders`endpoints integrate with point-of-sale, shipping, distribution, and inventory-management systems.  ## Order The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   //...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   //... }  ```  ## Order Coupons Coupon code applied to an order.  ## Order Messages Messages associated with an order.  ## Order Products Product line items belonging to an order.  ## Order Shipping Addresses Customer shipping address belonging to an order.  ## Order Statuses Each order status represents a state in the order-fulfillment workflow.  ## Order Taxes Each tax applied to an order. This information can be useful for reporting purposes. All values are read-only.  ## Order Shipments Tracks a package consignment from an order that is shipped from the seller to the buyer.  ## Order Shipping Addresses Quotes Read Only. Gets all shipping quotes from an order.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderProductAppliedDiscounts1 from './OrderProductAppliedDiscounts1';
import OrderProductOptions1 from './OrderProductOptions1';

/**
* The OrderProducts2 model module.
* @module model/OrderProducts2
* @version 2.0
*/
export default class OrderProducts2 {
    /**
    * Constructs a new <code>OrderProducts2</code>.
    * @alias module:model/OrderProducts2
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>OrderProducts2</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/OrderProducts2} obj Optional instance to populate.
    * @return {module:model/OrderProducts2} The populated <code>OrderProducts2</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderProducts2();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'Number');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
            }
            if (data.hasOwnProperty('order_address_id')) {
                obj['order_address_id'] = ApiClient.convertToType(data['order_address_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('base_price')) {
                obj['base_price'] = ApiClient.convertToType(data['base_price'], 'String');
            }
            if (data.hasOwnProperty('price_ex_tax')) {
                obj['price_ex_tax'] = ApiClient.convertToType(data['price_ex_tax'], 'String');
            }
            if (data.hasOwnProperty('price_inc_tax')) {
                obj['price_inc_tax'] = ApiClient.convertToType(data['price_inc_tax'], 'String');
            }
            if (data.hasOwnProperty('price_tax')) {
                obj['price_tax'] = ApiClient.convertToType(data['price_tax'], 'String');
            }
            if (data.hasOwnProperty('base_total')) {
                obj['base_total'] = ApiClient.convertToType(data['base_total'], 'String');
            }
            if (data.hasOwnProperty('total_ex_tax')) {
                obj['total_ex_tax'] = ApiClient.convertToType(data['total_ex_tax'], 'String');
            }
            if (data.hasOwnProperty('total_inc_tax')) {
                obj['total_inc_tax'] = ApiClient.convertToType(data['total_inc_tax'], 'String');
            }
            if (data.hasOwnProperty('total_tax')) {
                obj['total_tax'] = ApiClient.convertToType(data['total_tax'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('base_cost_price')) {
                obj['base_cost_price'] = ApiClient.convertToType(data['base_cost_price'], 'String');
            }
            if (data.hasOwnProperty('cost_price_inc_tax')) {
                obj['cost_price_inc_tax'] = ApiClient.convertToType(data['cost_price_inc_tax'], 'String');
            }
            if (data.hasOwnProperty('cost_price_ex_tax')) {
                obj['cost_price_ex_tax'] = ApiClient.convertToType(data['cost_price_ex_tax'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('cost_price_tax')) {
                obj['cost_price_tax'] = ApiClient.convertToType(data['cost_price_tax'], 'String');
            }
            if (data.hasOwnProperty('is_refunded')) {
                obj['is_refunded'] = ApiClient.convertToType(data['is_refunded'], 'Boolean');
            }
            if (data.hasOwnProperty('refunded_amount')) {
                obj['refunded_amount'] = ApiClient.convertToType(data['refunded_amount'], 'String');
            }
            if (data.hasOwnProperty('return_id')) {
                obj['return_id'] = ApiClient.convertToType(data['return_id'], 'Number');
            }
            if (data.hasOwnProperty('wrapping_name')) {
                obj['wrapping_name'] = ApiClient.convertToType(data['wrapping_name'], 'String');
            }
            if (data.hasOwnProperty('base_wrapping_cost')) {
                obj['base_wrapping_cost'] = ApiClient.convertToType(data['base_wrapping_cost'], 'String');
            }
            if (data.hasOwnProperty('wrapping_cost_ex_tax')) {
                obj['wrapping_cost_ex_tax'] = ApiClient.convertToType(data['wrapping_cost_ex_tax'], 'String');
            }
            if (data.hasOwnProperty('wrapping_cost_inc_tax')) {
                obj['wrapping_cost_inc_tax'] = ApiClient.convertToType(data['wrapping_cost_inc_tax'], 'String');
            }
            if (data.hasOwnProperty('wrapping_cost_tax')) {
                obj['wrapping_cost_tax'] = ApiClient.convertToType(data['wrapping_cost_tax'], 'String');
            }
            if (data.hasOwnProperty('wrapping_message')) {
                obj['wrapping_message'] = ApiClient.convertToType(data['wrapping_message'], 'String');
            }
            if (data.hasOwnProperty('quantity_shipped')) {
                obj['quantity_shipped'] = ApiClient.convertToType(data['quantity_shipped'], 'Number');
            }
            if (data.hasOwnProperty('event_name')) {
                obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
            }
            if (data.hasOwnProperty('event_date')) {
                obj['event_date'] = ApiClient.convertToType(data['event_date'], 'Date');
            }
            if (data.hasOwnProperty('fixed_shipping_cost')) {
                obj['fixed_shipping_cost'] = ApiClient.convertToType(data['fixed_shipping_cost'], 'String');
            }
            if (data.hasOwnProperty('ebay_item_id')) {
                obj['ebay_item_id'] = ApiClient.convertToType(data['ebay_item_id'], 'String');
            }
            if (data.hasOwnProperty('ebay_transaction_id')) {
                obj['ebay_transaction_id'] = ApiClient.convertToType(data['ebay_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('option_set_id')) {
                obj['option_set_id'] = ApiClient.convertToType(data['option_set_id'], 'Number');
            }
            if (data.hasOwnProperty('parent_order_product_id')) {
                obj['parent_order_product_id'] = ApiClient.convertToType(data['parent_order_product_id'], 'Number');
            }
            if (data.hasOwnProperty('is_bundled_product')) {
                obj['is_bundled_product'] = ApiClient.convertToType(data['is_bundled_product'], 'Boolean');
            }
            if (data.hasOwnProperty('bin_picking_number')) {
                obj['bin_picking_number'] = ApiClient.convertToType(data['bin_picking_number'], 'String');
            }
            if (data.hasOwnProperty('applied_discounts')) {
                obj['applied_discounts'] = ApiClient.convertToType(data['applied_discounts'], [OrderProductAppliedDiscounts1]);
            }
            if (data.hasOwnProperty('product_options')) {
                obj['product_options'] = ApiClient.convertToType(data['product_options'], [OrderProductOptions1]);
            }
            if (data.hasOwnProperty('external_id')) {
                obj['external_id'] = ApiClient.convertToType(data['external_id'], 'Number');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
            }
            if (data.hasOwnProperty('variant_id')) {
                obj['variant_id'] = ApiClient.convertToType(data['variant_id'], 'Number');
            }
        }
        return obj;
    }

    /**
    * Numeric ID of this product within this order.
    * @member {Number} id
    */
    'id' = undefined;
    /**
    * Numeric ID of the associated order.
    * @member {Number} order_id
    */
    'order_id' = undefined;
    /**
    * Numeric ID of the product.
    * @member {Number} product_id
    */
    'product_id' = undefined;
    /**
    * Numeric ID of the associated order address.
    * @member {Number} order_address_id
    */
    'order_address_id' = undefined;
    /**
    * The product name.
    * @member {String} name
    */
    'name' = undefined;
    /**
    * User-defined product code/stock keeping unit (SKU).
    * @member {String} sku
    */
    'sku' = undefined;
    /**
    * Type of product
    * @member {module:model/OrderProducts2.TypeEnum} type
    */
    'type' = undefined;
    /**
    * The product's base price. (Float, Float-As-String, Integer)
    * @member {String} base_price
    */
    'base_price' = undefined;
    /**
    * The product’s price excluding tax. (Float, Float-As-String, Integer)
    * @member {String} price_ex_tax
    */
    'price_ex_tax' = undefined;
    /**
    * The product’s price including tax. (Float, Float-As-String, Integer)
    * @member {String} price_inc_tax
    */
    'price_inc_tax' = undefined;
    /**
    * Amount of tax applied to a single product.  Price tax is calculated as: `price_tax = price_inc_tax - price_ex_tax`  (Float, Float-As-String, Integer)
    * @member {String} price_tax
    */
    'price_tax' = undefined;
    /**
    * Total base price. (Float, Float-As-String, Integer)
    * @member {String} base_total
    */
    'base_total' = undefined;
    /**
    * Total base price excluding tax. (Float, Float-As-String, Integer)
    * @member {String} total_ex_tax
    */
    'total_ex_tax' = undefined;
    /**
    * Total base price including tax. (Float, Float-As-String, Integer)
    * @member {String} total_inc_tax
    */
    'total_inc_tax' = undefined;
    /**
    * Total tax applied to products. For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00.  If there is a manual discount applied total_tax is calcuted as the following: `(price_ex_tax - discount)*tax_rate=total_tax`. (Float, Float-As-String, Integer)
    * @member {String} total_tax
    */
    'total_tax' = undefined;
    /**
    * Quantity of the product ordered.
    * @member {Number} quantity
    */
    'quantity' = undefined;
    /**
    * The product's cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer) Read Only
    * @member {String} base_cost_price
    */
    'base_cost_price' = undefined;
    /**
    * The product's cost price including tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
    * @member {String} cost_price_inc_tax
    */
    'cost_price_inc_tax' = undefined;
    /**
    * The products cost price excluding tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
    * @member {String} cost_price_ex_tax
    */
    'cost_price_ex_tax' = undefined;
    /**
    * Weight of the product. (Float, Float-As-String, Integer)
    * @member {Number} weight
    */
    'weight' = undefined;
    /**
    * Tax applied to the product’s cost price. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
    * @member {String} cost_price_tax
    */
    'cost_price_tax' = undefined;
    /**
    * Whether the product has been refunded.
    * @member {Boolean} is_refunded
    */
    'is_refunded' = undefined;
    /**
    * The amount refunded from this transaction. (Float, Float-As-String, Integer)
    * @member {String} refunded_amount
    */
    'refunded_amount' = undefined;
    /**
    * Numeric ID for the refund.
    * @member {Number} return_id
    */
    'return_id' = undefined;
    /**
    * Name of gift-wrapping option
    * @member {String} wrapping_name
    */
    'wrapping_name' = undefined;
    /**
    * The value of the base wrapping cost. (Float, Float-As-String, Integer)
    * @member {String} base_wrapping_cost
    */
    'base_wrapping_cost' = undefined;
    /**
    * The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
    * @member {String} wrapping_cost_ex_tax
    */
    'wrapping_cost_ex_tax' = undefined;
    /**
    * The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
    * @member {String} wrapping_cost_inc_tax
    */
    'wrapping_cost_inc_tax' = undefined;
    /**
    * Tax applied to gift-wrapping option. (Float, Float-As-String, Integer)
    * @member {String} wrapping_cost_tax
    */
    'wrapping_cost_tax' = undefined;
    /**
    * Message to accompany gift-wrapping option.
    * @member {String} wrapping_message
    */
    'wrapping_message' = undefined;
    /**
    * Quantity of this item shipped.
    * @member {Number} quantity_shipped
    */
    'quantity_shipped' = undefined;
    /**
    * Name of promotional event/delivery date.
    * @member {String} event_name
    */
    'event_name' = undefined;
    /**
    * Date of the promotional event/scheduled delivery.
    * @member {Date} event_date
    */
    'event_date' = undefined;
    /**
    * Fixed shipping cost for this product. (Float, Float-As-String, Integer)
    * @member {String} fixed_shipping_cost
    */
    'fixed_shipping_cost' = undefined;
    /**
    * Item ID for this product on eBay.
    * @member {String} ebay_item_id
    */
    'ebay_item_id' = undefined;
    /**
    * Transaction ID for this product on eBay.
    * @member {String} ebay_transaction_id
    */
    'ebay_transaction_id' = undefined;
    /**
    * Numeric ID of the option set applied to the product.
    * @member {Number} option_set_id
    */
    'option_set_id' = undefined;
    /**
    * ID of a parent product.
    * @member {Number} parent_order_product_id
    */
    'parent_order_product_id' = undefined;
    /**
    * Whether this product is bundled with other products.
    * @member {Boolean} is_bundled_product
    */
    'is_bundled_product' = undefined;
    /**
    * Bin picking number for the physical product.
    * @member {String} bin_picking_number
    */
    'bin_picking_number' = undefined;
    /**
    * Array of objects containing discounts applied to the product.
    * @member {Array.<module:model/OrderProductAppliedDiscounts1>} applied_discounts
    */
    'applied_discounts' = undefined;
    /**
    * Array of product option objects.
    * @member {Array.<module:model/OrderProductOptions1>} product_options
    */
    'product_options' = undefined;
    /**
    * ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.
    * @member {Number} external_id
    */
    'external_id' = undefined;
    /**
    * Universal Product Code. Can be written to for custom products and catalog products.
    * @member {String} upc
    */
    'upc' = undefined;
    /**
    * Products `variant_id`. PUT or POST. This field is not available for custom products.
    * @member {Number} variant_id
    */
    'variant_id' = undefined;



    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */
    static TypeEnum = {
        /**
         * value: "physical"
         * @const
         */
        "physical": "physical",
        /**
         * value: "digital"
         * @const
         */
        "digital": "digital"    };

}
