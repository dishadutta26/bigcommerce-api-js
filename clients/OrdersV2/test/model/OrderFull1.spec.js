/*
 * Orders V2
 * `/orders`endpoints integrate with point-of-sale, shipping, distribution, and inventory-management systems.  ## Order The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   //...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   //... }  ```  ## Order Coupons Coupon code applied to an order.  ## Order Messages Messages associated with an order.  ## Order Products Product line items belonging to an order.  ## Order Shipping Addresses Customer shipping address belonging to an order.  ## Order Statuses Each order status represents a state in the order-fulfillment workflow.  ## Order Taxes Each tax applied to an order. This information can be useful for reporting purposes. All values are read-only.  ## Order Shipments Tracks a package consignment from an order that is shipped from the seller to the buyer.  ## Order Shipping Addresses Quotes Read Only. Gets all shipping quotes from an order.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersV2);
  }
}(this, function(expect, OrdersV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderFull1', function() {
      beforeEach(function() {
        instance = new OrdersV2.OrderFull1();
      });

      it('should create an instance of OrderFull1', function() {
        expect(instance).to.be.a(OrdersV2.OrderFull1);
      });

      it('should have the property id (base name: "id")', function() {
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property customer_id (base name: "customer_id")', function() {
        expect(instance).to.have.property('customer_id');
        // expect(instance.customer_id).to.be(expectedValueLiteral);
      });

      it('should have the property date_created (base name: "date_created")', function() {
        expect(instance).to.have.property('date_created');
        // expect(instance.date_created).to.be(expectedValueLiteral);
      });

      it('should have the property date_modified (base name: "date_modified")', function() {
        expect(instance).to.have.property('date_modified');
        // expect(instance.date_modified).to.be(expectedValueLiteral);
      });

      it('should have the property date_shipped (base name: "date_shipped")', function() {
        expect(instance).to.have.property('date_shipped');
        // expect(instance.date_shipped).to.be(expectedValueLiteral);
      });

      it('should have the property status_id (base name: "status_id")', function() {
        expect(instance).to.have.property('status_id');
        // expect(instance.status_id).to.be(expectedValueLiteral);
      });

      it('should have the property cart_id (base name: "cart_id")', function() {
        expect(instance).to.have.property('cart_id');
        // expect(instance.cart_id).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property custom_status (base name: "custom_status")', function() {
        expect(instance).to.have.property('custom_status');
        // expect(instance.custom_status).to.be(expectedValueLiteral);
      });

      it('should have the property subtotal_ex_tax (base name: "subtotal_ex_tax")', function() {
        expect(instance).to.have.property('subtotal_ex_tax');
        // expect(instance.subtotal_ex_tax).to.be(expectedValueLiteral);
      });

      it('should have the property subtotal_inc_tax (base name: "subtotal_inc_tax")', function() {
        expect(instance).to.have.property('subtotal_inc_tax');
        // expect(instance.subtotal_inc_tax).to.be(expectedValueLiteral);
      });

      it('should have the property subtotal_tax (base name: "subtotal_tax")', function() {
        expect(instance).to.have.property('subtotal_tax');
        // expect(instance.subtotal_tax).to.be(expectedValueLiteral);
      });

      it('should have the property base_shipping_cost (base name: "base_shipping_cost")', function() {
        expect(instance).to.have.property('base_shipping_cost');
        // expect(instance.base_shipping_cost).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_cost_ex_tax (base name: "shipping_cost_ex_tax")', function() {
        expect(instance).to.have.property('shipping_cost_ex_tax');
        // expect(instance.shipping_cost_ex_tax).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_cost_inc_tax (base name: "shipping_cost_inc_tax")', function() {
        expect(instance).to.have.property('shipping_cost_inc_tax');
        // expect(instance.shipping_cost_inc_tax).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_cost_tax (base name: "shipping_cost_tax")', function() {
        expect(instance).to.have.property('shipping_cost_tax');
        // expect(instance.shipping_cost_tax).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_cost_tax_class_id (base name: "shipping_cost_tax_class_id")', function() {
        expect(instance).to.have.property('shipping_cost_tax_class_id');
        // expect(instance.shipping_cost_tax_class_id).to.be(expectedValueLiteral);
      });

      it('should have the property base_handling_cost (base name: "base_handling_cost")', function() {
        expect(instance).to.have.property('base_handling_cost');
        // expect(instance.base_handling_cost).to.be(expectedValueLiteral);
      });

      it('should have the property handling_cost_ex_tax (base name: "handling_cost_ex_tax")', function() {
        expect(instance).to.have.property('handling_cost_ex_tax');
        // expect(instance.handling_cost_ex_tax).to.be(expectedValueLiteral);
      });

      it('should have the property handling_cost_inc_tax (base name: "handling_cost_inc_tax")', function() {
        expect(instance).to.have.property('handling_cost_inc_tax');
        // expect(instance.handling_cost_inc_tax).to.be(expectedValueLiteral);
      });

      it('should have the property handling_cost_tax (base name: "handling_cost_tax")', function() {
        expect(instance).to.have.property('handling_cost_tax');
        // expect(instance.handling_cost_tax).to.be(expectedValueLiteral);
      });

      it('should have the property handling_cost_tax_class_id (base name: "handling_cost_tax_class_id")', function() {
        expect(instance).to.have.property('handling_cost_tax_class_id');
        // expect(instance.handling_cost_tax_class_id).to.be(expectedValueLiteral);
      });

      it('should have the property base_wrapping_cost (base name: "base_wrapping_cost")', function() {
        expect(instance).to.have.property('base_wrapping_cost');
        // expect(instance.base_wrapping_cost).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_cost_ex_tax (base name: "wrapping_cost_ex_tax")', function() {
        expect(instance).to.have.property('wrapping_cost_ex_tax');
        // expect(instance.wrapping_cost_ex_tax).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_cost_inc_tax (base name: "wrapping_cost_inc_tax")', function() {
        expect(instance).to.have.property('wrapping_cost_inc_tax');
        // expect(instance.wrapping_cost_inc_tax).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_cost_tax (base name: "wrapping_cost_tax")', function() {
        expect(instance).to.have.property('wrapping_cost_tax');
        // expect(instance.wrapping_cost_tax).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_cost_tax_class_id (base name: "wrapping_cost_tax_class_id")', function() {
        expect(instance).to.have.property('wrapping_cost_tax_class_id');
        // expect(instance.wrapping_cost_tax_class_id).to.be(expectedValueLiteral);
      });

      it('should have the property total_ex_tax (base name: "total_ex_tax")', function() {
        expect(instance).to.have.property('total_ex_tax');
        // expect(instance.total_ex_tax).to.be(expectedValueLiteral);
      });

      it('should have the property total_inc_tax (base name: "total_inc_tax")', function() {
        expect(instance).to.have.property('total_inc_tax');
        // expect(instance.total_inc_tax).to.be(expectedValueLiteral);
      });

      it('should have the property total_tax (base name: "total_tax")', function() {
        expect(instance).to.have.property('total_tax');
        // expect(instance.total_tax).to.be(expectedValueLiteral);
      });

      it('should have the property items_total (base name: "items_total")', function() {
        expect(instance).to.have.property('items_total');
        // expect(instance.items_total).to.be(expectedValueLiteral);
      });

      it('should have the property items_shipped (base name: "items_shipped")', function() {
        expect(instance).to.have.property('items_shipped');
        // expect(instance.items_shipped).to.be(expectedValueLiteral);
      });

      it('should have the property payment_method (base name: "payment_method")', function() {
        expect(instance).to.have.property('payment_method');
        // expect(instance.payment_method).to.be(expectedValueLiteral);
      });

      it('should have the property payment_provider_id (base name: "payment_provider_id")', function() {
        expect(instance).to.have.property('payment_provider_id');
        // expect(instance.payment_provider_id).to.be(expectedValueLiteral);
      });

      it('should have the property payment_status (base name: "payment_status")', function() {
        expect(instance).to.have.property('payment_status');
        // expect(instance.payment_status).to.be(expectedValueLiteral);
      });

      it('should have the property refunded_amount (base name: "refunded_amount")', function() {
        expect(instance).to.have.property('refunded_amount');
        // expect(instance.refunded_amount).to.be(expectedValueLiteral);
      });

      it('should have the property order_is_digital (base name: "order_is_digital")', function() {
        expect(instance).to.have.property('order_is_digital');
        // expect(instance.order_is_digital).to.be(expectedValueLiteral);
      });

      it('should have the property store_credit_amount (base name: "store_credit_amount")', function() {
        expect(instance).to.have.property('store_credit_amount');
        // expect(instance.store_credit_amount).to.be(expectedValueLiteral);
      });

      it('should have the property gift_certificate_amount (base name: "gift_certificate_amount")', function() {
        expect(instance).to.have.property('gift_certificate_amount');
        // expect(instance.gift_certificate_amount).to.be(expectedValueLiteral);
      });

      it('should have the property ip_address (base name: "ip_address")', function() {
        expect(instance).to.have.property('ip_address');
        // expect(instance.ip_address).to.be(expectedValueLiteral);
      });

      it('should have the property geoip_country (base name: "geoip_country")', function() {
        expect(instance).to.have.property('geoip_country');
        // expect(instance.geoip_country).to.be(expectedValueLiteral);
      });

      it('should have the property geoip_country_iso2 (base name: "geoip_country_iso2")', function() {
        expect(instance).to.have.property('geoip_country_iso2');
        // expect(instance.geoip_country_iso2).to.be(expectedValueLiteral);
      });

      it('should have the property currency_id (base name: "currency_id")', function() {
        expect(instance).to.have.property('currency_id');
        // expect(instance.currency_id).to.be(expectedValueLiteral);
      });

      it('should have the property currency_code (base name: "currency_code")', function() {
        expect(instance).to.have.property('currency_code');
        // expect(instance.currency_code).to.be(expectedValueLiteral);
      });

      it('should have the property currency_exchange_rate (base name: "currency_exchange_rate")', function() {
        expect(instance).to.have.property('currency_exchange_rate');
        // expect(instance.currency_exchange_rate).to.be(expectedValueLiteral);
      });

      it('should have the property default_currency_id (base name: "default_currency_id")', function() {
        expect(instance).to.have.property('default_currency_id');
        // expect(instance.default_currency_id).to.be(expectedValueLiteral);
      });

      it('should have the property default_currency_code (base name: "default_currency_code")', function() {
        expect(instance).to.have.property('default_currency_code');
        // expect(instance.default_currency_code).to.be(expectedValueLiteral);
      });

      it('should have the property staff_notes (base name: "staff_notes")', function() {
        expect(instance).to.have.property('staff_notes');
        // expect(instance.staff_notes).to.be(expectedValueLiteral);
      });

      it('should have the property customer_message (base name: "customer_message")', function() {
        expect(instance).to.have.property('customer_message');
        // expect(instance.customer_message).to.be(expectedValueLiteral);
      });

      it('should have the property discount_amount (base name: "discount_amount")', function() {
        expect(instance).to.have.property('discount_amount');
        // expect(instance.discount_amount).to.be(expectedValueLiteral);
      });

      it('should have the property coupon_discount (base name: "coupon_discount")', function() {
        expect(instance).to.have.property('coupon_discount');
        // expect(instance.coupon_discount).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_address_count (base name: "shipping_address_count")', function() {
        expect(instance).to.have.property('shipping_address_count');
        // expect(instance.shipping_address_count).to.be(expectedValueLiteral);
      });

      it('should have the property is_deleted (base name: "is_deleted")', function() {
        expect(instance).to.have.property('is_deleted');
        // expect(instance.is_deleted).to.be(expectedValueLiteral);
      });

      it('should have the property is_email_opt_in (base name: "is_email_opt_in")', function() {
        expect(instance).to.have.property('is_email_opt_in');
        // expect(instance.is_email_opt_in).to.be(expectedValueLiteral);
      });

      it('should have the property credit_card_type (base name: "credit_card_type")', function() {
        expect(instance).to.have.property('credit_card_type');
        // expect(instance.credit_card_type).to.be(expectedValueLiteral);
      });

      it('should have the property ebay_order_id (base name: "ebay_order_id")', function() {
        expect(instance).to.have.property('ebay_order_id');
        // expect(instance.ebay_order_id).to.be(expectedValueLiteral);
      });

      it('should have the property billing_address (base name: "billing_address")', function() {
        expect(instance).to.have.property('billing_address');
        // expect(instance.billing_address).to.be(expectedValueLiteral);
      });

      it('should have the property order_source (base name: "order_source")', function() {
        expect(instance).to.have.property('order_source');
        // expect(instance.order_source).to.be(expectedValueLiteral);
      });

      it('should have the property external_source (base name: "external_source")', function() {
        expect(instance).to.have.property('external_source');
        // expect(instance.external_source).to.be(expectedValueLiteral);
      });

      it('should have the property products (base name: "products")', function() {
        expect(instance).to.have.property('products');
        // expect(instance.products).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_addresses (base name: "shipping_addresses")', function() {
        expect(instance).to.have.property('shipping_addresses');
        // expect(instance.shipping_addresses).to.be(expectedValueLiteral);
      });

      it('should have the property coupons (base name: "coupons")', function() {
        expect(instance).to.have.property('coupons');
        // expect(instance.coupons).to.be(expectedValueLiteral);
      });

      it('should have the property external_id (base name: "external_id")', function() {
        expect(instance).to.have.property('external_id');
        // expect(instance.external_id).to.be(expectedValueLiteral);
      });

      it('should have the property external_merchant_id (base name: "external_merchant_id")', function() {
        expect(instance).to.have.property('external_merchant_id');
        // expect(instance.external_merchant_id).to.be(expectedValueLiteral);
      });

      it('should have the property channel_id (base name: "channel_id")', function() {
        expect(instance).to.have.property('channel_id');
        // expect(instance.channel_id).to.be(expectedValueLiteral);
      });

      it('should have the property tax_provider_id (base name: "tax_provider_id")', function() {
        expect(instance).to.have.property('tax_provider_id');
        // expect(instance.tax_provider_id).to.be(expectedValueLiteral);
      });

    });
  });

}));
