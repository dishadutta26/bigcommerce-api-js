/*
 * Orders V2
 * `/orders`endpoints integrate with point-of-sale, shipping, distribution, and inventory-management systems.  ## Order The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   //...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   //... }  ```  ## Order Coupons Coupon code applied to an order.  ## Order Messages Messages associated with an order.  ## Order Products Product line items belonging to an order.  ## Order Shipping Addresses Customer shipping address belonging to an order.  ## Order Statuses Each order status represents a state in the order-fulfillment workflow.  ## Order Taxes Each tax applied to an order. This information can be useful for reporting purposes. All values are read-only.  ## Order Shipments Tracks a package consignment from an order that is shipped from the seller to the buyer.  ## Order Shipping Addresses Quotes Read Only. Gets all shipping quotes from an order.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersV2);
  }
}(this, function(expect, OrdersV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderShipmentPost1', function() {
      beforeEach(function() {
        instance = new OrdersV2.OrderShipmentPost1();
      });

      it('should create an instance of OrderShipmentPost1', function() {
        expect(instance).to.be.a(OrdersV2.OrderShipmentPost1);
      });

      it('should have the property order_address_id (base name: "order_address_id")', function() {
        expect(instance).to.have.property('order_address_id');
        // expect(instance.order_address_id).to.be(expectedValueLiteral);
      });

      it('should have the property tracking_number (base name: "tracking_number")', function() {
        expect(instance).to.have.property('tracking_number');
        // expect(instance.tracking_number).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_method (base name: "shipping_method")', function() {
        expect(instance).to.have.property('shipping_method');
        // expect(instance.shipping_method).to.be(expectedValueLiteral);
      });

      it('should have the property shipping_provider (base name: "shipping_provider")', function() {
        expect(instance).to.have.property('shipping_provider');
        // expect(instance.shipping_provider).to.be(expectedValueLiteral);
      });

      it('should have the property tracking_carrier (base name: "tracking_carrier")', function() {
        expect(instance).to.have.property('tracking_carrier');
        // expect(instance.tracking_carrier).to.be(expectedValueLiteral);
      });

      it('should have the property comments (base name: "comments")', function() {
        expect(instance).to.have.property('comments');
        // expect(instance.comments).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

    });
  });

}));
