/**
 * Scripts
 *  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication) - [Available Endpoints](#available-endpoints)  The BigCommerce Scripts API can be used to add a script to a store's page. Some use cases: * Insert tracking codes * Storefront single click applications * Live chat, support plugins * Theme extension or connector apps  To learn more about Scripts, see [here](/api-docs/scripts/scripts-overview).   ## OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Checkout Content<sup>1</sup>                             | modify     | `store_content_checkout`                      | | Checkout Content<sup>1</sup>                             | read-only  | `store_content_checkout_read_only`            | | Content                                       | modify     | `store_v2_content`                            | | Content                                       | read-only  | `store_v2_content_read_only`                  |  1. `Checkout Content` scopes are required to create or read scripts on the checkout page.  For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description                                                             | |-----------------------------------------|-------------------------------------------------------------------------| | Scripts                                 | Add client-side code to a store                                         |
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Body from '../model/Body';
import ErrorResponse from '../model/ErrorResponse';
import NoContent from '../model/NoContent';
import ScriptPost1 from '../model/ScriptPost1';
import ScriptResponse1 from '../model/ScriptResponse1';
import ScriptsResponse from '../model/ScriptsResponse';

/**
* Scripts service.
* @module api/ScriptsApi
* @version 3.0
*/
export default class ScriptsApi {

    /**
    * Constructs a new ScriptsApi. 
    * @alias module:api/ScriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createScript operation.
     * @callback module:api/ScriptsApi~createScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Script
     * Creates a *Script*.  **Required Fields** * name  **Read Only Fields** * uuid  **Notes** * If kind is &#x60;src&#x60; â€“- Only the &#x60;src&#x60; property is needed, and you can optionally supply a &#x60;load_method&#x60;. The &#x60;html&#x60; field should not be specified. * If kind is script_tag -- Only the &#x60;script_tag&#x60; is needed. The &#x60;src&#x60; field should not be specified. * Each app can have 10 scripts installed. * Multiple scripts can be created [per call](https://developer.bigcommerce.com/api-docs/storefront/scripts-overview#scripts_scripts-notes). 
     * @param {module:api/ScriptsApi~createScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptResponse1}
     */
    createScript(body, accept, contentType, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptResponse1;

      return this.apiClient.callApi(
        '/content/scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteScript operation.
     * @callback module:api/ScriptsApi~deleteScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NoContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Script
     * Deletes a *Script*.
     * @param {module:api/ScriptsApi~deleteScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NoContent}
     */
    deleteScript(uuid, accept, contentType, callback) {
      let postBody = null;

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NoContent;

      return this.apiClient.callApi(
        '/content/scripts/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getScript operation.
     * @callback module:api/ScriptsApi~getScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Script
     * Returns a single *Script*.
     * @param {module:api/ScriptsApi~getScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptResponse1}
     */
    getScript(uuid, accept, contentType, callback) {
      let postBody = null;

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScriptResponse1;

      return this.apiClient.callApi(
        '/content/scripts/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getScripts operation.
     * @callback module:api/ScriptsApi~getScriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Scripts
     * Returns a list of *Scripts*. Optional parameters can be passed in.  This will only return scripts that have been created by the api key and password that created the script originally. 
     * @param {Object} opts Optional parameters
     * @param {module:api/ScriptsApi~getScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptsResponse}
     */
    getScripts(accept, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'direction': opts['direction']
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScriptsResponse;

      return this.apiClient.callApi(
        '/content/scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateScript operation.
     * @callback module:api/ScriptsApi~updateScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Script
     * Updates a *Script*.
     * @param {module:api/ScriptsApi~updateScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptResponse1}
     */
    updateScript(body, uuid, contentType, accept, callback) {
      let postBody = body;

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptResponse1;

      return this.apiClient.callApi(
        '/content/scripts/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
