/**
 * Scripts
 *  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication) - [Available Endpoints](#available-endpoints)  The BigCommerce Scripts API can be used to add a script to a store's page. Some use cases: * Insert tracking codes * Storefront single click applications * Live chat, support plugins * Theme extension or connector apps  To learn more about Scripts, see [here](/api-docs/scripts/scripts-overview).   ## OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Checkout Content<sup>1</sup>                             | modify     | `store_content_checkout`                      | | Checkout Content<sup>1</sup>                             | read-only  | `store_content_checkout_read_only`            | | Content                                       | modify     | `store_v2_content`                            | | Content                                       | read-only  | `store_v2_content_read_only`                  |  1. `Checkout Content` scopes are required to create or read scripts on the checkout page.  For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description                                                             | |-----------------------------------------|-------------------------------------------------------------------------| | Scripts                                 | Add client-side code to a store                                         |
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The ScriptPost model module.
* @module model/ScriptPost
* @version 3.0
*/
export default class ScriptPost {
    /**
    * Constructs a new <code>ScriptPost</code>.
    * @alias module:model/ScriptPost
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ScriptPost</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ScriptPost} obj Optional instance to populate.
    * @return {module:model/ScriptPost} The populated <code>ScriptPost</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptPost();
                        
            
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('src')) {
                obj['src'] = ApiClient.convertToType(data['src'], 'String');
            }
            if (data.hasOwnProperty('auto_uninstall')) {
                obj['auto_uninstall'] = ApiClient.convertToType(data['auto_uninstall'], 'Boolean');
            }
            if (data.hasOwnProperty('load_method')) {
                obj['load_method'] = ApiClient.convertToType(data['load_method'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('api_client_id')) {
                obj['api_client_id'] = ApiClient.convertToType(data['api_client_id'], 'String');
            }
            if (data.hasOwnProperty('consent_category')) {
                obj['consent_category'] = ApiClient.convertToType(data['consent_category'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
    * The user-friendly description.
    * @member {String} description
    */
    'description' = undefined;
    /**
    * An html string containing exactly one `script` tag. Only present if `kind` is `script_tag`
    * @member {String} html
    */
    'html' = undefined;
    /**
    * The `src` attribute of the script to load. Only present if `kind` is `src`.
    * @member {String} src
    */
    'src' = undefined;
    /**
    * It will enable automatic cleanup of the script when the single click app is uninstalled or OAuth token is revoked.
    * @member {Boolean} auto_uninstall
    */
    'auto_uninstall' = undefined;
    /**
    * The load method to use for the script. Values are `default`, `async`, or `defer`. It determines how the script should be loaded into the page.
    * @member {module:model/ScriptPost.LoadMethodEnum} load_method
    */
    'load_method' = undefined;
    /**
    * Where on the page to place the script. Values are `head` or `footer`.
    * @member {module:model/ScriptPost.LocationEnum} location
    */
    'location' = undefined;
    /**
    * Which set of pages the script should load on.   Please note that you need to have `Checkout content` scope to use `all_pages` and `checkout`.  - The current visibility options are `storefront`, `checkout`, `all_pages` and `order_confirmation`.       `storefront`: All pages that are not `checkout` or `order_confirmation`.     For a list of all locations visit [Scripts Visibility](https://developer.bigcommerce.com/api-docs/storefront/scripts-overview#scripts_scripts-visibility).
    * @member {module:model/ScriptPost.VisibilityEnum} visibility
    */
    'visibility' = undefined;
    /**
    * What type of script this is.  `src` - a `script` tag will be generated with its `src` attribute set to the value of `src`; For scripts that use the src url. By providing a path to the script, we can optimize and serve the script tag automatically for you.  `script_tag` - The value of `html` will be injected directly onto the page. For scripts which include a raw HTML script_tag to be inserted into the page. The load_method must be default.
    * @member {module:model/ScriptPost.KindEnum} kind
    */
    'kind' = undefined;
    /**
    * The client id of the API user that created this script, or blank if created by other means.
    * @member {String} api_client_id
    */
    'api_client_id' = undefined;
    /**
    * What category of script this is for the purposes of GDPR/CCPA compliance.
    * @member {module:model/ScriptPost.ConsentCategoryEnum} consent_category
    */
    'consent_category' = undefined;
    /**
    * Indicates whether a script is enabled.
    * @member {Boolean} enabled
    */
    'enabled' = undefined;



    /**
    * Allowed values for the <code>load_method</code> property.
    * @enum {String}
    * @readonly
    */
    static LoadMethodEnum = {
        /**
         * value: "default"
         * @const
         */
        "default": "default",
        /**
         * value: "async"
         * @const
         */
        "async": "async",
        /**
         * value: "defer"
         * @const
         */
        "defer": "defer"    };
    /**
    * Allowed values for the <code>location</code> property.
    * @enum {String}
    * @readonly
    */
    static LocationEnum = {
        /**
         * value: "head"
         * @const
         */
        "head": "head",
        /**
         * value: "footer"
         * @const
         */
        "footer": "footer"    };
    /**
    * Allowed values for the <code>visibility</code> property.
    * @enum {String}
    * @readonly
    */
    static VisibilityEnum = {
        /**
         * value: "storefront"
         * @const
         */
        "storefront": "storefront",
        /**
         * value: "all_pages"
         * @const
         */
        "all_pages": "all_pages",
        /**
         * value: "checkout"
         * @const
         */
        "checkout": "checkout",
        /**
         * value: "order_confirmation"
         * @const
         */
        "order_confirmation": "order_confirmation"    };
    /**
    * Allowed values for the <code>kind</code> property.
    * @enum {String}
    * @readonly
    */
    static KindEnum = {
        /**
         * value: "src"
         * @const
         */
        "src": "src",
        /**
         * value: "script_tag"
         * @const
         */
        "script_tag": "script_tag"    };
    /**
    * Allowed values for the <code>consent_category</code> property.
    * @enum {String}
    * @readonly
    */
    static ConsentCategoryEnum = {
        /**
         * value: "essential"
         * @const
         */
        "essential": "essential",
        /**
         * value: "functional"
         * @const
         */
        "functional": "functional",
        /**
         * value: "analytics"
         * @const
         */
        "analytics": "analytics",
        /**
         * value: "targeting"
         * @const
         */
        "targeting": "targeting"    };

}
