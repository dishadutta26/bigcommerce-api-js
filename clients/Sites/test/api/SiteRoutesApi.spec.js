/*
 * Sites
 * - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication) - [Available Endpoints](#available-endpoints) - [Usage Notes](#usage-notes) - [Resources](#resources)  Create and manage sites and routes for headless storefronts.  ## OAuth Scopes | UI Name        | Permission | Parameter               | |----------------|------------|-------------------------| | Sites & Routes | modify     | `store_sites`           | | Sites & Routess| read-only  | `store_sites_read_only` |  For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description                                                              | |-----------------------------------------|--------------------------------------------------------------------------| | Channels                                | Create and manage catalog listings and channels                          | | Channel Site                            | Manage sites and routing for headless storefronts                        | | Channel Listings                        | Manage catalog differences among different storefronts or marketplaces   |  ## Usage Notes  **Sites and Site Routes:** * Sites and routes control the paths that make up a headless storefront * Site refers to the domain associated with a channel * Routes point to the URLs for key pages on the headless storefront. They define where the homepage is, where the cart page is, etc. * Sites and routes ensure links point where they’re supposed to and sales are attributed correctly. For example, a shopper’s order confirmation email should link back to Storefront A, where they placed their order, not Storefront B, which they’ve never visited.  ## Resources  ### Related Endpoints * [Channels](https://developer.bigcommerce.com/api-reference/cart-checkout/channels-listings-api)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'), require('../../src/BCApiClient'), require('../config'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Sites);
  }
}(this, function(expect, Sites, BCApiClient, config) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Sites.SiteRoutesApi(new BCApiClient(config));
  });

  describe('(package)', function() {
    describe('SiteRoutesApi', function() {
      describe('deleteRoute', function() {
        it('should call deleteRoute successfully', async function() {
          // const deleteRouteResponse = await instance.deleteRoute();
          // expect(deleteRouteResponse.ok).to.be(true);
          // expect(deleteRouteResponse.body.data).to.be.an('array');
        });
      });
      describe('getSiteRoute', function() {
        it('should call getSiteRoute successfully', async function() {
          // const getSiteRouteResponse = await instance.getSiteRoute();
          // expect(getSiteRouteResponse.ok).to.be(true);
          // expect(getSiteRouteResponse.body.data).to.be.an('array');
        });
      });
      describe('indexSiteRoutes', function() {
        it('should call indexSiteRoutes successfully', async function() {
          // const indexSiteRoutesResponse = await instance.indexSiteRoutes();
          // expect(indexSiteRoutesResponse.ok).to.be(true);
          // expect(indexSiteRoutesResponse.body.data).to.be.an('array');
        });
      });
      describe('postSiteRoute', function() {
        it('should call postSiteRoute successfully', async function() {
          // const postSiteRouteResponse = await instance.postSiteRoute();
          // expect(postSiteRouteResponse.ok).to.be(true);
          // expect(postSiteRouteResponse.body.data).to.be.an('array');
        });
      });
      describe('putSiteRoute', function() {
        it('should call putSiteRoute successfully', async function() {
          // const putSiteRouteResponse = await instance.putSiteRoute();
          // expect(putSiteRouteResponse.ok).to.be(true);
          // expect(putSiteRouteResponse.body.data).to.be.an('array');
        });
      });
      describe('sitesSiteIdRoutesPut', function() {
        it('should call sitesSiteIdRoutesPut successfully', async function() {
          // const sitesSiteIdRoutesPutResponse = await instance.sitesSiteIdRoutesPut();
          // expect(sitesSiteIdRoutesPutResponse.ok).to.be(true);
          // expect(sitesSiteIdRoutesPutResponse.body.data).to.be.an('array');
        });
      });
    });
  });

}));
