/**
 * Store Information
 * ### Store Information Reference The Store Information object, and Get Store Information endpoint, manage store profile settings. A Store Information object represents an individual storeâ€™s profile and metadata.  ### System Reference The Get a Timestamp endpoint generates a timestamp ping to check the system status.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateFormat from './DateFormat';

/**
* The Timezone model module.
* @module model/Timezone
* @version 2.0
*/
export default class Timezone {
    /**
    * Constructs a new <code>Timezone</code>.
    * @alias module:model/Timezone
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Timezone</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Timezone} obj Optional instance to populate.
    * @return {module:model/Timezone} The populated <code>Timezone</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Timezone();
                        
            
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('raw_offset')) {
                obj['raw_offset'] = ApiClient.convertToType(data['raw_offset'], 'Number');
            }
            if (data.hasOwnProperty('dst_offset')) {
                obj['dst_offset'] = ApiClient.convertToType(data['dst_offset'], 'Number');
            }
            if (data.hasOwnProperty('dst_correction')) {
                obj['dst_correction'] = ApiClient.convertToType(data['dst_correction'], 'Boolean');
            }
            if (data.hasOwnProperty('date_format')) {
                obj['date_format'] = DateFormat.constructFromObject(data['date_format']);
            }
        }
        return obj;
    }

    /**
    * a string identifying the time zone, in the format: <Continent-name>/<City-name>.
    * @member {String} name
    */
    'name' = undefined;
    /**
    * a negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
    * @member {Number} raw_offset
    */
    'raw_offset' = undefined;
    /**
    * \"-/+\" offset from UTC/GMT, in seconds, during summer/daylight saving time.
    * @member {Number} dst_offset
    */
    'dst_offset' = undefined;
    /**
    * a boolean indicating whether this time zone observes daylight saving time.
    * @member {Boolean} dst_correction
    */
    'dst_correction' = undefined;
    /**
    * @member {module:model/DateFormat} date_format
    */
    'date_format' = undefined;




}
