/**
 * Store Information
 * ### Store Information Reference The Store Information object, and Get Store Information endpoint, manage store profile settings. A Store Information object represents an individual store’s profile and metadata.  ### System Reference The Get a Timestamp endpoint generates a timestamp ping to check the system status.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StoreInformationFeatures from './StoreInformationFeatures';
import StoreInformationLogo from './StoreInformationLogo';
import TimeZone from './TimeZone';

/**
* The StoreInformation model module.
* @module model/StoreInformation
* @version 2.0
*/
export default class StoreInformation {
    /**
    * Constructs a new <code>StoreInformation</code>.
    * @alias module:model/StoreInformation
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>StoreInformation</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/StoreInformation} obj Optional instance to populate.
    * @return {module:model/StoreInformation} The populated <code>StoreInformation</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoreInformation();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('secure_URL')) {
                obj['secure_URL'] = ApiClient.convertToType(data['secure_URL'], 'String');
            }
            if (data.hasOwnProperty('control_panel_base_url')) {
                obj['control_panel_base_url'] = ApiClient.convertToType(data['control_panel_base_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('admin_email')) {
                obj['admin_email'] = ApiClient.convertToType(data['admin_email'], 'String');
            }
            if (data.hasOwnProperty('order_email')) {
                obj['order_email'] = ApiClient.convertToType(data['order_email'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = TimeZone.constructFromObject(data['timezone']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('currency_symbol')) {
                obj['currency_symbol'] = ApiClient.convertToType(data['currency_symbol'], 'String');
            }
            if (data.hasOwnProperty('decimal_separator')) {
                obj['decimal_separator'] = ApiClient.convertToType(data['decimal_separator'], 'String');
            }
            if (data.hasOwnProperty('thousands_separator')) {
                obj['thousands_separator'] = ApiClient.convertToType(data['thousands_separator'], 'String');
            }
            if (data.hasOwnProperty('decimal_places')) {
                obj['decimal_places'] = ApiClient.convertToType(data['decimal_places'], 'Number');
            }
            if (data.hasOwnProperty('currency_symbol_location')) {
                obj['currency_symbol_location'] = ApiClient.convertToType(data['currency_symbol_location'], 'String');
            }
            if (data.hasOwnProperty('weight_units')) {
                obj['weight_units'] = ApiClient.convertToType(data['weight_units'], 'String');
            }
            if (data.hasOwnProperty('dimension_units')) {
                obj['dimension_units'] = ApiClient.convertToType(data['dimension_units'], 'String');
            }
            if (data.hasOwnProperty('dimension_decimal_places')) {
                obj['dimension_decimal_places'] = ApiClient.convertToType(data['dimension_decimal_places'], 'Number');
            }
            if (data.hasOwnProperty('dimension_decimal_token')) {
                obj['dimension_decimal_token'] = ApiClient.convertToType(data['dimension_decimal_token'], 'String');
            }
            if (data.hasOwnProperty('dimension_thousands_token:')) {
                obj['dimension_thousands_token:'] = ApiClient.convertToType(data['dimension_thousands_token:'], 'String');
            }
            if (data.hasOwnProperty('plan_name')) {
                obj['plan_name'] = ApiClient.convertToType(data['plan_name'], 'String');
            }
            if (data.hasOwnProperty('plan_level')) {
                obj['plan_level'] = ApiClient.convertToType(data['plan_level'], 'String');
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = StoreInformationLogo.constructFromObject(data['logo']);
            }
            if (data.hasOwnProperty('is_price_entered_with_tax')) {
                obj['is_price_entered_with_tax'] = ApiClient.convertToType(data['is_price_entered_with_tax'], 'Boolean');
            }
            if (data.hasOwnProperty('active_comparison_modules')) {
                obj['active_comparison_modules'] = ApiClient.convertToType(data['active_comparison_modules'], [Object]);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = StoreInformationFeatures.constructFromObject(data['features']);
            }
        }
        return obj;
    }

    /**
    * Unique store identifier.
    * @member {String} id
    */
    'id' = undefined;
    /**
    * Primary domain name.
    * @member {String} domain
    */
    'domain' = undefined;
    /**
    * Store’s current HTTPS URL.
    * @member {String} secure_URL
    */
    'secure_URL' = undefined;
    /**
    * The secure hostname of the control panel.
    * @member {String} control_panel_base_url
    */
    'control_panel_base_url' = undefined;
    /**
    * Store's name.
    * @member {String} name
    */
    'name' = undefined;
    /**
    * Primary contact’s first name (as defined during the store sign-up process).
    * @member {String} first_name
    */
    'first_name' = undefined;
    /**
    * Primary contact’s last name (as defined during the store sign-up process).
    * @member {String} last_name
    */
    'last_name' = undefined;
    /**
    * Display address.
    * @member {String} address
    */
    'address' = undefined;
    /**
    * Country where the store is located (as defined during the store sign-up process).
    * @member {String} country
    */
    'country' = undefined;
    /**
    * Display phone number.
    * @member {String} phone
    */
    'phone' = undefined;
    /**
    * Email address of the store administrator/owner.
    * @member {String} admin_email
    */
    'admin_email' = undefined;
    /**
    * Email address for orders and fulfillment.
    * @member {String} order_email
    */
    'order_email' = undefined;
    /**
    * @member {module:model/TimeZone} timezone
    */
    'timezone' = undefined;
    /**
    * Default language code.
    * @member {String} language
    */
    'language' = undefined;
    /**
    * Default currency code
    * @member {String} currency
    */
    'currency' = undefined;
    /**
    * Default symbol for values in the currency.
    * @member {String} currency_symbol
    */
    'currency_symbol' = undefined;
    /**
    * Default decimal separator for values in the currency.
    * @member {String} decimal_separator
    */
    'decimal_separator' = undefined;
    /**
    * Default thousands separator for values in the currency.
    * @member {String} thousands_separator
    */
    'thousands_separator' = undefined;
    /**
    * Default decimal places for values in the currency.
    * @member {Number} decimal_places
    */
    'decimal_places' = undefined;
    /**
    * Default position of the currency symbol (left or right).
    * @member {String} currency_symbol_location
    */
    'currency_symbol_location' = undefined;
    /**
    * Default weight units (metric or imperial).
    * @member {String} weight_units
    */
    'weight_units' = undefined;
    /**
    * Default dimension units (metric or imperial).
    * @member {String} dimension_units
    */
    'dimension_units' = undefined;
    /**
    * The number of decimal places.
    * @member {Number} dimension_decimal_places
    */
    'dimension_decimal_places' = undefined;
    /**
    * The symbol that separates the whole numbers from the decimal points.
    * @member {String} dimension_decimal_token
    */
    'dimension_decimal_token' = undefined;
    /**
    * The symbol used to denote thousands.
    * @member {String} dimension_thousands_token:
    */
    'dimension_thousands_token:' = undefined;
    /**
    * Name of the BigCommerce plan to which this store is subscribed.
    * @member {String} plan_name
    */
    'plan_name' = undefined;
    /**
    * Level of the BigCommerce plan to which this store is subscribed.
    * @member {String} plan_level
    */
    'plan_level' = undefined;
    /**
    * Industry, or vertical category, in which the business operates. (As selected from drop-down list during the store sign-up process.)
    * @member {String} industry
    */
    'industry' = undefined;
    /**
    * @member {module:model/StoreInformationLogo} logo
    */
    'logo' = undefined;
    /**
    * A Boolean value that indicates whether or not prices are entered with tax.
    * @member {Boolean} is_price_entered_with_tax
    */
    'is_price_entered_with_tax' = undefined;
    /**
    * @member {Array.<Object>} active_comparison_modules
    */
    'active_comparison_modules' = undefined;
    /**
    * @member {module:model/StoreInformationFeatures} features
    */
    'features' = undefined;




}
