/**
 * Subscribers
 * ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Customers | modify | `store_v2_customers` | |  Customers | read-only | `store_v2_customers_read_only` |  ### Headers  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### Example  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Content-Type: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  * For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import NotFound from '../model/NotFound';
import SubscriberCollectionResponse from '../model/SubscriberCollectionResponse';
import SubscriberPost1 from '../model/SubscriberPost1';
import SubscriberPut1 from '../model/SubscriberPut1';
import SubscriberResponse from '../model/SubscriberResponse';

/**
* Subscribers service.
* @module api/SubscribersApi
* @version 3.0
*/
export default class SubscribersApi {

    /**
    * Constructs a new SubscribersApi. 
    * @alias module:api/SubscribersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createSubscriber operation.
     * @callback module:api/SubscribersApi~createSubscriberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Subscriber
     * Creates a *Subscriber*.  **Required Fields** * email  **Read Only Fields** * id
     * @param {Object} opts Optional parameters
     * @param {module:api/SubscribersApi~createSubscriberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriberResponse}
     */
    createSubscriber(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriberResponse;

      return this.apiClient.callApi(
        '/customers/subscribers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteSubscriberById operation.
     * @callback module:api/SubscribersApi~deleteSubscriberByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Subscriber
     * Deletes a *Subscriber*.
     * @param {Object} opts Optional parameters
     * @param {module:api/SubscribersApi~deleteSubscriberByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubscriberById(subscriberId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'subscriber_id': subscriberId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType'],
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/customers/subscribers/{subscriber_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteSubscribers operation.
     * @callback module:api/SubscribersApi~deleteSubscribersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Subscribers
     * By default, it deletes all *Subscribers*. A filter should be added to avoid deleting all subscribers in a store.
     * @param {Object} opts Optional parameters
     * @param {module:api/SubscribersApi~deleteSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubscribers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'email': opts['email'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'source': opts['source'],
        'order_id': opts['orderId'],
        'date_created': opts['dateCreated'],
        'date_modified': opts['dateModified']
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/customers/subscribers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSubscriberById operation.
     * @callback module:api/SubscribersApi~getSubscriberByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Subscriber
     * Returns a *Subscriber*.
     * @param {Object} opts Optional parameters
     * @param {module:api/SubscribersApi~getSubscriberByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriberResponse}
     */
    getSubscriberById(subscriberId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'subscriber_id': subscriberId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriberResponse;

      return this.apiClient.callApi(
        '/customers/subscribers/{subscriber_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSubscribers operation.
     * @callback module:api/SubscribersApi~getSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriberCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscribers
     * Returns a list of *Subscribers*. Optional filter parameters can be passed in.
     * @param {Object} opts Optional parameters
     * @param {module:api/SubscribersApi~getSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriberCollectionResponse}
     */
    getSubscribers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'email': opts['email'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'source': opts['source'],
        'order_id': opts['orderId'],
        'date_created': opts['dateCreated'],
        'date_modified': opts['dateModified'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriberCollectionResponse;

      return this.apiClient.callApi(
        '/customers/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateSubscriber operation.
     * @callback module:api/SubscribersApi~updateSubscriberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Subscriber
     * Updates a *Subscriber*.  **Read Only Fields** * id
     * @param {Object} opts Optional parameters
     * @param {module:api/SubscribersApi~updateSubscriberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriberResponse}
     */
    updateSubscriber(body, subscriberId, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'subscriber_id': subscriberId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['X-Auth-Client', 'X-Auth-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriberResponse;

      return this.apiClient.callApi(
        '/customers/subscribers/{subscriber_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
