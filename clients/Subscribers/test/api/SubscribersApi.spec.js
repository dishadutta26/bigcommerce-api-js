/*
 * Subscribers
 * ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Customers | modify | `store_v2_customers` | |  Customers | read-only | `store_v2_customers_read_only` |  ### Headers  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### Example  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Content-Type: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  * For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'), require('../../src/BCApiClient'), require('../config'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Subscribers);
  }
}(this, function(expect, Subscribers, BCApiClient, config) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Subscribers.SubscribersApi(new BCApiClient(config));
  });

  describe('(package)', function() {
    describe('SubscribersApi', function() {
      describe('createSubscriber', function() {
        it('should call createSubscriber successfully', async function() {
          // const createSubscriberResponse = await instance.createSubscriber();
          // expect(createSubscriberResponse.ok).to.be(true);
          // expect(createSubscriberResponse.body.data).to.be.an('array');
        });
      });
      describe('deleteSubscriberById', function() {
        it('should call deleteSubscriberById successfully', async function() {
          // const deleteSubscriberByIdResponse = await instance.deleteSubscriberById();
          // expect(deleteSubscriberByIdResponse.ok).to.be(true);
          // expect(deleteSubscriberByIdResponse.body.data).to.be.an('array');
        });
      });
      describe('deleteSubscribers', function() {
        it('should call deleteSubscribers successfully', async function() {
          // const deleteSubscribersResponse = await instance.deleteSubscribers();
          // expect(deleteSubscribersResponse.ok).to.be(true);
          // expect(deleteSubscribersResponse.body.data).to.be.an('array');
        });
      });
      describe('getSubscriberById', function() {
        it('should call getSubscriberById successfully', async function() {
          // const getSubscriberByIdResponse = await instance.getSubscriberById();
          // expect(getSubscriberByIdResponse.ok).to.be(true);
          // expect(getSubscriberByIdResponse.body.data).to.be.an('array');
        });
      });
      describe('getSubscribers', function() {
        it('should call getSubscribers successfully', async function() {
          // const getSubscribersResponse = await instance.getSubscribers();
          // expect(getSubscribersResponse.ok).to.be(true);
          // expect(getSubscribersResponse.body.data).to.be.an('array');
        });
      });
      describe('updateSubscriber', function() {
        it('should call updateSubscriber successfully', async function() {
          // const updateSubscriberResponse = await instance.updateSubscriber();
          // expect(updateSubscriberResponse.ok).to.be(true);
          // expect(updateSubscriberResponse.body.data).to.be.an('array');
        });
      });
    });
  });

}));
