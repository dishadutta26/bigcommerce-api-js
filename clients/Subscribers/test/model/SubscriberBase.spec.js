/*
 * Subscribers
 * ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Customers | modify | `store_v2_customers` | |  Customers | read-only | `store_v2_customers_read_only` |  ### Headers  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### Example  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Content-Type: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  * For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Subscribers);
  }
}(this, function(expect, Subscribers) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SubscriberBase', function() {
      beforeEach(function() {
        instance = new Subscribers.SubscriberBase();
      });

      it('should create an instance of SubscriberBase', function() {
        expect(instance).to.be.a(Subscribers.SubscriberBase);
      });

      it('should have the property email (base name: "email")', function() {
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property first_name (base name: "first_name")', function() {
        expect(instance).to.have.property('first_name');
        // expect(instance.first_name).to.be(expectedValueLiteral);
      });

      it('should have the property last_name (base name: "last_name")', function() {
        expect(instance).to.have.property('last_name');
        // expect(instance.last_name).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property order_id (base name: "order_id")', function() {
        expect(instance).to.have.property('order_id');
        // expect(instance.order_id).to.be(expectedValueLiteral);
      });

      it('should have the property channel_id (base name: "channel_id")', function() {
        expect(instance).to.have.property('channel_id');
        // expect(instance.channel_id).to.be(expectedValueLiteral);
      });

    });
  });

}));
