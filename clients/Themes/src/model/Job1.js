/**
 * Themes
 * - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  With BigCommerce's V3 REST API Theme endpoints, developers can: * backup themes * restore themes * download themes * activate themes * get status of theme jobs * read theme configurations  ## OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Themes                                       | modify     | `store_themes_manage`                         |  For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobErrors from './JobErrors';
import JobWarnings from './JobWarnings';

/**
* The Job1 model module.
* @module model/Job1
* @version 3.0
*/
export default class Job1 {
    /**
    * Constructs a new <code>Job1</code>.
    * The job for theme upload or download
    * @alias module:model/Job1
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Job1</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Job1} obj Optional instance to populate.
    * @return {module:model/Job1} The populated <code>Job1</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Job1();
                        
            
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [JobErrors]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('percent_complete')) {
                obj['percent_complete'] = ApiClient.convertToType(data['percent_complete'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], {'String': 'String'});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [JobWarnings]);
            }
        }
        return obj;
    }

    /**
    * The errors.
    * @member {Array.<module:model/JobErrors>} errors
    */
    'errors' = undefined;
    /**
    * The identifier.
    * @member {String} id
    */
    'id' = undefined;
    /**
    * The percent complete.
    * @member {Number} percent_complete
    */
    'percent_complete' = undefined;
    /**
    * The result.
    * @member {Object.<String, String>} result
    */
    'result' = undefined;
    /**
    * The status.
    * @member {module:model/Job1.StatusEnum} status
    */
    'status' = undefined;
    /**
    * The time.
    * @member {Date} time
    */
    'time' = undefined;
    /**
    * The warnings.
    * @member {Array.<module:model/JobWarnings>} warnings
    */
    'warnings' = undefined;



    /**
    * Allowed values for the <code>status</code> property.
    * @enum {String}
    * @readonly
    */
    static StatusEnum = {
        /**
         * value: "COMPLETED"
         * @const
         */
        "COMPLETED": "COMPLETED",
        /**
         * value: "QUEUED"
         * @const
         */
        "QUEUED": "QUEUED",
        /**
         * value: "WORKING"
         * @const
         */
        "WORKING": "WORKING",
        /**
         * value: "FAILED"
         * @const
         */
        "FAILED": "FAILED"    };

}
