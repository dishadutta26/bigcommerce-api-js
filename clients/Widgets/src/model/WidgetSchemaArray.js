/**
 * Widgets
 * Widgets API allows developers to programatically inject content into a BigCommerce theme. To learn how to use Widgets, see our [Widgets Overview](/api-docs/storefront/widgets/widgets-overview).
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The WidgetSchemaArray model module.
* @module model/WidgetSchemaArray
* @version 3.0
*/
export default class WidgetSchemaArray {
    /**
    * Constructs a new <code>WidgetSchemaArray</code>.
    * **Array**
    * @alias module:model/WidgetSchemaArray
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>WidgetSchemaArray</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/WidgetSchemaArray} obj Optional instance to populate.
    * @return {module:model/WidgetSchemaArray} The populated <code>WidgetSchemaArray</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WidgetSchemaArray();
                        
            
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('defaultCount')) {
                obj['defaultCount'] = ApiClient.convertToType(data['defaultCount'], 'String');
            }
            if (data.hasOwnProperty('entryLabel')) {
                obj['entryLabel'] = ApiClient.convertToType(data['entryLabel'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], [Object]);
            }
        }
        return obj;
    }

    /**
    * @member {module:model/WidgetSchemaArray.TypeEnum} type
    */
    'type' = undefined;
    /**
    * @member {String} label
    */
    'label' = undefined;
    /**
    * @member {String} id
    */
    'id' = undefined;
    /**
    * number of elements in the list to display by default.
    * @member {String} defaultCount
    */
    'defaultCount' = undefined;
    /**
    * name for each element in the list
    * @member {String} entryLabel
    */
    'entryLabel' = undefined;
    /**
    * used to display an image stored at the specified attribute name
    * @member {String} thumbnail
    */
    'thumbnail' = undefined;
    /**
    * The schema used for each element in the array.
    * @member {Array.<Object>} schema
    */
    'schema' = undefined;



    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */
    static TypeEnum = {
        /**
         * value: "array"
         * @const
         */
        "array": "array"    };

}
