/*
 * Widgets
 * Widgets API allows developers to programatically inject content into a BigCommerce theme. To learn how to use Widgets, see our [Widgets Overview](/api-docs/storefront/widgets/widgets-overview).
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Widgets);
  }
}(this, function(expect, Widgets) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('WidgetSchemaArray', function() {
      beforeEach(function() {
        instance = new Widgets.WidgetSchemaArray();
      });

      it('should create an instance of WidgetSchemaArray', function() {
        expect(instance).to.be.a(Widgets.WidgetSchemaArray);
      });

      it('should have the property type (base name: "type")', function() {
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property defaultCount (base name: "defaultCount")', function() {
        expect(instance).to.have.property('defaultCount');
        // expect(instance.defaultCount).to.be(expectedValueLiteral);
      });

      it('should have the property entryLabel (base name: "entryLabel")', function() {
        expect(instance).to.have.property('entryLabel');
        // expect(instance.entryLabel).to.be(expectedValueLiteral);
      });

      it('should have the property thumbnail (base name: "thumbnail")', function() {
        expect(instance).to.have.property('thumbnail');
        // expect(instance.thumbnail).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

    });
  });

}));
