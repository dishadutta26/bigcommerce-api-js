'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*
 * Carts
 * ### Cart Allows for a cart to be created using BigCommerce cart logic. The existing BigCommerce front end cart can be bypassed.  Notes: - A **cart** `id` is the same as a **checkout** `id`. - A cart can be created by adding an existing **catalog item** or a **custom item**. - Carts are valid for 30 days from the last modification. This can include creating the cart or editing the cart. - Redirect URLs can be generated only from carts created using the Server to Server Cart API. To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'), require('../../src/BCApiClient'), require('../config'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Carts);
  }
})(undefined, function (expect, Carts, BCApiClient, config) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new Carts.CartApi(new BCApiClient(config));
  });

  describe('(package)', function () {
    describe('CartApi', function () {
      describe('createACart', function () {
        it('should call createACart successfully', _asyncToGenerator(function* () {
          // const createACartResponse = await instance.createACart();
          // expect(createACartResponse.ok).to.be(true);
          // expect(createACartResponse.body.data).to.be.an('array');
        }));
      });
      describe('deleteACart', function () {
        it('should call deleteACart successfully', _asyncToGenerator(function* () {
          // const deleteACartResponse = await instance.deleteACart();
          // expect(deleteACartResponse.ok).to.be(true);
          // expect(deleteACartResponse.body.data).to.be.an('array');
        }));
      });
      describe('getACart', function () {
        it('should call getACart successfully', _asyncToGenerator(function* () {
          // const getACartResponse = await instance.getACart();
          // expect(getACartResponse.ok).to.be(true);
          // expect(getACartResponse.body.data).to.be.an('array');
        }));
      });
      describe('updateACart', function () {
        it('should call updateACart successfully', _asyncToGenerator(function* () {
          // const updateACartResponse = await instance.updateACart();
          // expect(updateACartResponse.ok).to.be(true);
          // expect(updateACartResponse.body.data).to.be.an('array');
        }));
      });
    });
  });
});