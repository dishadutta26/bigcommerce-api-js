'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * Orders V2
 * `/orders`endpoints integrate with point-of-sale, shipping, distribution, and inventory-management systems.  ## Order The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   //...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   //... }  ```  ## Order Coupons Coupon code applied to an order.  ## Order Messages Messages associated with an order.  ## Order Products Product line items belonging to an order.  ## Order Shipping Addresses Customer shipping address belonging to an order.  ## Order Statuses Each order status represents a state in the order-fulfillment workflow.  ## Order Taxes Each tax applied to an order. This information can be useful for reporting purposes. All values are read-only.  ## Order Shipments Tracks a package consignment from an order that is shipped from the seller to the buyer.  ## Order Shipping Addresses Quotes Read Only. Gets all shipping quotes from an order.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersV2);
  }
})(undefined, function (expect, OrdersV2) {
  'use strict';

  var instance;

  describe('(package)', function () {
    describe('OrderProduct', function () {
      beforeEach(function () {
        instance = new OrdersV2.OrderProduct();
      });

      it('should create an instance of OrderProduct', function () {
        expect(instance).to.be.a(OrdersV2.OrderProduct);
      });

      it('should have the property product_id (base name: "product_id")', function () {
        expect(instance).to.have.property('product_id');
        // expect(instance.product_id).to.be(expectedValueLiteral);
      });

      it('should have the property product_options (base name: "product_options")', function () {
        expect(instance).to.have.property('product_options');
        // expect(instance.product_options).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "quantity")', function () {
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property price_inc_tax (base name: "price_inc_tax")', function () {
        expect(instance).to.have.property('price_inc_tax');
        // expect(instance.price_inc_tax).to.be(expectedValueLiteral);
      });

      it('should have the property price_ex_tax (base name: "price_ex_tax")', function () {
        expect(instance).to.have.property('price_ex_tax');
        // expect(instance.price_ex_tax).to.be(expectedValueLiteral);
      });

      it('should have the property upc (base name: "upc")', function () {
        expect(instance).to.have.property('upc');
        // expect(instance.upc).to.be(expectedValueLiteral);
      });

      it('should have the property variant_id (base name: "variant_id")', function () {
        expect(instance).to.have.property('variant_id');
        // expect(instance.variant_id).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_name (base name: "wrapping_name")', function () {
        expect(instance).to.have.property('wrapping_name');
        // expect(instance.wrapping_name).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_message (base name: "wrapping_message")', function () {
        expect(instance).to.have.property('wrapping_message');
        // expect(instance.wrapping_message).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_cost_ex_tax (base name: "wrapping_cost_ex_tax")', function () {
        expect(instance).to.have.property('wrapping_cost_ex_tax');
        // expect(instance.wrapping_cost_ex_tax).to.be(expectedValueLiteral);
      });

      it('should have the property wrapping_cost_inc_tax (base name: "wrapping_cost_inc_tax")', function () {
        expect(instance).to.have.property('wrapping_cost_inc_tax');
        // expect(instance.wrapping_cost_inc_tax).to.be(expectedValueLiteral);
      });
    });
  });
});