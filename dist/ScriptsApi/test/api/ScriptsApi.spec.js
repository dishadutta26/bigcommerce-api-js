'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*
 * Scripts
 *  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication) - [Available Endpoints](#available-endpoints)  The BigCommerce Scripts API can be used to add a script to a store's page. Some use cases: * Insert tracking codes * Storefront single click applications * Live chat, support plugins * Theme extension or connector apps  To learn more about Scripts, see [here](/api-docs/scripts/scripts-overview).   ## OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Checkout Content<sup>1</sup>                             | modify     | `store_content_checkout`                      | | Checkout Content<sup>1</sup>                             | read-only  | `store_content_checkout_read_only`            | | Content                                       | modify     | `store_v2_content`                            | | Content                                       | read-only  | `store_v2_content_read_only`                  |  1. `Checkout Content` scopes are required to create or read scripts on the checkout page.  For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description                                                             | |-----------------------------------------|-------------------------------------------------------------------------| | Scripts                                 | Add client-side code to a store                                         |
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'), require('../../src/BCApiClient'), require('../config'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Scripts);
  }
})(undefined, function (expect, Scripts, BCApiClient, config) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new Scripts.ScriptsApi(new BCApiClient(config));
  });

  describe('(package)', function () {
    describe('ScriptsApi', function () {
      describe('createScript', function () {
        it('should call createScript successfully', _asyncToGenerator(function* () {
          // const createScriptResponse = await instance.createScript();
          // expect(createScriptResponse.ok).to.be(true);
          // expect(createScriptResponse.body.data).to.be.an('array');
        }));
      });
      describe('deleteScript', function () {
        it('should call deleteScript successfully', _asyncToGenerator(function* () {
          // const deleteScriptResponse = await instance.deleteScript();
          // expect(deleteScriptResponse.ok).to.be(true);
          // expect(deleteScriptResponse.body.data).to.be.an('array');
        }));
      });
      describe('getScript', function () {
        it('should call getScript successfully', _asyncToGenerator(function* () {
          // const getScriptResponse = await instance.getScript();
          // expect(getScriptResponse.ok).to.be(true);
          // expect(getScriptResponse.body.data).to.be.an('array');
        }));
      });
      describe('getScripts', function () {
        it('should call getScripts successfully', _asyncToGenerator(function* () {
          // const getScriptsResponse = await instance.getScripts();
          // expect(getScriptsResponse.ok).to.be(true);
          // expect(getScriptsResponse.body.data).to.be.an('array');
        }));
      });
      describe('updateScript', function () {
        it('should call updateScript successfully', _asyncToGenerator(function* () {
          // const updateScriptResponse = await instance.updateScript();
          // expect(updateScriptResponse.ok).to.be(true);
          // expect(updateScriptResponse.body.data).to.be.an('array');
        }));
      });
    });
  });
});