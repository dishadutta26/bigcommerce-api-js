'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * Store Information
 * ### Store Information Reference The Store Information object, and Get Store Information endpoint, manage store profile settings. A Store Information object represents an individual storeâ€™s profile and metadata.  ### System Reference The Get a Timestamp endpoint generates a timestamp ping to check the system status.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StoreInformation);
  }
})(undefined, function (expect, StoreInformation) {
  'use strict';

  var instance;

  describe('(package)', function () {
    describe('StoreInformation', function () {
      beforeEach(function () {
        instance = new StoreInformation.StoreInformation();
      });

      it('should create an instance of StoreInformation', function () {
        expect(instance).to.be.a(StoreInformation.StoreInformation);
      });

      it('should have the property id (base name: "id")', function () {
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property domain (base name: "domain")', function () {
        expect(instance).to.have.property('domain');
        // expect(instance.domain).to.be(expectedValueLiteral);
      });

      it('should have the property secure_URL (base name: "secure_URL")', function () {
        expect(instance).to.have.property('secure_URL');
        // expect(instance.secure_URL).to.be(expectedValueLiteral);
      });

      it('should have the property control_panel_base_url (base name: "control_panel_base_url")', function () {
        expect(instance).to.have.property('control_panel_base_url');
        // expect(instance.control_panel_base_url).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function () {
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property first_name (base name: "first_name")', function () {
        expect(instance).to.have.property('first_name');
        // expect(instance.first_name).to.be(expectedValueLiteral);
      });

      it('should have the property last_name (base name: "last_name")', function () {
        expect(instance).to.have.property('last_name');
        // expect(instance.last_name).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function () {
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function () {
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function () {
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property admin_email (base name: "admin_email")', function () {
        expect(instance).to.have.property('admin_email');
        // expect(instance.admin_email).to.be(expectedValueLiteral);
      });

      it('should have the property order_email (base name: "order_email")', function () {
        expect(instance).to.have.property('order_email');
        // expect(instance.order_email).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function () {
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function () {
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function () {
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property currency_symbol (base name: "currency_symbol")', function () {
        expect(instance).to.have.property('currency_symbol');
        // expect(instance.currency_symbol).to.be(expectedValueLiteral);
      });

      it('should have the property decimal_separator (base name: "decimal_separator")', function () {
        expect(instance).to.have.property('decimal_separator');
        // expect(instance.decimal_separator).to.be(expectedValueLiteral);
      });

      it('should have the property thousands_separator (base name: "thousands_separator")', function () {
        expect(instance).to.have.property('thousands_separator');
        // expect(instance.thousands_separator).to.be(expectedValueLiteral);
      });

      it('should have the property decimal_places (base name: "decimal_places")', function () {
        expect(instance).to.have.property('decimal_places');
        // expect(instance.decimal_places).to.be(expectedValueLiteral);
      });

      it('should have the property currency_symbol_location (base name: "currency_symbol_location")', function () {
        expect(instance).to.have.property('currency_symbol_location');
        // expect(instance.currency_symbol_location).to.be(expectedValueLiteral);
      });

      it('should have the property weight_units (base name: "weight_units")', function () {
        expect(instance).to.have.property('weight_units');
        // expect(instance.weight_units).to.be(expectedValueLiteral);
      });

      it('should have the property dimension_units (base name: "dimension_units")', function () {
        expect(instance).to.have.property('dimension_units');
        // expect(instance.dimension_units).to.be(expectedValueLiteral);
      });

      it('should have the property dimension_decimal_places (base name: "dimension_decimal_places")', function () {
        expect(instance).to.have.property('dimension_decimal_places');
        // expect(instance.dimension_decimal_places).to.be(expectedValueLiteral);
      });

      it('should have the property dimension_decimal_token (base name: "dimension_decimal_token")', function () {
        expect(instance).to.have.property('dimension_decimal_token');
        // expect(instance.dimension_decimal_token).to.be(expectedValueLiteral);
      });

      it('should have the property dimension_thousands_token: (base name: "dimension_thousands_token:")', function () {
        expect(instance).to.have.property('dimension_thousands_token:');
        // expect(instance.dimension_thousands_token:).to.be(expectedValueLiteral);
      });

      it('should have the property plan_name (base name: "plan_name")', function () {
        expect(instance).to.have.property('plan_name');
        // expect(instance.plan_name).to.be(expectedValueLiteral);
      });

      it('should have the property plan_level (base name: "plan_level")', function () {
        expect(instance).to.have.property('plan_level');
        // expect(instance.plan_level).to.be(expectedValueLiteral);
      });

      it('should have the property industry (base name: "industry")', function () {
        expect(instance).to.have.property('industry');
        // expect(instance.industry).to.be(expectedValueLiteral);
      });

      it('should have the property logo (base name: "logo")', function () {
        expect(instance).to.have.property('logo');
        // expect(instance.logo).to.be(expectedValueLiteral);
      });

      it('should have the property is_price_entered_with_tax (base name: "is_price_entered_with_tax")', function () {
        expect(instance).to.have.property('is_price_entered_with_tax');
        // expect(instance.is_price_entered_with_tax).to.be(expectedValueLiteral);
      });

      it('should have the property active_comparison_modules (base name: "active_comparison_modules")', function () {
        expect(instance).to.have.property('active_comparison_modules');
        // expect(instance.active_comparison_modules).to.be(expectedValueLiteral);
      });

      it('should have the property features (base name: "features")', function () {
        expect(instance).to.have.property('features');
        // expect(instance.features).to.be(expectedValueLiteral);
      });
    });
  });
});