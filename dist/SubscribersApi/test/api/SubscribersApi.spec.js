'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*
 * Subscribers
 * ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Customers | modify | `store_v2_customers` | |  Customers | read-only | `store_v2_customers_read_only` |  ### Headers  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### Example  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Content-Type: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  * For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'), require('../../src/BCApiClient'), require('../config'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Subscribers);
  }
})(undefined, function (expect, Subscribers, BCApiClient, config) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new Subscribers.SubscribersApi(new BCApiClient(config));
  });

  describe('(package)', function () {
    describe('SubscribersApi', function () {
      describe('createSubscriber', function () {
        it('should call createSubscriber successfully', _asyncToGenerator(function* () {
          // const createSubscriberResponse = await instance.createSubscriber();
          // expect(createSubscriberResponse.ok).to.be(true);
          // expect(createSubscriberResponse.body.data).to.be.an('array');
        }));
      });
      describe('deleteSubscriberById', function () {
        it('should call deleteSubscriberById successfully', _asyncToGenerator(function* () {
          // const deleteSubscriberByIdResponse = await instance.deleteSubscriberById();
          // expect(deleteSubscriberByIdResponse.ok).to.be(true);
          // expect(deleteSubscriberByIdResponse.body.data).to.be.an('array');
        }));
      });
      describe('deleteSubscribers', function () {
        it('should call deleteSubscribers successfully', _asyncToGenerator(function* () {
          // const deleteSubscribersResponse = await instance.deleteSubscribers();
          // expect(deleteSubscribersResponse.ok).to.be(true);
          // expect(deleteSubscribersResponse.body.data).to.be.an('array');
        }));
      });
      describe('getSubscriberById', function () {
        it('should call getSubscriberById successfully', _asyncToGenerator(function* () {
          // const getSubscriberByIdResponse = await instance.getSubscriberById();
          // expect(getSubscriberByIdResponse.ok).to.be(true);
          // expect(getSubscriberByIdResponse.body.data).to.be.an('array');
        }));
      });
      describe('getSubscribers', function () {
        it('should call getSubscribers successfully', _asyncToGenerator(function* () {
          // const getSubscribersResponse = await instance.getSubscribers();
          // expect(getSubscribersResponse.ok).to.be(true);
          // expect(getSubscribersResponse.body.data).to.be.an('array');
        }));
      });
      describe('updateSubscriber', function () {
        it('should call updateSubscriber successfully', _asyncToGenerator(function* () {
          // const updateSubscriberResponse = await instance.updateSubscriber();
          // expect(updateSubscriberResponse.ok).to.be(true);
          // expect(updateSubscriberResponse.body.data).to.be.an('array');
        }));
      });
    });
  });
});