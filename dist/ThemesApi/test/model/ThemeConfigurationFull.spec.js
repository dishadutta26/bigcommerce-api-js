'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * Themes
 * - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  With BigCommerce's V3 REST API Theme endpoints, developers can: * backup themes * restore themes * download themes * activate themes * get status of theme jobs * read theme configurations  ## OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Themes                                       | modify     | `store_themes_manage`                         |  For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.21
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Themes);
  }
})(undefined, function (expect, Themes) {
  'use strict';

  var instance;

  describe('(package)', function () {
    describe('ThemeConfigurationFull', function () {
      beforeEach(function () {
        instance = new Themes.ThemeConfigurationFull();
      });

      it('should create an instance of ThemeConfigurationFull', function () {
        expect(instance).to.be.a(Themes.ThemeConfigurationFull);
      });

      it('should have the property uuid (base name: "uuid")', function () {
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

      it('should have the property theme_uuid (base name: "theme_uuid")', function () {
        expect(instance).to.have.property('theme_uuid');
        // expect(instance.theme_uuid).to.be(expectedValueLiteral);
      });

      it('should have the property variation_id (base name: "variation_id")', function () {
        expect(instance).to.have.property('variation_id');
        // expect(instance.variation_id).to.be(expectedValueLiteral);
      });

      it('should have the property settings (base name: "settings")', function () {
        expect(instance).to.have.property('settings');
        // expect(instance.settings).to.be(expectedValueLiteral);
      });

      it('should have the property date_created (base name: "date_created")', function () {
        expect(instance).to.have.property('date_created');
        // expect(instance.date_created).to.be(expectedValueLiteral);
      });

      it('should have the property site_id (base name: "site_id")', function () {
        expect(instance).to.have.property('site_id');
        // expect(instance.site_id).to.be(expectedValueLiteral);
      });
    });
  });
});