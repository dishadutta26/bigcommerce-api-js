'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Widgets
idgets API allows developers to programatically inject content into a BigCommerce theme. To learn how to use Widgets, see our [Widgets Overview](/api-docs/storefront/widgets/widgets-overview).

penAPI spec version: 3.0


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The WidgetSchemaSettingBase model module.
* @module model/WidgetSchemaSettingBase
* @version 3.0
*/
var WidgetSchemaSettingBase = function () {
  /**
  * Constructs a new <code>WidgetSchemaSettingBase</code>.
  * For examples of each type of setting, see [Page Builder &gt; Schema Settings](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
  * @alias module:model/WidgetSchemaSettingBase
  * @class
  */

  function WidgetSchemaSettingBase() {
    _classCallCheck(this, WidgetSchemaSettingBase);

    this['type'] = undefined;
    this['label'] = undefined;
    this['id'] = undefined;
    this['default'] = undefined;
    this['typeMeta'] = undefined;
    this['conditional'] = undefined;
  }

  /**
  * Constructs a <code>WidgetSchemaSettingBase</code> from a plain JavaScript object, optionally creating a new instance.
  * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
  * @param {Object} data The plain JavaScript object bearing properties of interest.
  * @param {module:model/WidgetSchemaSettingBase} obj Optional instance to populate.
  * @return {module:model/WidgetSchemaSettingBase} The populated <code>WidgetSchemaSettingBase</code> instance.
  */


  _createClass(WidgetSchemaSettingBase, null, [{
    key: 'constructFromObject',
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new WidgetSchemaSettingBase();

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('label')) {
          obj['label'] = _ApiClient2.default.convertToType(data['label'], 'String');
        }
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('default')) {
          obj['default'] = _ApiClient2.default.convertToType(data['default'], 'String');
        }
        if (data.hasOwnProperty('typeMeta')) {
          obj['typeMeta'] = _ApiClient2.default.convertToType(data['typeMeta'], 'String');
        }
        if (data.hasOwnProperty('conditional')) {
          obj['conditional'] = _ApiClient2.default.convertToType(data['conditional'], 'String');
        }
      }
      return obj;
    }

    /**
    * The type of setting component to display. You can view the list of elements below to discover which are available to use.  For examples of each type of setting, see [Page Builder > Schema Settings](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
    * @member {module:model/WidgetSchemaSettingBase.TypeEnum} type
    */

    /**
    * The user friendly message to inform the user how this setting will be used.
    * @member {String} label
    */

    /**
    * The variable name where the setting value will be available in the widget template.
    * @member {String} id
    */

    /**
    * The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use.
    * @member {String} default
    */

    /**
    * Additional information needed based on the selected setting type.
    * @member {String} typeMeta
    */

    /**
    *  Can be added on each setting to control whether it should be displayed to the user while editing in store design. This does not clear the value in the setting, just controls the display of the setting. Take a look at the regexInput for an example on using conditional. 
    * @member {String} conditional
    */


    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */

  }]);

  return WidgetSchemaSettingBase;
}();

WidgetSchemaSettingBase.TypeEnum = {
  /**
   * value: "alignment"
   * @const
   */
  "alignment": "alignment",
  /**
   * value: "boolean"
   * @const
   */
  "boolean": "boolean",
  /**
   * value: "boxModel"
   * @const
   */
  "boxModel": "boxModel",
  /**
   * value: "code"
   * @const
   */
  "code": "code",
  /**
   * value: "color"
   * @const
   */
  "color": "color",
  /**
   * value: "imageManager"
   * @const
   */
  "imageManager": "imageManager",
  /**
   * value: "input"
   * @const
   */
  "input": "input",
  /**
   * value: "number"
   * @const
   */
  "number": "number",
  /**
   * value: "productId"
   * @const
   */
  "productId": "productId",
  /**
   * value: "productImage"
   * @const
   */
  "productImage": "productImage",
  /**
   * value: "range"
   * @const
   */
  "range": "range",
  /**
   * value: "regexInput"
   * @const
   */
  "regexInput": "regexInput",
  /**
   * value: "select"
   * @const
   */
  "select": "select",
  /**
   * value: "text"
   * @const
   */
  "text": "text",
  /**
   * value: "toggle"
   * @const
   */
  "toggle": "toggle" };
exports.default = WidgetSchemaSettingBase;