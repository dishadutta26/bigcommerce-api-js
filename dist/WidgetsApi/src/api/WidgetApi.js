'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Widgets
idgets API allows developers to programatically inject content into a BigCommerce theme. To learn how to use Widgets, see our [Widgets Overview](/api-docs/storefront/widgets/widgets-overview).

penAPI spec version: 3.0


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ErrorBase = require('../model/ErrorBase1');

var _ErrorBase2 = _interopRequireDefault(_ErrorBase);

var _InlineResponse = require('../model/InlineResponse2001');

var _InlineResponse2 = _interopRequireDefault(_InlineResponse);

var _InlineResponse3 = require('../model/InlineResponse2002');

var _InlineResponse4 = _interopRequireDefault(_InlineResponse3);

var _WidgetPost = require('../model/WidgetPost1');

var _WidgetPost2 = _interopRequireDefault(_WidgetPost);

var _WidgetPut = require('../model/WidgetPut1');

var _WidgetPut2 = _interopRequireDefault(_WidgetPut);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Widget service.
* @module api/WidgetApi
* @version 3.0
*/
var WidgetApi = function () {

  /**
  * Constructs a new WidgetApi. 
  * @alias module:api/WidgetApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function WidgetApi(apiClient) {
    _classCallCheck(this, WidgetApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Callback function to receive the result of the createWidget operation.
   * @callback module:api/WidgetApi~createWidgetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2002} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a Widget
   * Creates a **Widget**.  ***Note:*** *There is a limit of 1000 widgets per store.*  **Required Fields** * name * widget_template_uuid
   * @param {Object} opts Optional parameters
   * @param {module:api/WidgetApi~createWidgetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/InlineResponse2002}
   */


  _createClass(WidgetApi, [{
    key: 'createWidget',
    value: function createWidget(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      var formParams = {};

      var authNames = ['X-Auth-Client', 'X-Auth-Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _InlineResponse4.default;

      return this.apiClient.callApi('/content/widgets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }
    /**
     * Callback function to receive the result of the deleteWidget operation.
     * @callback module:api/WidgetApi~deleteWidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Widget
     * Deletes a **Widget**.
     * @param {Object} opts Optional parameters
     * @param {module:api/WidgetApi~deleteWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'deleteWidget',
    value: function deleteWidget(uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {};
      var headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      var formParams = {};

      var authNames = ['X-Auth-Client', 'X-Auth-Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi('/content/widgets/{uuid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }
    /**
     * Callback function to receive the result of the getWidget operation.
     * @callback module:api/WidgetApi~getWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Widget
     * Returns a single **Widget**.
     * @param {Object} opts Optional parameters
     * @param {module:api/WidgetApi~getWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */

  }, {
    key: 'getWidget',
    value: function getWidget(uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {};
      var headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      var formParams = {};

      var authNames = ['X-Auth-Client', 'X-Auth-Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse4.default;

      return this.apiClient.callApi('/content/widgets/{uuid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }
    /**
     * Callback function to receive the result of the getWidgets operation.
     * @callback module:api/WidgetApi~getWidgetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Widgets
     * Returns a list of **Widgets**. Optional parameters can be passed in.
     * @param {Object} opts Optional parameters
     * @param {module:api/WidgetApi~getWidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */

  }, {
    key: 'getWidgets',
    value: function getWidgets(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'widget_template_kind': opts['widgetTemplateKind'],
        'widget_template_uuid': opts['widgetTemplateUuid'],
        'name': opts['name']
      };
      var headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      var formParams = {};

      var authNames = ['X-Auth-Client', 'X-Auth-Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse2.default;

      return this.apiClient.callApi('/content/widgets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }
    /**
     * Callback function to receive the result of the updateWidget operation.
     * @callback module:api/WidgetApi~updateWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Widget
     * Updates a **Widget**.
     * @param {Object} opts Optional parameters
     * @param {module:api/WidgetApi~updateWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */

  }, {
    key: 'updateWidget',
    value: function updateWidget(body, uuid, opts, callback) {
      opts = opts || {};
      var postBody = body;

      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {};
      var headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      var formParams = {};

      var authNames = ['X-Auth-Client', 'X-Auth-Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _InlineResponse4.default;

      return this.apiClient.callApi('/content/widgets/{uuid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }
  }]);

  return WidgetApi;
}();

exports.default = WidgetApi;