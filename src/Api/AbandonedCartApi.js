/**
 * Data Model for BigCommerce's v3 Server-to-Server Abandoned  Cart API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/AbandonedCartResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/AbandonedCartResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.DataModelForBigCommercesV3ServerToServerAbandonedCartApi) {
      root.DataModelForBigCommercesV3ServerToServerAbandonedCartApi = {};
    }
    root.DataModelForBigCommercesV3ServerToServerAbandonedCartApi.AbandonedCartApi = factory(root.DataModelForBigCommercesV3ServerToServerAbandonedCartApi.ApiClient, root.DataModelForBigCommercesV3ServerToServerAbandonedCartApi.AbandonedCartResponse);
  }
}(this, function(ApiClient, AbandonedCartResponse) {
  'use strict';

  /**
   * AbandonedCart service.
   * @module Api/AbandonedCartApi
   * @version v0.0.1
   */

  /**
   * Constructs a new AbandonedCartApi. 
   * @alias module:Api/AbandonedCartApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Returns abandoned cart id.
     * @param {String} token Unique token.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/AbandonedCartResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/AbandonedCartResponse} if callback is null
     */
    this.recoverCart = function(token, opts, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling recoverCart");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AbandonedCartResponse;

      return this.apiClient.callApi(
        '/abandoned-carts/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
