/**
 * Data Model for BigCommerce's v3 Server-to-Server Cart API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Cart', 'Model/CartCreateRequestData', 'Model/CartRedirectUrlsResponse', 'Model/CartRequestData', 'Model/CartResponse', 'Model/CartUpdateRequest', 'Model/CartUpdateRequestData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/Cart'), require('../Model/CartCreateRequestData'), require('../Model/CartRedirectUrlsResponse'), require('../Model/CartRequestData'), require('../Model/CartResponse'), require('../Model/CartUpdateRequest'), require('../Model/CartUpdateRequestData'));
  } else {
    // Browser globals (root is window)
    if (!root.DataModelForBigCommercesV3ServerToServerCartApi) {
      root.DataModelForBigCommercesV3ServerToServerCartApi = {};
    }
    root.DataModelForBigCommercesV3ServerToServerCartApi.CartApi = factory(root.DataModelForBigCommercesV3ServerToServerCartApi.ApiClient, root.DataModelForBigCommercesV3ServerToServerCartApi.Cart, root.DataModelForBigCommercesV3ServerToServerCartApi.CartCreateRequestData, root.DataModelForBigCommercesV3ServerToServerCartApi.CartRedirectUrlsResponse, root.DataModelForBigCommercesV3ServerToServerCartApi.CartRequestData, root.DataModelForBigCommercesV3ServerToServerCartApi.CartResponse, root.DataModelForBigCommercesV3ServerToServerCartApi.CartUpdateRequest, root.DataModelForBigCommercesV3ServerToServerCartApi.CartUpdateRequestData);
  }
}(this, function(ApiClient, Cart, CartCreateRequestData, CartRedirectUrlsResponse, CartRequestData, CartResponse, CartUpdateRequest, CartUpdateRequestData) {
  'use strict';

  /**
   * Cart service.
   * @module Api/CartApi
   * @version v0.0.1
   */

  /**
   * Constructs a new CartApi. 
   * @alias module:Api/CartApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addItem operation.
     * @callback module:Api/CartApi~addItemCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds line item(s) to the cart.
     * @param {String} cartId 
     * @param {module:Model/CartRequestData} itemData 
     * @param {module:Api/CartApi~addItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CartResponse}
     */
    this.addItem = function(cartId, itemData, callback) {
      var postBody = itemData;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling addItem");
      }

      // verify the required parameter 'itemData' is set
      if (itemData == undefined || itemData == null) {
        throw new Error("Missing the required parameter 'itemData' when calling addItem");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartResponse;

      return this.apiClient.callApi(
        '/carts/{cartId}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCart operation.
     * @callback module:Api/CartApi~createCartCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a cart and generates a cart ID.
     * @param {module:Model/CartCreateRequestData} cartData 
     * @param {module:Api/CartApi~createCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CartResponse}
     */
    this.createCart = function(cartData, callback) {
      var postBody = cartData;

      // verify the required parameter 'cartData' is set
      if (cartData == undefined || cartData == null) {
        throw new Error("Missing the required parameter 'cartData' when calling createCart");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartResponse;

      return this.apiClient.callApi(
        '/carts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCart operation.
     * @callback module:Api/CartApi~deleteCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the entire cart.
     * @param {String} cartId This cart&#39;s unique ID.
     * @param {module:Api/CartApi~deleteCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCart = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling deleteCart");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItem operation.
     * @callback module:Api/CartApi~deleteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a line item from the cart.
     * @param {String} cartId 
     * @param {Number} itemId 
     * @param {module:Api/CartApi~deleteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CartResponse}
     */
    this.deleteItem = function(cartId, itemId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling deleteItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteItem");
      }


      var pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartResponse;

      return this.apiClient.callApi(
        '/carts/{cartId}/items/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCart operation.
     * @callback module:Api/CartApi~getCartCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a given &#x60;Cart&#x60;, specified by its ID.
     * @param {String} cartId The identifier of a specific cart.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Supports Physical and Digital product options as include param
     * @param {module:Api/CartApi~getCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CartResponse}
     */
    this.getCart = function(cartId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling getCart");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartResponse;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRedirectUrls operation.
     * @callback module:Api/CartApi~setRedirectUrlsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CartRedirectUrlsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a set of URLs to redirect the shopper to the BigCommerce store.
     * @param {String} cartId 
     * @param {module:Api/CartApi~setRedirectUrlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CartRedirectUrlsResponse}
     */
    this.setRedirectUrls = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling setRedirectUrls");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartRedirectUrlsResponse;

      return this.apiClient.callApi(
        '/carts/{cartId}/redirect_urls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCart operation.
     * @callback module:Api/CartApi~updateCartCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a cart.
     * @param {String} cartId 
     * @param {module:Model/CartUpdateRequestData} cartUpdateData 
     * @param {module:Api/CartApi~updateCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/Cart}
     */
    this.updateCart = function(cartId, cartUpdateData, callback) {
      var postBody = cartUpdateData;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling updateCart");
      }

      // verify the required parameter 'cartUpdateData' is set
      if (cartUpdateData == undefined || cartUpdateData == null) {
        throw new Error("Missing the required parameter 'cartUpdateData' when calling updateCart");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:Api/CartApi~updateItemCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing, single line item in the cart.
     * @param {String} cartId 
     * @param {Number} itemId 
     * @param {module:Model/CartUpdateRequest} lineItem 
     * @param {module:Api/CartApi~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CartResponse}
     */
    this.updateItem = function(cartId, itemId, lineItem, callback) {
      var postBody = lineItem;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling updateItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateItem");
      }

      // verify the required parameter 'lineItem' is set
      if (lineItem == undefined || lineItem == null) {
        throw new Error("Missing the required parameter 'lineItem' when calling updateItem");
      }


      var pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartResponse;

      return this.apiClient.callApi(
        '/carts/{cartId}/items/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
