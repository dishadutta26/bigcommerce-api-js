/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/BrandCollectionResponse', 'Model/BrandPost', 'Model/BrandPut', 'Model/BrandResponse', 'Model/BulkPricingRuleCollectionResponse', 'Model/BulkPricingRulePost', 'Model/BulkPricingRulePut', 'Model/BulkPricingRuleResponse', 'Model/CatalogSummaryResponse', 'Model/CategoryCollectionResponse', 'Model/CategoryPost', 'Model/CategoryPut', 'Model/CategoryResponse', 'Model/CategoryTreeCollectionResponse', 'Model/ComplexRuleCollectionResponse', 'Model/ComplexRulePost', 'Model/ComplexRulePut', 'Model/ComplexRuleResponse', 'Model/ConfigurableFieldCollectionResponse', 'Model/ConfigurableFieldPost', 'Model/ConfigurableFieldPut', 'Model/ConfigurableFieldResponse', 'Model/CustomFieldCollectionResponse', 'Model/CustomFieldPost', 'Model/CustomFieldPut', 'Model/CustomFieldResponse', 'Model/ErrorResponse', 'Model/ImageResponse', 'Model/MetaFieldCollectionResponse', 'Model/MetafieldPost', 'Model/MetafieldPut', 'Model/MetafieldResponse', 'Model/ModifierCollectionResponse', 'Model/ModifierPost', 'Model/ModifierPut', 'Model/ModifierResponse', 'Model/ModifierValueCollectionResponse', 'Model/ModifierValuePost', 'Model/ModifierValuePut', 'Model/ModifierValueResponse', 'Model/NotFound', 'Model/OptionCollectionResponse', 'Model/OptionPost', 'Model/OptionPut', 'Model/OptionResponse', 'Model/OptionValueCollectionResponse', 'Model/OptionValuePost', 'Model/OptionValuePut', 'Model/OptionValueResponse', 'Model/ProductCollectionResponse', 'Model/ProductImageCollectionResponse', 'Model/ProductImagePost', 'Model/ProductImagePut', 'Model/ProductImageResponse', 'Model/ProductPost', 'Model/ProductPut', 'Model/ProductResponse', 'Model/ProductReviewCollectionResponse', 'Model/ProductReviewPost', 'Model/ProductReviewPut', 'Model/ProductReviewResponse', 'Model/ProductVideoCollectionResponse', 'Model/ProductVideoPost', 'Model/ProductVideoPut', 'Model/ProductVideoResponse', 'Model/VariantCollectionResponse', 'Model/VariantPost', 'Model/VariantPut', 'Model/VariantResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/BrandCollectionResponse'), require('../Model/BrandPost'), require('../Model/BrandPut'), require('../Model/BrandResponse'), require('../Model/BulkPricingRuleCollectionResponse'), require('../Model/BulkPricingRulePost'), require('../Model/BulkPricingRulePut'), require('../Model/BulkPricingRuleResponse'), require('../Model/CatalogSummaryResponse'), require('../Model/CategoryCollectionResponse'), require('../Model/CategoryPost'), require('../Model/CategoryPut'), require('../Model/CategoryResponse'), require('../Model/CategoryTreeCollectionResponse'), require('../Model/ComplexRuleCollectionResponse'), require('../Model/ComplexRulePost'), require('../Model/ComplexRulePut'), require('../Model/ComplexRuleResponse'), require('../Model/ConfigurableFieldCollectionResponse'), require('../Model/ConfigurableFieldPost'), require('../Model/ConfigurableFieldPut'), require('../Model/ConfigurableFieldResponse'), require('../Model/CustomFieldCollectionResponse'), require('../Model/CustomFieldPost'), require('../Model/CustomFieldPut'), require('../Model/CustomFieldResponse'), require('../Model/ErrorResponse'), require('../Model/ImageResponse'), require('../Model/MetaFieldCollectionResponse'), require('../Model/MetafieldPost'), require('../Model/MetafieldPut'), require('../Model/MetafieldResponse'), require('../Model/ModifierCollectionResponse'), require('../Model/ModifierPost'), require('../Model/ModifierPut'), require('../Model/ModifierResponse'), require('../Model/ModifierValueCollectionResponse'), require('../Model/ModifierValuePost'), require('../Model/ModifierValuePut'), require('../Model/ModifierValueResponse'), require('../Model/NotFound'), require('../Model/OptionCollectionResponse'), require('../Model/OptionPost'), require('../Model/OptionPut'), require('../Model/OptionResponse'), require('../Model/OptionValueCollectionResponse'), require('../Model/OptionValuePost'), require('../Model/OptionValuePut'), require('../Model/OptionValueResponse'), require('../Model/ProductCollectionResponse'), require('../Model/ProductImageCollectionResponse'), require('../Model/ProductImagePost'), require('../Model/ProductImagePut'), require('../Model/ProductImageResponse'), require('../Model/ProductPost'), require('../Model/ProductPut'), require('../Model/ProductResponse'), require('../Model/ProductReviewCollectionResponse'), require('../Model/ProductReviewPost'), require('../Model/ProductReviewPut'), require('../Model/ProductReviewResponse'), require('../Model/ProductVideoCollectionResponse'), require('../Model/ProductVideoPost'), require('../Model/ProductVideoPut'), require('../Model/ProductVideoResponse'), require('../Model/VariantCollectionResponse'), require('../Model/VariantPost'), require('../Model/VariantPut'), require('../Model/VariantResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.CatalogApi = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.BrandCollectionResponse, root.BigCommerceApi.BrandPost, root.BigCommerceApi.BrandPut, root.BigCommerceApi.BrandResponse, root.BigCommerceApi.BulkPricingRuleCollectionResponse, root.BigCommerceApi.BulkPricingRulePost, root.BigCommerceApi.BulkPricingRulePut, root.BigCommerceApi.BulkPricingRuleResponse, root.BigCommerceApi.CatalogSummaryResponse, root.BigCommerceApi.CategoryCollectionResponse, root.BigCommerceApi.CategoryPost, root.BigCommerceApi.CategoryPut, root.BigCommerceApi.CategoryResponse, root.BigCommerceApi.CategoryTreeCollectionResponse, root.BigCommerceApi.ComplexRuleCollectionResponse, root.BigCommerceApi.ComplexRulePost, root.BigCommerceApi.ComplexRulePut, root.BigCommerceApi.ComplexRuleResponse, root.BigCommerceApi.ConfigurableFieldCollectionResponse, root.BigCommerceApi.ConfigurableFieldPost, root.BigCommerceApi.ConfigurableFieldPut, root.BigCommerceApi.ConfigurableFieldResponse, root.BigCommerceApi.CustomFieldCollectionResponse, root.BigCommerceApi.CustomFieldPost, root.BigCommerceApi.CustomFieldPut, root.BigCommerceApi.CustomFieldResponse, root.BigCommerceApi.ErrorResponse, root.BigCommerceApi.ImageResponse, root.BigCommerceApi.MetaFieldCollectionResponse, root.BigCommerceApi.MetafieldPost, root.BigCommerceApi.MetafieldPut, root.BigCommerceApi.MetafieldResponse, root.BigCommerceApi.ModifierCollectionResponse, root.BigCommerceApi.ModifierPost, root.BigCommerceApi.ModifierPut, root.BigCommerceApi.ModifierResponse, root.BigCommerceApi.ModifierValueCollectionResponse, root.BigCommerceApi.ModifierValuePost, root.BigCommerceApi.ModifierValuePut, root.BigCommerceApi.ModifierValueResponse, root.BigCommerceApi.NotFound, root.BigCommerceApi.OptionCollectionResponse, root.BigCommerceApi.OptionPost, root.BigCommerceApi.OptionPut, root.BigCommerceApi.OptionResponse, root.BigCommerceApi.OptionValueCollectionResponse, root.BigCommerceApi.OptionValuePost, root.BigCommerceApi.OptionValuePut, root.BigCommerceApi.OptionValueResponse, root.BigCommerceApi.ProductCollectionResponse, root.BigCommerceApi.ProductImageCollectionResponse, root.BigCommerceApi.ProductImagePost, root.BigCommerceApi.ProductImagePut, root.BigCommerceApi.ProductImageResponse, root.BigCommerceApi.ProductPost, root.BigCommerceApi.ProductPut, root.BigCommerceApi.ProductResponse, root.BigCommerceApi.ProductReviewCollectionResponse, root.BigCommerceApi.ProductReviewPost, root.BigCommerceApi.ProductReviewPut, root.BigCommerceApi.ProductReviewResponse, root.BigCommerceApi.ProductVideoCollectionResponse, root.BigCommerceApi.ProductVideoPost, root.BigCommerceApi.ProductVideoPut, root.BigCommerceApi.ProductVideoResponse, root.BigCommerceApi.VariantCollectionResponse, root.BigCommerceApi.VariantPost, root.BigCommerceApi.VariantPut, root.BigCommerceApi.VariantResponse);
  }
}(this, function(ApiClient, BrandCollectionResponse, BrandPost, BrandPut, BrandResponse, BulkPricingRuleCollectionResponse, BulkPricingRulePost, BulkPricingRulePut, BulkPricingRuleResponse, CatalogSummaryResponse, CategoryCollectionResponse, CategoryPost, CategoryPut, CategoryResponse, CategoryTreeCollectionResponse, ComplexRuleCollectionResponse, ComplexRulePost, ComplexRulePut, ComplexRuleResponse, ConfigurableFieldCollectionResponse, ConfigurableFieldPost, ConfigurableFieldPut, ConfigurableFieldResponse, CustomFieldCollectionResponse, CustomFieldPost, CustomFieldPut, CustomFieldResponse, ErrorResponse, ImageResponse, MetaFieldCollectionResponse, MetafieldPost, MetafieldPut, MetafieldResponse, ModifierCollectionResponse, ModifierPost, ModifierPut, ModifierResponse, ModifierValueCollectionResponse, ModifierValuePost, ModifierValuePut, ModifierValueResponse, NotFound, OptionCollectionResponse, OptionPost, OptionPut, OptionResponse, OptionValueCollectionResponse, OptionValuePost, OptionValuePut, OptionValueResponse, ProductCollectionResponse, ProductImageCollectionResponse, ProductImagePost, ProductImagePut, ProductImageResponse, ProductPost, ProductPut, ProductResponse, ProductReviewCollectionResponse, ProductReviewPost, ProductReviewPut, ProductReviewResponse, ProductVideoCollectionResponse, ProductVideoPost, ProductVideoPut, ProductVideoResponse, VariantCollectionResponse, VariantPost, VariantPut, VariantResponse) {
  'use strict';

  /**
   * Catalog service.
   * @module Api/CatalogApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new CatalogApi. 
   * @alias module:Api/CatalogApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the catalogSummaryGet operation.
     * @callback module:Api/CatalogApi~catalogSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CatalogSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a lightweight inventory summary from the BigCommerce Catalog. 
     * @param {module:Api/CatalogApi~catalogSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CatalogSummaryResponse}
     */
    this.catalogSummaryGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CatalogSummaryResponse;

      return this.apiClient.callApi(
        '/catalog/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBrand operation.
     * @callback module:Api/CatalogApi~createBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BrandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;Brand&#x60; object.
     * @param {module:Model/BrandPost} brand A &#x60;Brand&#x60; object. 
     * @param {module:Api/CatalogApi~createBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandResponse}
     */
    this.createBrand = function(brand, callback) {
      var postBody = brand;

      // verify the required parameter 'brand' is set
      if (brand == undefined || brand == null) {
        throw new Error("Missing the required parameter 'brand' when calling createBrand");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandResponse;

      return this.apiClient.callApi(
        '/catalog/brands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBrandImage operation.
     * @callback module:Api/CatalogApi~createBrandImageCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an image on a &#x60;Brand&#x60;. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param {module:Api/CatalogApi~createBrandImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     */
    this.createBrandImage = function(brandId, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling createBrandImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createBrandImage");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBrandMetafield operation.
     * @callback module:Api/CatalogApi~createBrandMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a product &#x60;Metafield&#x60;.
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {module:Model/MetafieldPost} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~createBrandMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.createBrandMetafield = function(brandId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling createBrandMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createBrandMetafield");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBulkPricingRule operation.
     * @callback module:Api/CatalogApi~createBulkPricingRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BulkPricingRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;BulkPricingRule&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/BulkPricingRulePost} bulkPricingRule &#x60;BulkPricingRule&#x60; object. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {module:Api/CatalogApi~createBulkPricingRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleResponse}
     */
    this.createBulkPricingRule = function(productId, bulkPricingRule, opts, callback) {
      opts = opts || {};
      var postBody = bulkPricingRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createBulkPricingRule");
      }

      // verify the required parameter 'bulkPricingRule' is set
      if (bulkPricingRule == undefined || bulkPricingRule == null) {
        throw new Error("Missing the required parameter 'bulkPricingRule' when calling createBulkPricingRule");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCategory operation.
     * @callback module:Api/CatalogApi~createCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;Category&#x60; in the BigCommerce Catalog. 
     * @param {module:Model/CategoryPost} category A BigCommerce &#x60;Category&#x60; object. 
     * @param {module:Api/CatalogApi~createCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryResponse}
     */
    this.createCategory = function(category, callback) {
      var postBody = category;

      // verify the required parameter 'category' is set
      if (category == undefined || category == null) {
        throw new Error("Missing the required parameter 'category' when calling createCategory");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryResponse;

      return this.apiClient.callApi(
        '/catalog/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCategoryImage operation.
     * @callback module:Api/CatalogApi~createCategoryImageCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an image on a category. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param {module:Api/CatalogApi~createCategoryImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     */
    this.createCategoryImage = function(categoryId, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling createCategoryImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createCategoryImage");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCategoryMetafield operation.
     * @callback module:Api/CatalogApi~createCategoryMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a product &#x60;Metafield&#x60;.
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {module:Model/MetafieldPost} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~createCategoryMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.createCategoryMetafield = function(categoryId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling createCategoryMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createCategoryMetafield");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createComplexRule operation.
     * @callback module:Api/CatalogApi~createComplexRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ComplexRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;ComplexRule&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/ComplexRulePost} complexRule &#x60;ComplexRule&#x60; object. 
     * @param {module:Api/CatalogApi~createComplexRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleResponse}
     */
    this.createComplexRule = function(productId, complexRule, callback) {
      var postBody = complexRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createComplexRule");
      }

      // verify the required parameter 'complexRule' is set
      if (complexRule == undefined || complexRule == null) {
        throw new Error("Missing the required parameter 'complexRule' when calling createComplexRule");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfigurableField operation.
     * @callback module:Api/CatalogApi~createConfigurableFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ConfigurableFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;ConfigurableField&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/ConfigurableFieldPost} configurableField &#x60;ConfigurableField&#x60; object. 
     * @param {module:Api/CatalogApi~createConfigurableFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldResponse}
     */
    this.createConfigurableField = function(productId, configurableField, callback) {
      var postBody = configurableField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createConfigurableField");
      }

      // verify the required parameter 'configurableField' is set
      if (configurableField == undefined || configurableField == null) {
        throw new Error("Missing the required parameter 'configurableField' when calling createConfigurableField");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomField operation.
     * @callback module:Api/CatalogApi~createCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CustomFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;CustomField&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/CustomFieldPost} customField &#x60;CustomField&#x60; object. 
     * @param {module:Api/CatalogApi~createCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldResponse}
     */
    this.createCustomField = function(productId, customField, callback) {
      var postBody = customField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createCustomField");
      }

      // verify the required parameter 'customField' is set
      if (customField == undefined || customField == null) {
        throw new Error("Missing the required parameter 'customField' when calling createCustomField");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifier operation.
     * @callback module:Api/CatalogApi~createModifierCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;Modifier&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/ModifierPost} modifier A &#x60;Modifier&#x60; object. 
     * @param {module:Api/CatalogApi~createModifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierResponse}
     */
    this.createModifier = function(productId, modifier, callback) {
      var postBody = modifier;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createModifier");
      }

      // verify the required parameter 'modifier' is set
      if (modifier == undefined || modifier == null) {
        throw new Error("Missing the required parameter 'modifier' when calling createModifier");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifierImage operation.
     * @callback module:Api/CatalogApi~createModifierImageCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an image to a modifier value; the image will show on the storefront when the value is selected.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier&#x60;. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param {module:Api/CatalogApi~createModifierImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     */
    this.createModifierImage = function(productId, modifierId, valueId, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createModifierImage");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling createModifierImage");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling createModifierImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createModifierImage");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifierValue operation.
     * @callback module:Api/CatalogApi~createModifierValueCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;ModifierValue&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {module:Model/ModifierValuePost} modifierValue A &#x60;ModifierValue&#x60; object. 
     * @param {module:Api/CatalogApi~createModifierValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueResponse}
     */
    this.createModifierValue = function(productId, modifierId, modifierValue, callback) {
      var postBody = modifierValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createModifierValue");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling createModifierValue");
      }

      // verify the required parameter 'modifierValue' is set
      if (modifierValue == undefined || modifierValue == null) {
        throw new Error("Missing the required parameter 'modifierValue' when calling createModifierValue");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOption operation.
     * @callback module:Api/CatalogApi~createOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an &#x60;Option&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/OptionPost} option An &#x60;Option&#x60; object. 
     * @param {module:Api/CatalogApi~createOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionResponse}
     */
    this.createOption = function(productId, option, callback) {
      var postBody = option;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createOption");
      }

      // verify the required parameter 'option' is set
      if (option == undefined || option == null) {
        throw new Error("Missing the required parameter 'option' when calling createOption");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOptionValue operation.
     * @callback module:Api/CatalogApi~createOptionValueCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;OptionValue&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {module:Model/OptionValuePost} optionValue A &#x60;OptionValue&#x60; object. 
     * @param {module:Api/CatalogApi~createOptionValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueResponse}
     */
    this.createOptionValue = function(productId, optionId, optionValue, callback) {
      var postBody = optionValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createOptionValue");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling createOptionValue");
      }

      // verify the required parameter 'optionValue' is set
      if (optionValue == undefined || optionValue == null) {
        throw new Error("Missing the required parameter 'optionValue' when calling createOptionValue");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:Api/CatalogApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;Product&#x60; in the BigCommerce Catalog. 
     * @param {module:Model/ProductPost} product A BigCommerce &#x60;Product&#x60; object. 
     * @param {module:Api/CatalogApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductResponse}
     */
    this.createProduct = function(product, callback) {
      var postBody = product;

      // verify the required parameter 'product' is set
      if (product == undefined || product == null) {
        throw new Error("Missing the required parameter 'product' when calling createProduct");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductResponse;

      return this.apiClient.callApi(
        '/catalog/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductImage operation.
     * @callback module:Api/CatalogApi~createProductImageCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an image on a product. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/ProductImagePost} productImage A BigCommerce &#x60;ProductImage&#x60; object. 
     * @param {module:Api/CatalogApi~createProductImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageResponse}
     */
    this.createProductImage = function(productId, productImage, callback) {
      var postBody = productImage;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductImage");
      }

      // verify the required parameter 'productImage' is set
      if (productImage == undefined || productImage == null) {
        throw new Error("Missing the required parameter 'productImage' when calling createProductImage");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductMetafield operation.
     * @callback module:Api/CatalogApi~createProductMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a product &#x60;Metafield&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/MetafieldPost} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~createProductMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.createProductMetafield = function(productId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createProductMetafield");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductReview operation.
     * @callback module:Api/CatalogApi~createProductReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductReviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a product review. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/ProductReviewPost} productReview A BigCommerce &#x60;ProductReview&#x60; object. 
     * @param {module:Api/CatalogApi~createProductReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewResponse}
     */
    this.createProductReview = function(productId, productReview, callback) {
      var postBody = productReview;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductReview");
      }

      // verify the required parameter 'productReview' is set
      if (productReview == undefined || productReview == null) {
        throw new Error("Missing the required parameter 'productReview' when calling createProductReview");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductVideo operation.
     * @callback module:Api/CatalogApi~createProductVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductVideoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a video on a product, using a video ID from a host site. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/ProductVideoPost} productVideo A BigCommerce &#x60;ProductVideo&#x60; object. 
     * @param {module:Api/CatalogApi~createProductVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoResponse}
     */
    this.createProductVideo = function(productId, productVideo, callback) {
      var postBody = productVideo;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductVideo");
      }

      // verify the required parameter 'productVideo' is set
      if (productVideo == undefined || productVideo == null) {
        throw new Error("Missing the required parameter 'productVideo' when calling createProductVideo");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariant operation.
     * @callback module:Api/CatalogApi~createVariantCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/VariantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;Variant&#x60; object.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/VariantPost} variant &#x60;Variant&#x60; object. 
     * @param {module:Api/CatalogApi~createVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantResponse}
     */
    this.createVariant = function(productId, variant, callback) {
      var postBody = variant;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariant");
      }

      // verify the required parameter 'variant' is set
      if (variant == undefined || variant == null) {
        throw new Error("Missing the required parameter 'variant' when calling createVariant");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariantImage operation.
     * @callback module:Api/CatalogApi~createVariantImageCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param {module:Api/CatalogApi~createVariantImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     */
    this.createVariantImage = function(productId, variantId, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariantImage");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling createVariantImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createVariantImage");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariantMetafield operation.
     * @callback module:Api/CatalogApi~createVariantMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a variant &#x60;Metafield&#x60;.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Model/MetafieldPost} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~createVariantMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.createVariantMetafield = function(productId, variantId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariantMetafield");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling createVariantMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createVariantMetafield");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBrandById operation.
     * @callback module:Api/CatalogApi~deleteBrandByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Brand&#x60; from the BigCommerce Catalog. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteBrandByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBrandById = function(brandId, callback) {
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling deleteBrandById");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBrandImage operation.
     * @callback module:Api/CatalogApi~deleteBrandImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Brand&#x60; image from the BigCommerce Catalog. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteBrandImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBrandImage = function(brandId, callback) {
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling deleteBrandImage");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBrandMetafieldById operation.
     * @callback module:Api/CatalogApi~deleteBrandMetafieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Metafield&#x60;. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteBrandMetafieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBrandMetafieldById = function(metafieldId, brandId, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteBrandMetafieldById");
      }

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling deleteBrandMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBrands operation.
     * @callback module:Api/CatalogApi~deleteBrandsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more &#x60;Brand&#x60; objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param {module:Api/CatalogApi~deleteBrandsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBrands = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'page_title': opts['pageTitle']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBulkPricingRuleById operation.
     * @callback module:Api/CatalogApi~deleteBulkPricingRuleByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;BulkPricingRule&#x60;, based on the &#x60;product_id&#x60; and &#x60;bulk_pricing_rule_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} bulkPricingRuleId The ID of the &#x60;BulkPricingRule&#x60;. 
     * @param {module:Api/CatalogApi~deleteBulkPricingRuleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBulkPricingRuleById = function(productId, bulkPricingRuleId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteBulkPricingRuleById");
      }

      // verify the required parameter 'bulkPricingRuleId' is set
      if (bulkPricingRuleId == undefined || bulkPricingRuleId == null) {
        throw new Error("Missing the required parameter 'bulkPricingRuleId' when calling deleteBulkPricingRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'bulk_pricing_rule_id': bulkPricingRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategories operation.
     * @callback module:Api/CatalogApi~deleteCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more &#x60;Category&#x60; objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {Number} opts.parentId Filter items by parent_id. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param {String} opts.keyword Filter items by keywords. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param {module:Api/CatalogApi~deleteCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCategories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'parent_id': opts['parentId'],
        'page_title': opts['pageTitle'],
        'keyword': opts['keyword'],
        'is_visible': opts['isVisible']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategoryById operation.
     * @callback module:Api/CatalogApi~deleteCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more &#x60;Category&#x60; objects from the BigCommerce catalog. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCategoryById = function(categoryId, callback) {
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCategoryById");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategoryImage operation.
     * @callback module:Api/CatalogApi~deleteCategoryImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Category&#x60; image from the BigCommerce Catalog. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteCategoryImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCategoryImage = function(categoryId, callback) {
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCategoryImage");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategoryMetafieldById operation.
     * @callback module:Api/CatalogApi~deleteCategoryMetafieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Metafield&#x60;. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteCategoryMetafieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCategoryMetafieldById = function(metafieldId, categoryId, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteCategoryMetafieldById");
      }

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCategoryMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComplexRuleById operation.
     * @callback module:Api/CatalogApi~deleteComplexRuleByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;ComplexRule&#x60;, based on the &#x60;product_id&#x60; and &#x60;complex_rule_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} complexRuleId The ID of the &#x60;ComplexRule&#x60;. 
     * @param {module:Api/CatalogApi~deleteComplexRuleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteComplexRuleById = function(productId, complexRuleId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteComplexRuleById");
      }

      // verify the required parameter 'complexRuleId' is set
      if (complexRuleId == undefined || complexRuleId == null) {
        throw new Error("Missing the required parameter 'complexRuleId' when calling deleteComplexRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'complex_rule_id': complexRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules/{complex_rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurableFieldById operation.
     * @callback module:Api/CatalogApi~deleteConfigurableFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;ConfigurableField&#x60;, based on the &#x60;product_id&#x60; and &#x60;configurable_field_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} configurableFieldId The ID of the &#x60;ConfigurableField&#x60;. 
     * @param {module:Api/CatalogApi~deleteConfigurableFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteConfigurableFieldById = function(productId, configurableFieldId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteConfigurableFieldById");
      }

      // verify the required parameter 'configurableFieldId' is set
      if (configurableFieldId == undefined || configurableFieldId == null) {
        throw new Error("Missing the required parameter 'configurableFieldId' when calling deleteConfigurableFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'configurable_field_id': configurableFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomFieldById operation.
     * @callback module:Api/CatalogApi~deleteCustomFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;CustomField&#x60;, based on the &#x60;product_id&#x60; and &#x60;custom_field_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} customFieldId The ID of the &#x60;CustomField&#x60;. 
     * @param {module:Api/CatalogApi~deleteCustomFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomFieldById = function(productId, customFieldId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteCustomFieldById");
      }

      // verify the required parameter 'customFieldId' is set
      if (customFieldId == undefined || customFieldId == null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling deleteCustomFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'custom_field_id': customFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields/{custom_field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModifierById operation.
     * @callback module:Api/CatalogApi~deleteModifierByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;Modifier&#x60; based on the &#x60;product_id&#x60; and &#x60;modifier_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {module:Api/CatalogApi~deleteModifierByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModifierById = function(productId, modifierId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteModifierById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling deleteModifierById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModifierImage operation.
     * @callback module:Api/CatalogApi~deleteModifierImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the image that was set to show when the modifier value is selected.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier&#x60;. 
     * @param {module:Api/CatalogApi~deleteModifierImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModifierImage = function(productId, modifierId, valueId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteModifierImage");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling deleteModifierImage");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling deleteModifierImage");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModifierValueById operation.
     * @callback module:Api/CatalogApi~deleteModifierValueByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;ModifierValue&#x60; based on the &#x60;product_id&#x60;, &#x60;modifier_id&#x60;, and &#x60;value_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier/Option Value&#x60;. 
     * @param {module:Api/CatalogApi~deleteModifierValueByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModifierValueById = function(productId, modifierId, valueId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteModifierValueById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling deleteModifierValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling deleteModifierValueById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionById operation.
     * @callback module:Api/CatalogApi~deleteOptionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;Option&#x60;, based on the &#x60;product_id&#x60; and &#x60;option_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {module:Api/CatalogApi~deleteOptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOptionById = function(productId, optionId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteOptionById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteOptionById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionValueById operation.
     * @callback module:Api/CatalogApi~deleteOptionValueByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Product&#39;s &#x60;OptionValue&#x60; based on the &#x60;product_id&#x60;, &#x60;option_id&#x60;, and &#x60;value_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier/Option Value&#x60;. 
     * @param {module:Api/CatalogApi~deleteOptionValueByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOptionValueById = function(productId, optionId, valueId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteOptionValueById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteOptionValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling deleteOptionValueById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values/{value_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductById operation.
     * @callback module:Api/CatalogApi~deleteProductByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Product&#x60; object from the BigCommerce Catalog. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductById = function(productId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductById");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductImage operation.
     * @callback module:Api/CatalogApi~deleteProductImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;ProductImage&#x60; in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} imageId The ID of the &#x60;Image&#x60; that is being operated on. 
     * @param {module:Api/CatalogApi~deleteProductImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductImage = function(productId, imageId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteProductImage");
      }


      var pathParams = {
        'product_id': productId,
        'image_id': imageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images/{image_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductMetafieldById operation.
     * @callback module:Api/CatalogApi~deleteProductMetafieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Metafield&#x60;. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Api/CatalogApi~deleteProductMetafieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductMetafieldById = function(metafieldId, productId, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteProductMetafieldById");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductReview operation.
     * @callback module:Api/CatalogApi~deleteProductReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;ProductReview&#x60; in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} reviewId The ID of the &#x60;review&#x60; that is being operated on. 
     * @param {module:Api/CatalogApi~deleteProductReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductReview = function(productId, reviewId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId == undefined || reviewId == null) {
        throw new Error("Missing the required parameter 'reviewId' when calling deleteProductReview");
      }


      var pathParams = {
        'product_id': productId,
        'review_id': reviewId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews/{review_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductVideo operation.
     * @callback module:Api/CatalogApi~deleteProductVideoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;ProductVideo&#x60; in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {String} videoId The ID of the &#x60;Video&#x60; that is being operated on. 
     * @param {module:Api/CatalogApi~deleteProductVideoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductVideo = function(productId, videoId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductVideo");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteProductVideo");
      }


      var pathParams = {
        'product_id': productId,
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProducts operation.
     * @callback module:Api/CatalogApi~deleteProductsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more &#x60;Product&#x60; objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.sku Filter items by sku. 
     * @param {Number} opts.price Filter items by price. 
     * @param {Number} opts.weight Filter items by weight. 
     * @param {Number} opts.condition Filter items by condition. 
     * @param {Number} opts.brandId Filter items by brand_id. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {Date} opts.dateLastImported Filter items by date_last_imported. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param {Number} opts.isFeatured Filter items by is_featured. 
     * @param {Number} opts.inventoryLevel Filter items by inventory_level. 
     * @param {Number} opts.totalSold Filter items by total_sold. 
     * @param {String} opts.type Filter items by type: &#x60;physical&#x60; or &#x60;digital&#x60;. 
     * @param {Number} opts.categories Filter items by categories. 
     * @param {String} opts.keyword Filter items by keywords found in the &#x60;name&#x60;, &#x60;description&#x60;, or &#x60;sku&#x60; fields, or in the brand name. 
     * @param {module:Api/CatalogApi~deleteProductsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'sku': opts['sku'],
        'price': opts['price'],
        'weight': opts['weight'],
        'condition': opts['condition'],
        'brand_id': opts['brandId'],
        'date_modified': opts['dateModified'],
        'date_last_imported': opts['dateLastImported'],
        'is_visible': opts['isVisible'],
        'is_featured': opts['isFeatured'],
        'inventory_level': opts['inventoryLevel'],
        'total_sold': opts['totalSold'],
        'type': opts['type'],
        'categories': opts['categories'],
        'keyword': opts['keyword']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariantById operation.
     * @callback module:Api/CatalogApi~deleteVariantByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Variant&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Api/CatalogApi~deleteVariantByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVariantById = function(productId, variantId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteVariantById");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling deleteVariantById");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariantMetafieldById operation.
     * @callback module:Api/CatalogApi~deleteVariantMetafieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Metafield&#x60;. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Api/CatalogApi~deleteVariantMetafieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVariantMetafieldById = function(metafieldId, productId, variantId, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteVariantMetafieldById");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteVariantMetafieldById");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling deleteVariantMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrandById operation.
     * @callback module:Api/CatalogApi~getBrandByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BrandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Brand&#x60; object.
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getBrandByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandResponse}
     */
    this.getBrandById = function(brandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandById");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrandMetafieldByBrandId operation.
     * @callback module:Api/CatalogApi~getBrandMetafieldByBrandIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60;, by &#x60;category_id&#x60;. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getBrandMetafieldByBrandIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.getBrandMetafieldByBrandId = function(metafieldId, brandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getBrandMetafieldByBrandId");
      }

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandMetafieldByBrandId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'brand_id': brandId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrandMetafieldsByBrandId operation.
     * @callback module:Api/CatalogApi~getBrandMetafieldsByBrandIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetaFieldCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60; object list, by &#x60;brand_id&#x60;. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield&#39;s key. 
     * @param {String} opts.namespace Filter based on a metafield&#39;s key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getBrandMetafieldsByBrandIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     */
    this.getBrandMetafieldsByBrandId = function(brandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandMetafieldsByBrandId");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrands operation.
     * @callback module:Api/CatalogApi~getBrandsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BrandCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets &#x60;Brand&#x60; objects. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getBrandsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandCollectionResponse}
     */
    this.getBrands = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'page_title': opts['pageTitle'],
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/brands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkPricingRuleById operation.
     * @callback module:Api/CatalogApi~getBulkPricingRuleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BulkPricingRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;BulkPricingRule&#x60; by &#x60;product_id&#x60; and &#x60;bulk_pricing_rule_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} bulkPricingRuleId The ID of the &#x60;BulkPricingRule&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getBulkPricingRuleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleResponse}
     */
    this.getBulkPricingRuleById = function(productId, bulkPricingRuleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getBulkPricingRuleById");
      }

      // verify the required parameter 'bulkPricingRuleId' is set
      if (bulkPricingRuleId == undefined || bulkPricingRuleId == null) {
        throw new Error("Missing the required parameter 'bulkPricingRuleId' when calling getBulkPricingRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'bulk_pricing_rule_id': bulkPricingRuleId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkPricingRules operation.
     * @callback module:Api/CatalogApi~getBulkPricingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BulkPricingRuleCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;BulkPricingRule&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getBulkPricingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleCollectionResponse}
     */
    this.getBulkPricingRules = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getBulkPricingRules");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategories operation.
     * @callback module:Api/CatalogApi~getCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CategoryCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated categories collection from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {Number} opts.parentId Filter items by parent_id. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param {String} opts.keyword Filter items by keywords. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryCollectionResponse}
     */
    this.getCategories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'parent_id': opts['parentId'],
        'page_title': opts['pageTitle'],
        'keyword': opts['keyword'],
        'is_visible': opts['isVisible'],
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryById operation.
     * @callback module:Api/CatalogApi~getCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a &#x60;Category&#x60; from the BigCommerce Catalog. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryResponse}
     */
    this.getCategoryById = function(categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryById");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryMetafieldByCategoryId operation.
     * @callback module:Api/CatalogApi~getCategoryMetafieldByCategoryIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60; by category_id. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getCategoryMetafieldByCategoryIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.getCategoryMetafieldByCategoryId = function(metafieldId, categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getCategoryMetafieldByCategoryId");
      }

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryMetafieldByCategoryId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'category_id': categoryId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryMetafieldsByCategoryId operation.
     * @callback module:Api/CatalogApi~getCategoryMetafieldsByCategoryIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetaFieldCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60; object list, by category_id. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield&#39;s key. 
     * @param {String} opts.namespace Filter based on a metafield&#39;s key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getCategoryMetafieldsByCategoryIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     */
    this.getCategoryMetafieldsByCategoryId = function(categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryMetafieldsByCategoryId");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryTree operation.
     * @callback module:Api/CatalogApi~getCategoryTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CategoryTreeCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the categories tree, a nested lineage of the categories with parent-&gt;child relationship. The &#x60;Category&#x60; objects returned are simplified versions of the category objects returned in the rest of this API. 
     * @param {module:Api/CatalogApi~getCategoryTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryTreeCollectionResponse}
     */
    this.getCategoryTree = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryTreeCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/categories/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getComplexRuleById operation.
     * @callback module:Api/CatalogApi~getComplexRuleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ComplexRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;ComplexRule&#x60; by product_id. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} complexRuleId The ID of the &#x60;ComplexRule&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getComplexRuleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleResponse}
     */
    this.getComplexRuleById = function(productId, complexRuleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getComplexRuleById");
      }

      // verify the required parameter 'complexRuleId' is set
      if (complexRuleId == undefined || complexRuleId == null) {
        throw new Error("Missing the required parameter 'complexRuleId' when calling getComplexRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'complex_rule_id': complexRuleId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules/{complex_rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getComplexRules operation.
     * @callback module:Api/CatalogApi~getComplexRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ComplexRuleCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;ComplexRule&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getComplexRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleCollectionResponse}
     */
    this.getComplexRules = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getComplexRules");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurableFieldById operation.
     * @callback module:Api/CatalogApi~getConfigurableFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ConfigurableFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;ConfigurableField&#x60; by &#x60;product_id&#x60; and &#x60;configurable_field_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} configurableFieldId The ID of the &#x60;ConfigurableField&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getConfigurableFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldResponse}
     */
    this.getConfigurableFieldById = function(productId, configurableFieldId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getConfigurableFieldById");
      }

      // verify the required parameter 'configurableFieldId' is set
      if (configurableFieldId == undefined || configurableFieldId == null) {
        throw new Error("Missing the required parameter 'configurableFieldId' when calling getConfigurableFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'configurable_field_id': configurableFieldId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurableFields operation.
     * @callback module:Api/CatalogApi~getConfigurableFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ConfigurableFieldCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;ConfigurableField&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {module:Api/CatalogApi~getConfigurableFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldCollectionResponse}
     */
    this.getConfigurableFields = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getConfigurableFields");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFieldById operation.
     * @callback module:Api/CatalogApi~getCustomFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CustomFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;CustomField&#x60; by &#x60;product_id&#x60; and &#x60;custom_field_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} customFieldId The ID of the &#x60;CustomField&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getCustomFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldResponse}
     */
    this.getCustomFieldById = function(productId, customFieldId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getCustomFieldById");
      }

      // verify the required parameter 'customFieldId' is set
      if (customFieldId == undefined || customFieldId == null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling getCustomFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'custom_field_id': customFieldId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields/{custom_field_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields operation.
     * @callback module:Api/CatalogApi~getCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CustomFieldCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;CustomField&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {module:Api/CatalogApi~getCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldCollectionResponse}
     */
    this.getCustomFields = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getCustomFields");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModifierById operation.
     * @callback module:Api/CatalogApi~getModifierByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Modifier&#x60; by product_id and modifier_id. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getModifierByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierResponse}
     */
    this.getModifierById = function(productId, modifierId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifierById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling getModifierById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModifierValueById operation.
     * @callback module:Api/CatalogApi~getModifierValueByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;ModifierValue&#x60; by &#x60;product_id&#x60;, &#x60;modifier_id&#x60;, and &#x60;value_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier/Option Value&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getModifierValueByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueResponse}
     */
    this.getModifierValueById = function(productId, modifierId, valueId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifierValueById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling getModifierValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling getModifierValueById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModifierValues operation.
     * @callback module:Api/CatalogApi~getModifierValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierValueCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;ModifierValue&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getModifierValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueCollectionResponse}
     */
    this.getModifierValues = function(productId, modifierId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifierValues");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling getModifierValues");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModifiers operation.
     * @callback module:Api/CatalogApi~getModifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;Modifier&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getModifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierCollectionResponse}
     */
    this.getModifiers = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifiers");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionById operation.
     * @callback module:Api/CatalogApi~getOptionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets &#x60;Option&#x60; object by product ID and option ID.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getOptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionResponse}
     */
    this.getOptionById = function(productId, optionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptionById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling getOptionById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionValueById operation.
     * @callback module:Api/CatalogApi~getOptionValueByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;OptionValue&#x60; by &#x60;product_id&#x60;, &#x60;option_id&#x60;, and &#x60;value_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier/Option Value&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getOptionValueByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueResponse}
     */
    this.getOptionValueById = function(productId, optionId, valueId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptionValueById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling getOptionValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling getOptionValueById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'value_id': valueId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values/{value_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionValues operation.
     * @callback module:Api/CatalogApi~getOptionValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionValueCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;OptionValue&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getOptionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueCollectionResponse}
     */
    this.getOptionValues = function(productId, optionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptionValues");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling getOptionValues");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptions operation.
     * @callback module:Api/CatalogApi~getOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of &#x60;Option&#x60; objects.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionCollectionResponse}
     */
    this.getOptions = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptions");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductById operation.
     * @callback module:Api/CatalogApi~getProductByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a &#x60;Product&#x60; from the BigCommerce Catalog. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include &#x60;variants&#x60;, &#x60;images&#x60;, &#39;primary_image&#x60;, &#x60;custom_fields&#x60;, and &#x60;bulk_pricing_rules&#x60;. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.priceListId The ID of the &#x60;Price List&#x60;. 
     * @param {module:Api/CatalogApi~getProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductResponse}
     */
    this.getProductById = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductById");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include': opts['include'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'price_list_id': opts['priceListId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductImageById operation.
     * @callback module:Api/CatalogApi~getProductImageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets image on a product. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} imageId The ID of the &#x60;Image&#x60; that is being operated on. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getProductImageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageResponse}
     */
    this.getProductImageById = function(productId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductImageById");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling getProductImageById");
      }


      var pathParams = {
        'product_id': productId,
        'image_id': imageId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images/{image_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductImages operation.
     * @callback module:Api/CatalogApi~getProductImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductImageCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all images on a product. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getProductImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageCollectionResponse}
     */
    this.getProductImages = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductImages");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductMetafieldByProductId operation.
     * @callback module:Api/CatalogApi~getProductMetafieldByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60;, by &#x60;product_id&#x60;. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getProductMetafieldByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.getProductMetafieldByProductId = function(metafieldId, productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getProductMetafieldByProductId");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductMetafieldByProductId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductMetafieldsByProductId operation.
     * @callback module:Api/CatalogApi~getProductMetafieldsByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetaFieldCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60; object list, by &#x60;product_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield&#39;s key. 
     * @param {String} opts.namespace Filter based on a metafield&#39;s key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getProductMetafieldsByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     */
    this.getProductMetafieldsByProductId = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductMetafieldsByProductId");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductReviewById operation.
     * @callback module:Api/CatalogApi~getProductReviewByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductReviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a product review. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} reviewId The ID of the &#x60;review&#x60; that is being operated on. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getProductReviewByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewResponse}
     */
    this.getProductReviewById = function(productId, reviewId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductReviewById");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId == undefined || reviewId == null) {
        throw new Error("Missing the required parameter 'reviewId' when calling getProductReviewById");
      }


      var pathParams = {
        'product_id': productId,
        'review_id': reviewId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews/{review_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductReviews operation.
     * @callback module:Api/CatalogApi~getProductReviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductReviewCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all reviews on a product. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {module:Api/CatalogApi~getProductReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewCollectionResponse}
     */
    this.getProductReviews = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductReviews");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductVideoById operation.
     * @callback module:Api/CatalogApi~getProductVideoByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductVideoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets video on a product. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {String} videoId The ID of the &#x60;Video&#x60; that is being operated on. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getProductVideoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoResponse}
     */
    this.getProductVideoById = function(productId, videoId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductVideoById");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling getProductVideoById");
      }


      var pathParams = {
        'product_id': productId,
        'video_id': videoId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductVideos operation.
     * @callback module:Api/CatalogApi~getProductVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductVideoCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all videos on a product. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getProductVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoCollectionResponse}
     */
    this.getProductVideos = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductVideos");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProducts operation.
     * @callback module:Api/CatalogApi~getProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated collection of &#x60;Products&#x60; objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Filter items by id. 
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.sku Filter items by sku. 
     * @param {String} opts.upc Filter items by upc. 
     * @param {Number} opts.price Filter items by price. 
     * @param {Number} opts.weight Filter items by weight. 
     * @param {Number} opts.condition Filter items by condition. 
     * @param {Number} opts.brandId Filter items by brand_id. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {Date} opts.dateLastImported Filter items by date_last_imported. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param {Number} opts.isFeatured Filter items by is_featured. 
     * @param {Number} opts.isFreeShipping Filter items by is_free_shipping. 
     * @param {Number} opts.inventoryLevel Filter items by inventory_level. 
     * @param {Number} opts.inventoryLow Filter items by inventory_low. Values: 1, 0. 
     * @param {Number} opts.outOfStock Filter items by out_of_stock. To enable the filter, pass &#x60;out_of_stock&#x60;&#x3D;&#x60;1&#x60;. 
     * @param {Number} opts.totalSold Filter items by total_sold. 
     * @param {String} opts.type Filter items by type: &#x60;physical&#x60; or &#x60;digital&#x60;. 
     * @param {Number} opts.categories Filter items by categories. 
     * @param {String} opts.keyword Filter items by keywords found in the &#x60;name&#x60;, &#x60;description&#x60;, or &#x60;sku&#x60; fields, or in the brand name. 
     * @param {String} opts.keywordContext Set context for a product search. 
     * @param {Number} opts.status Filter items by status. 
     * @param {String} opts.include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include &#x60;variants&#x60;, &#x60;images&#x60;, &#39;primary_image&#x60;, &#x60;custom_fields&#x60;, and &#x60;bulk_pricing_rules&#x60;. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {String} opts.availability Filter items by availability. Values are: available, disabled, preorder. 
     * @param {Number} opts.priceListId The ID of the &#x60;Price List&#x60;. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.direction Sort direction. Acceptable values are: &#x60;asc&#x60;, &#x60;desc&#x60;. 
     * @param {String} opts.sort Field name to sort by. 
     * @param {module:Api/CatalogApi~getProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductCollectionResponse}
     */
    this.getProducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'sku': opts['sku'],
        'upc': opts['upc'],
        'price': opts['price'],
        'weight': opts['weight'],
        'condition': opts['condition'],
        'brand_id': opts['brandId'],
        'date_modified': opts['dateModified'],
        'date_last_imported': opts['dateLastImported'],
        'is_visible': opts['isVisible'],
        'is_featured': opts['isFeatured'],
        'is_free_shipping': opts['isFreeShipping'],
        'inventory_level': opts['inventoryLevel'],
        'inventory_low': opts['inventoryLow'],
        'out_of_stock': opts['outOfStock'],
        'total_sold': opts['totalSold'],
        'type': opts['type'],
        'categories': opts['categories'],
        'keyword': opts['keyword'],
        'keyword_context': opts['keywordContext'],
        'status': opts['status'],
        'include': opts['include'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'availability': opts['availability'],
        'price_list_id': opts['priceListId'],
        'page': opts['page'],
        'limit': opts['limit'],
        'direction': opts['direction'],
        'sort': opts['sort']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantById operation.
     * @callback module:Api/CatalogApi~getVariantByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/VariantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Variant&#x60; object.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getVariantByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantResponse}
     */
    this.getVariantById = function(productId, variantId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantById");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getVariantById");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantMetafieldByProductIdAndVariantId operation.
     * @callback module:Api/CatalogApi~getVariantMetafieldByProductIdAndVariantIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60;, by &#x60;product_id&#x60; and &#x60;variant_id&#x60;. 
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getVariantMetafieldByProductIdAndVariantIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.getVariantMetafieldByProductIdAndVariantId = function(metafieldId, productId, variantId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getVariantMetafieldByProductIdAndVariantId");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantMetafieldByProductIdAndVariantId");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getVariantMetafieldByProductIdAndVariantId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantMetafieldsByProductIdAndVariantId operation.
     * @callback module:Api/CatalogApi~getVariantMetafieldsByProductIdAndVariantIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetaFieldCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Metafield&#x60; object list, by &#x60;product_id&#x60; and &#x60;variant_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield&#39;s key. 
     * @param {String} opts.namespace Filter based on a metafield&#39;s key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getVariantMetafieldsByProductIdAndVariantIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     */
    this.getVariantMetafieldsByProductIdAndVariantId = function(productId, variantId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantMetafieldsByProductIdAndVariantId");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getVariantMetafieldsByProductIdAndVariantId");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariants operation.
     * @callback module:Api/CatalogApi~getVariantsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/VariantCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a &#x60;Variant&#x60; object list from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Filter items by id. 
     * @param {String} opts.sku Filter items by sku. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getVariantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantCollectionResponse}
     */
    this.getVariants = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'sku': opts['sku'],
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantsByProductId operation.
     * @callback module:Api/CatalogApi~getVariantsByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/VariantCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a &#x60;Variant&#x60; object list from the BigCommerce Catalog. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {module:Api/CatalogApi~getVariantsByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantCollectionResponse}
     */
    this.getVariantsByProductId = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantsByProductId");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrand operation.
     * @callback module:Api/CatalogApi~updateBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BrandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Brand&#x60; in the BigCommerce Catalog. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {module:Model/BrandPut} brand Returns a &#x60;Brand&#x60; from the BigCommerce Catalog. 
     * @param {module:Api/CatalogApi~updateBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandResponse}
     */
    this.updateBrand = function(brandId, brand, callback) {
      var postBody = brand;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling updateBrand");
      }

      // verify the required parameter 'brand' is set
      if (brand == undefined || brand == null) {
        throw new Error("Missing the required parameter 'brand' when calling updateBrand");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrandMetafield operation.
     * @callback module:Api/CatalogApi~updateBrandMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Metafield&#x60; object.
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} brandId The ID of the &#x60;Brand&#x60; to which the resource belongs. 
     * @param {module:Model/MetafieldPut} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~updateBrandMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.updateBrandMetafield = function(metafieldId, brandId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateBrandMetafield");
      }

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling updateBrandMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateBrandMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBulkPricingRule operation.
     * @callback module:Api/CatalogApi~updateBulkPricingRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/BulkPricingRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;BulkPricingRule&#x60;, based on the &#x60;product_id&#x60; and &#x60;bulk_pricing_rule_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} bulkPricingRuleId The ID of the &#x60;BulkPricingRule&#x60;. 
     * @param {module:Model/BulkPricingRulePut} bulkPricingRule &#x60;BulkPricingRule&#x60; object. 
     * @param {module:Api/CatalogApi~updateBulkPricingRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleResponse}
     */
    this.updateBulkPricingRule = function(productId, bulkPricingRuleId, bulkPricingRule, callback) {
      var postBody = bulkPricingRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateBulkPricingRule");
      }

      // verify the required parameter 'bulkPricingRuleId' is set
      if (bulkPricingRuleId == undefined || bulkPricingRuleId == null) {
        throw new Error("Missing the required parameter 'bulkPricingRuleId' when calling updateBulkPricingRule");
      }

      // verify the required parameter 'bulkPricingRule' is set
      if (bulkPricingRule == undefined || bulkPricingRule == null) {
        throw new Error("Missing the required parameter 'bulkPricingRule' when calling updateBulkPricingRule");
      }


      var pathParams = {
        'product_id': productId,
        'bulk_pricing_rule_id': bulkPricingRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategory operation.
     * @callback module:Api/CatalogApi~updateCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Category&#x60; in the BigCommerce Catalog. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {module:Model/CategoryPut} category A BigCommerce &#x60;Category&#x60; object. 
     * @param {module:Api/CatalogApi~updateCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryResponse}
     */
    this.updateCategory = function(categoryId, category, callback) {
      var postBody = category;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling updateCategory");
      }

      // verify the required parameter 'category' is set
      if (category == undefined || category == null) {
        throw new Error("Missing the required parameter 'category' when calling updateCategory");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategoryMetafield operation.
     * @callback module:Api/CatalogApi~updateCategoryMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Metafield&#x60; object.
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} categoryId The ID of the &#x60;Category&#x60; to which the resource belongs. 
     * @param {module:Model/MetafieldPut} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~updateCategoryMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.updateCategoryMetafield = function(metafieldId, categoryId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateCategoryMetafield");
      }

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling updateCategoryMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateCategoryMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComplexRule operation.
     * @callback module:Api/CatalogApi~updateComplexRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ComplexRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;ComplexRule&#x60;, based on the &#x60;product_id&#x60; and &#x60;complex_rule_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} complexRuleId The ID of the &#x60;ComplexRule&#x60;. 
     * @param {module:Model/ComplexRulePut} complexRule &#x60;ComplexRule&#x60; object. 
     * @param {module:Api/CatalogApi~updateComplexRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleResponse}
     */
    this.updateComplexRule = function(productId, complexRuleId, complexRule, callback) {
      var postBody = complexRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateComplexRule");
      }

      // verify the required parameter 'complexRuleId' is set
      if (complexRuleId == undefined || complexRuleId == null) {
        throw new Error("Missing the required parameter 'complexRuleId' when calling updateComplexRule");
      }

      // verify the required parameter 'complexRule' is set
      if (complexRule == undefined || complexRule == null) {
        throw new Error("Missing the required parameter 'complexRule' when calling updateComplexRule");
      }


      var pathParams = {
        'product_id': productId,
        'complex_rule_id': complexRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules/{complex_rule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigurableField operation.
     * @callback module:Api/CatalogApi~updateConfigurableFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ConfigurableFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;ConfigurableField&#x60;, based on the &#x60;product_id&#x60; and &#x60;configurable_field_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} configurableFieldId The ID of the &#x60;ConfigurableField&#x60;. 
     * @param {module:Model/ConfigurableFieldPut} configurableField &#x60;ConfigurableField&#x60; object. 
     * @param {module:Api/CatalogApi~updateConfigurableFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldResponse}
     */
    this.updateConfigurableField = function(productId, configurableFieldId, configurableField, callback) {
      var postBody = configurableField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateConfigurableField");
      }

      // verify the required parameter 'configurableFieldId' is set
      if (configurableFieldId == undefined || configurableFieldId == null) {
        throw new Error("Missing the required parameter 'configurableFieldId' when calling updateConfigurableField");
      }

      // verify the required parameter 'configurableField' is set
      if (configurableField == undefined || configurableField == null) {
        throw new Error("Missing the required parameter 'configurableField' when calling updateConfigurableField");
      }


      var pathParams = {
        'product_id': productId,
        'configurable_field_id': configurableFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomField operation.
     * @callback module:Api/CatalogApi~updateCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/CustomFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;CustomField&#x60;, based on the &#x60;product_id&#x60; and &#x60;custom_field_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} customFieldId The ID of the &#x60;CustomField&#x60;. 
     * @param {module:Model/CustomFieldPut} customField &#x60;CustomField&#x60; object. 
     * @param {module:Api/CatalogApi~updateCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldResponse}
     */
    this.updateCustomField = function(productId, customFieldId, customField, callback) {
      var postBody = customField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateCustomField");
      }

      // verify the required parameter 'customFieldId' is set
      if (customFieldId == undefined || customFieldId == null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling updateCustomField");
      }

      // verify the required parameter 'customField' is set
      if (customField == undefined || customField == null) {
        throw new Error("Missing the required parameter 'customField' when calling updateCustomField");
      }


      var pathParams = {
        'product_id': productId,
        'custom_field_id': customFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields/{custom_field_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModifier operation.
     * @callback module:Api/CatalogApi~updateModifierCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;Modifier&#x60; based on the &#x60;product_id&#x60; and &#x60;modifier_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {module:Model/ModifierPut} modifier A BigCommerce &#x60;Modifier&#x60; object. 
     * @param {module:Api/CatalogApi~updateModifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierResponse}
     */
    this.updateModifier = function(productId, modifierId, modifier, callback) {
      var postBody = modifier;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateModifier");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling updateModifier");
      }

      // verify the required parameter 'modifier' is set
      if (modifier == undefined || modifier == null) {
        throw new Error("Missing the required parameter 'modifier' when calling updateModifier");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModifierValue operation.
     * @callback module:Api/CatalogApi~updateModifierValueCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ModifierValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;ModifierValue&#x60; based on the &#x60;product_id&#x60;, &#x60;modifier_id&#x60;, and &#x60;value_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} modifierId The ID of the &#x60;Modifier&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier/Option Value&#x60;. 
     * @param {module:Model/ModifierValuePut} modifierValue A BigCommerce &#x60;ModifierValue&#x60; object. 
     * @param {module:Api/CatalogApi~updateModifierValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueResponse}
     */
    this.updateModifierValue = function(productId, modifierId, valueId, modifierValue, callback) {
      var postBody = modifierValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateModifierValue");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling updateModifierValue");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling updateModifierValue");
      }

      // verify the required parameter 'modifierValue' is set
      if (modifierValue == undefined || modifierValue == null) {
        throw new Error("Missing the required parameter 'modifierValue' when calling updateModifierValue");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOption operation.
     * @callback module:Api/CatalogApi~updateOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;Option&#x60;, based on the &#x60;product_id&#x60; and &#x60;option_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {module:Model/OptionPut} option A BigCommerce &#x60;Option&#x60; object. 
     * @param {module:Api/CatalogApi~updateOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionResponse}
     */
    this.updateOption = function(productId, optionId, option, callback) {
      var postBody = option;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateOption");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling updateOption");
      }

      // verify the required parameter 'option' is set
      if (option == undefined || option == null) {
        throw new Error("Missing the required parameter 'option' when calling updateOption");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOptionValue operation.
     * @callback module:Api/CatalogApi~updateOptionValueCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/OptionValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Product&#39;s &#x60;OptionValue&#x60; based on the &#x60;product_id&#x60;, &#x60;option_id&#x60;, and &#x60;value_id&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} optionId The ID of the &#x60;Option&#x60;. 
     * @param {Number} valueId The ID of the &#x60;Modifier/Option Value&#x60;. 
     * @param {module:Model/OptionValuePut} optionValue A BigCommerce &#x60;OptionValue&#x60; object. 
     * @param {module:Api/CatalogApi~updateOptionValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueResponse}
     */
    this.updateOptionValue = function(productId, optionId, valueId, optionValue, callback) {
      var postBody = optionValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateOptionValue");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling updateOptionValue");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling updateOptionValue");
      }

      // verify the required parameter 'optionValue' is set
      if (optionValue == undefined || optionValue == null) {
        throw new Error("Missing the required parameter 'optionValue' when calling updateOptionValue");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values/{value_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:Api/CatalogApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Product&#x60; in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/ProductPut} product A BigCommerce &#x60;Product&#x60; object. 
     * @param {module:Api/CatalogApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductResponse}
     */
    this.updateProduct = function(productId, product, callback) {
      var postBody = product;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProduct");
      }

      // verify the required parameter 'product' is set
      if (product == undefined || product == null) {
        throw new Error("Missing the required parameter 'product' when calling updateProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductImage operation.
     * @callback module:Api/CatalogApi~updateProductImageCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an image on a product. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} imageId The ID of the &#x60;Image&#x60; that is being operated on. 
     * @param {module:Model/ProductImagePut} productImage A BigCommerce &#x60;ProductImage&#x60; object. 
     * @param {module:Api/CatalogApi~updateProductImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageResponse}
     */
    this.updateProductImage = function(productId, imageId, productImage, callback) {
      var postBody = productImage;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling updateProductImage");
      }

      // verify the required parameter 'productImage' is set
      if (productImage == undefined || productImage == null) {
        throw new Error("Missing the required parameter 'productImage' when calling updateProductImage");
      }


      var pathParams = {
        'product_id': productId,
        'image_id': imageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images/{image_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductMetafield operation.
     * @callback module:Api/CatalogApi~updateProductMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Metafield&#x60; object.
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {module:Model/MetafieldPut} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~updateProductMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.updateProductMetafield = function(metafieldId, productId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateProductMetafield");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateProductMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductReview operation.
     * @callback module:Api/CatalogApi~updateProductReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductReviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a product review. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} reviewId The ID of the &#x60;review&#x60; that is being operated on. 
     * @param {module:Model/ProductReviewPut} productReview A BigCommerce &#x60;ProductReview&#x60; object. 
     * @param {module:Api/CatalogApi~updateProductReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewResponse}
     */
    this.updateProductReview = function(productId, reviewId, productReview, callback) {
      var postBody = productReview;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId == undefined || reviewId == null) {
        throw new Error("Missing the required parameter 'reviewId' when calling updateProductReview");
      }

      // verify the required parameter 'productReview' is set
      if (productReview == undefined || productReview == null) {
        throw new Error("Missing the required parameter 'productReview' when calling updateProductReview");
      }


      var pathParams = {
        'product_id': productId,
        'review_id': reviewId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews/{review_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductVideo operation.
     * @callback module:Api/CatalogApi~updateProductVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ProductVideoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a video on a product. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {String} videoId The ID of the &#x60;Video&#x60; that is being operated on. 
     * @param {module:Model/ProductVideoPut} productVideo A BigCommerce &#x60;ProductVideo&#x60; object. 
     * @param {module:Api/CatalogApi~updateProductVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoResponse}
     */
    this.updateProductVideo = function(productId, videoId, productVideo, callback) {
      var postBody = productVideo;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductVideo");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateProductVideo");
      }

      // verify the required parameter 'productVideo' is set
      if (productVideo == undefined || productVideo == null) {
        throw new Error("Missing the required parameter 'productVideo' when calling updateProductVideo");
      }


      var pathParams = {
        'product_id': productId,
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariant operation.
     * @callback module:Api/CatalogApi~updateVariantCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/VariantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Variant&#x60; object.
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Model/VariantPut} variant A &#x60;Variant&#x60; object. 
     * @param {module:Api/CatalogApi~updateVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantResponse}
     */
    this.updateVariant = function(productId, variantId, variant, callback) {
      var postBody = variant;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateVariant");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling updateVariant");
      }

      // verify the required parameter 'variant' is set
      if (variant == undefined || variant == null) {
        throw new Error("Missing the required parameter 'variant' when calling updateVariant");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariantMetafield operation.
     * @callback module:Api/CatalogApi~updateVariantMetafieldCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/MetafieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Metafield&#x60; object.
     * @param {Number} metafieldId The ID of the &#x60;Metafield&#x60;. 
     * @param {Number} productId The ID of the &#x60;Product&#x60; to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Model/MetafieldPut} metafield A &#x60;Metafield&#x60; object. 
     * @param {module:Api/CatalogApi~updateVariantMetafieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     */
    this.updateVariantMetafield = function(metafieldId, productId, variantId, metafield, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateVariantMetafield");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateVariantMetafield");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling updateVariantMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateVariantMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
