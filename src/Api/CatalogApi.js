/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/BrandCollectionResponse', 'Model/BrandPost', 'Model/BrandPut', 'Model/BrandResponse', 'Model/BulkPricingRuleCollectionResponse', 'Model/BulkPricingRulePost', 'Model/BulkPricingRulePut', 'Model/BulkPricingRuleResponse', 'Model/CatalogSummaryResponse', 'Model/CategoryCollectionResponse', 'Model/CategoryPost', 'Model/CategoryPut', 'Model/CategoryResponse', 'Model/CategoryTreeCollectionResponse', 'Model/ComplexRuleCollectionResponse', 'Model/ComplexRulePost', 'Model/ComplexRulePut', 'Model/ComplexRuleResponse', 'Model/ConfigurableFieldCollectionResponse', 'Model/ConfigurableFieldPost', 'Model/ConfigurableFieldPut', 'Model/ConfigurableFieldResponse', 'Model/CustomFieldCollectionResponse', 'Model/CustomFieldPost', 'Model/CustomFieldPut', 'Model/CustomFieldResponse', 'Model/ErrorResponse', 'Model/ImageResponse', 'Model/MetaFieldCollectionResponse', 'Model/MetafieldPost', 'Model/MetafieldPut', 'Model/MetafieldResponse', 'Model/ModifierCollectionResponse', 'Model/ModifierPost', 'Model/ModifierPut', 'Model/ModifierResponse', 'Model/ModifierValueCollectionResponse', 'Model/ModifierValuePost', 'Model/ModifierValuePut', 'Model/ModifierValueResponse', 'Model/NotFound', 'Model/OptionCollectionResponse', 'Model/OptionPost', 'Model/OptionPut', 'Model/OptionResponse', 'Model/OptionValueCollectionResponse', 'Model/OptionValuePost', 'Model/OptionValuePut', 'Model/OptionValueResponse', 'Model/ProductCollectionResponse', 'Model/ProductImageCollectionResponse', 'Model/ProductImagePost', 'Model/ProductImagePut', 'Model/ProductImageResponse', 'Model/ProductPost', 'Model/ProductPut', 'Model/ProductResponse', 'Model/ProductReviewCollectionResponse', 'Model/ProductReviewPost', 'Model/ProductReviewPut', 'Model/ProductReviewResponse', 'Model/ProductVideoCollectionResponse', 'Model/ProductVideoPost', 'Model/ProductVideoPut', 'Model/ProductVideoResponse', 'Model/VariantCollectionResponse', 'Model/VariantPost', 'Model/VariantPut', 'Model/VariantResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/BrandCollectionResponse'), require('../Model/BrandPost'), require('../Model/BrandPut'), require('../Model/BrandResponse'), require('../Model/BulkPricingRuleCollectionResponse'), require('../Model/BulkPricingRulePost'), require('../Model/BulkPricingRulePut'), require('../Model/BulkPricingRuleResponse'), require('../Model/CatalogSummaryResponse'), require('../Model/CategoryCollectionResponse'), require('../Model/CategoryPost'), require('../Model/CategoryPut'), require('../Model/CategoryResponse'), require('../Model/CategoryTreeCollectionResponse'), require('../Model/ComplexRuleCollectionResponse'), require('../Model/ComplexRulePost'), require('../Model/ComplexRulePut'), require('../Model/ComplexRuleResponse'), require('../Model/ConfigurableFieldCollectionResponse'), require('../Model/ConfigurableFieldPost'), require('../Model/ConfigurableFieldPut'), require('../Model/ConfigurableFieldResponse'), require('../Model/CustomFieldCollectionResponse'), require('../Model/CustomFieldPost'), require('../Model/CustomFieldPut'), require('../Model/CustomFieldResponse'), require('../Model/ErrorResponse'), require('../Model/ImageResponse'), require('../Model/MetaFieldCollectionResponse'), require('../Model/MetafieldPost'), require('../Model/MetafieldPut'), require('../Model/MetafieldResponse'), require('../Model/ModifierCollectionResponse'), require('../Model/ModifierPost'), require('../Model/ModifierPut'), require('../Model/ModifierResponse'), require('../Model/ModifierValueCollectionResponse'), require('../Model/ModifierValuePost'), require('../Model/ModifierValuePut'), require('../Model/ModifierValueResponse'), require('../Model/NotFound'), require('../Model/OptionCollectionResponse'), require('../Model/OptionPost'), require('../Model/OptionPut'), require('../Model/OptionResponse'), require('../Model/OptionValueCollectionResponse'), require('../Model/OptionValuePost'), require('../Model/OptionValuePut'), require('../Model/OptionValueResponse'), require('../Model/ProductCollectionResponse'), require('../Model/ProductImageCollectionResponse'), require('../Model/ProductImagePost'), require('../Model/ProductImagePut'), require('../Model/ProductImageResponse'), require('../Model/ProductPost'), require('../Model/ProductPut'), require('../Model/ProductResponse'), require('../Model/ProductReviewCollectionResponse'), require('../Model/ProductReviewPost'), require('../Model/ProductReviewPut'), require('../Model/ProductReviewResponse'), require('../Model/ProductVideoCollectionResponse'), require('../Model/ProductVideoPost'), require('../Model/ProductVideoPut'), require('../Model/ProductVideoResponse'), require('../Model/VariantCollectionResponse'), require('../Model/VariantPost'), require('../Model/VariantPut'), require('../Model/VariantResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.CatalogApi = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.BrandCollectionResponse, root.BigCommerceApi.BrandPost, root.BigCommerceApi.BrandPut, root.BigCommerceApi.BrandResponse, root.BigCommerceApi.BulkPricingRuleCollectionResponse, root.BigCommerceApi.BulkPricingRulePost, root.BigCommerceApi.BulkPricingRulePut, root.BigCommerceApi.BulkPricingRuleResponse, root.BigCommerceApi.CatalogSummaryResponse, root.BigCommerceApi.CategoryCollectionResponse, root.BigCommerceApi.CategoryPost, root.BigCommerceApi.CategoryPut, root.BigCommerceApi.CategoryResponse, root.BigCommerceApi.CategoryTreeCollectionResponse, root.BigCommerceApi.ComplexRuleCollectionResponse, root.BigCommerceApi.ComplexRulePost, root.BigCommerceApi.ComplexRulePut, root.BigCommerceApi.ComplexRuleResponse, root.BigCommerceApi.ConfigurableFieldCollectionResponse, root.BigCommerceApi.ConfigurableFieldPost, root.BigCommerceApi.ConfigurableFieldPut, root.BigCommerceApi.ConfigurableFieldResponse, root.BigCommerceApi.CustomFieldCollectionResponse, root.BigCommerceApi.CustomFieldPost, root.BigCommerceApi.CustomFieldPut, root.BigCommerceApi.CustomFieldResponse, root.BigCommerceApi.ErrorResponse, root.BigCommerceApi.ImageResponse, root.BigCommerceApi.MetaFieldCollectionResponse, root.BigCommerceApi.MetafieldPost, root.BigCommerceApi.MetafieldPut, root.BigCommerceApi.MetafieldResponse, root.BigCommerceApi.ModifierCollectionResponse, root.BigCommerceApi.ModifierPost, root.BigCommerceApi.ModifierPut, root.BigCommerceApi.ModifierResponse, root.BigCommerceApi.ModifierValueCollectionResponse, root.BigCommerceApi.ModifierValuePost, root.BigCommerceApi.ModifierValuePut, root.BigCommerceApi.ModifierValueResponse, root.BigCommerceApi.NotFound, root.BigCommerceApi.OptionCollectionResponse, root.BigCommerceApi.OptionPost, root.BigCommerceApi.OptionPut, root.BigCommerceApi.OptionResponse, root.BigCommerceApi.OptionValueCollectionResponse, root.BigCommerceApi.OptionValuePost, root.BigCommerceApi.OptionValuePut, root.BigCommerceApi.OptionValueResponse, root.BigCommerceApi.ProductCollectionResponse, root.BigCommerceApi.ProductImageCollectionResponse, root.BigCommerceApi.ProductImagePost, root.BigCommerceApi.ProductImagePut, root.BigCommerceApi.ProductImageResponse, root.BigCommerceApi.ProductPost, root.BigCommerceApi.ProductPut, root.BigCommerceApi.ProductResponse, root.BigCommerceApi.ProductReviewCollectionResponse, root.BigCommerceApi.ProductReviewPost, root.BigCommerceApi.ProductReviewPut, root.BigCommerceApi.ProductReviewResponse, root.BigCommerceApi.ProductVideoCollectionResponse, root.BigCommerceApi.ProductVideoPost, root.BigCommerceApi.ProductVideoPut, root.BigCommerceApi.ProductVideoResponse, root.BigCommerceApi.VariantCollectionResponse, root.BigCommerceApi.VariantPost, root.BigCommerceApi.VariantPut, root.BigCommerceApi.VariantResponse);
  }
}(this, function(ApiClient, BrandCollectionResponse, BrandPost, BrandPut, BrandResponse, BulkPricingRuleCollectionResponse, BulkPricingRulePost, BulkPricingRulePut, BulkPricingRuleResponse, CatalogSummaryResponse, CategoryCollectionResponse, CategoryPost, CategoryPut, CategoryResponse, CategoryTreeCollectionResponse, ComplexRuleCollectionResponse, ComplexRulePost, ComplexRulePut, ComplexRuleResponse, ConfigurableFieldCollectionResponse, ConfigurableFieldPost, ConfigurableFieldPut, ConfigurableFieldResponse, CustomFieldCollectionResponse, CustomFieldPost, CustomFieldPut, CustomFieldResponse, ErrorResponse, ImageResponse, MetaFieldCollectionResponse, MetafieldPost, MetafieldPut, MetafieldResponse, ModifierCollectionResponse, ModifierPost, ModifierPut, ModifierResponse, ModifierValueCollectionResponse, ModifierValuePost, ModifierValuePut, ModifierValueResponse, NotFound, OptionCollectionResponse, OptionPost, OptionPut, OptionResponse, OptionValueCollectionResponse, OptionValuePost, OptionValuePut, OptionValueResponse, ProductCollectionResponse, ProductImageCollectionResponse, ProductImagePost, ProductImagePut, ProductImageResponse, ProductPost, ProductPut, ProductResponse, ProductReviewCollectionResponse, ProductReviewPost, ProductReviewPut, ProductReviewResponse, ProductVideoCollectionResponse, ProductVideoPost, ProductVideoPut, ProductVideoResponse, VariantCollectionResponse, VariantPost, VariantPut, VariantResponse) {
  'use strict';

  /**
   * Catalog service.
   * @module Api/CatalogApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new CatalogApi. 
   * @alias module:Api/CatalogApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Returns a lightweight inventory summary from the BigCommerce Catalog. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CatalogSummaryResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CatalogSummaryResponse} if callback is null
     */
    this.catalogSummaryGet = function(opts, callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CatalogSummaryResponse;

      return this.apiClient.callApi(
        '/catalog/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `Brand` object.
     * @param {module:Model/BrandPost} brand A `Brand` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BrandResponse} if callback is null
     */
    this.createBrand = function(brand, opts, callback) {
      var postBody = brand;

      // verify the required parameter 'brand' is set
      if (brand == undefined || brand == null) {
        throw new Error("Missing the required parameter 'brand' when calling createBrand");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandResponse;

      return this.apiClient.callApi(
        '/catalog/brands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates an image on a `Brand`. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ImageResponse} if callback is null
     */
    this.createBrandImage = function(brandId, imageFile, opts, callback) {
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling createBrandImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createBrandImage");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a product `Metafield`.
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param {module:Model/MetafieldPost} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.createBrandMetafield = function(brandId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling createBrandMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createBrandMetafield");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `BulkPricingRule`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/BulkPricingRulePost} bulkPricingRule `BulkPricingRule` object. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BulkPricingRuleResponse} if callback is null
     */
    this.createBulkPricingRule = function(productId, bulkPricingRule, opts, callback) {
      opts = opts || {};
      var postBody = bulkPricingRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createBulkPricingRule");
      }

      // verify the required parameter 'bulkPricingRule' is set
      if (bulkPricingRule == undefined || bulkPricingRule == null) {
        throw new Error("Missing the required parameter 'bulkPricingRule' when calling createBulkPricingRule");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `Category` in the BigCommerce Catalog. 
     * @param {module:Model/CategoryPost} category A BigCommerce `Category` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CategoryResponse} if callback is null
     */
    this.createCategory = function(category, opts, callback) {
      var postBody = category;

      // verify the required parameter 'category' is set
      if (category == undefined || category == null) {
        throw new Error("Missing the required parameter 'category' when calling createCategory");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryResponse;

      return this.apiClient.callApi(
        '/catalog/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates an image on a category. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ImageResponse} if callback is null
     */
    this.createCategoryImage = function(categoryId, imageFile, opts, callback) {
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling createCategoryImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createCategoryImage");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a product `Metafield`.
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param {module:Model/MetafieldPost} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.createCategoryMetafield = function(categoryId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling createCategoryMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createCategoryMetafield");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `ComplexRule`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/ComplexRulePost} complexRule `ComplexRule` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ComplexRuleResponse} if callback is null
     */
    this.createComplexRule = function(productId, complexRule, opts, callback) {
      var postBody = complexRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createComplexRule");
      }

      // verify the required parameter 'complexRule' is set
      if (complexRule == undefined || complexRule == null) {
        throw new Error("Missing the required parameter 'complexRule' when calling createComplexRule");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `ConfigurableField`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/ConfigurableFieldPost} configurableField `ConfigurableField` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ConfigurableFieldResponse} if callback is null
     */
    this.createConfigurableField = function(productId, configurableField, opts, callback) {
      var postBody = configurableField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createConfigurableField");
      }

      // verify the required parameter 'configurableField' is set
      if (configurableField == undefined || configurableField == null) {
        throw new Error("Missing the required parameter 'configurableField' when calling createConfigurableField");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `CustomField`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/CustomFieldPost} customField `CustomField` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CustomFieldResponse} if callback is null
     */
    this.createCustomField = function(productId, customField, opts, callback) {
      var postBody = customField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createCustomField");
      }

      // verify the required parameter 'customField' is set
      if (customField == undefined || customField == null) {
        throw new Error("Missing the required parameter 'customField' when calling createCustomField");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `Modifier`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/ModifierPost} modifier A `Modifier` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierResponse} if callback is null
     */
    this.createModifier = function(productId, modifier, opts, callback) {
      var postBody = modifier;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createModifier");
      }

      // verify the required parameter 'modifier' is set
      if (modifier == undefined || modifier == null) {
        throw new Error("Missing the required parameter 'modifier' when calling createModifier");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Adds an image to a modifier value; the image will show on the storefront when the value is selected.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {Number} valueId The ID of the `Modifier`. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ImageResponse} if callback is null
     */
    this.createModifierImage = function(productId, modifierId, valueId, imageFile, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createModifierImage");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling createModifierImage");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling createModifierImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createModifierImage");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `ModifierValue`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {module:Model/ModifierValuePost} modifierValue A `ModifierValue` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierValueResponse} if callback is null
     */
    this.createModifierValue = function(productId, modifierId, modifierValue, opts, callback) {
      var postBody = modifierValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createModifierValue");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling createModifierValue");
      }

      // verify the required parameter 'modifierValue' is set
      if (modifierValue == undefined || modifierValue == null) {
        throw new Error("Missing the required parameter 'modifierValue' when calling createModifierValue");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates an `Option`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/OptionPost} option An `Option` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionResponse} if callback is null
     */
    this.createOption = function(productId, option, opts, callback) {
      var postBody = option;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createOption");
      }

      // verify the required parameter 'option' is set
      if (option == undefined || option == null) {
        throw new Error("Missing the required parameter 'option' when calling createOption");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `OptionValue`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param {module:Model/OptionValuePost} optionValue A `OptionValue` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionValueResponse} if callback is null
     */
    this.createOptionValue = function(productId, optionId, optionValue, opts, callback) {
      var postBody = optionValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createOptionValue");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling createOptionValue");
      }

      // verify the required parameter 'optionValue' is set
      if (optionValue == undefined || optionValue == null) {
        throw new Error("Missing the required parameter 'optionValue' when calling createOptionValue");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `Product` in the BigCommerce Catalog. 
     * @param {module:Model/ProductPost} product A BigCommerce `Product` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductResponse} if callback is null
     */
    this.createProduct = function(product, opts, callback) {
      var postBody = product;

      // verify the required parameter 'product' is set
      if (product == undefined || product == null) {
        throw new Error("Missing the required parameter 'product' when calling createProduct");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductResponse;

      return this.apiClient.callApi(
        '/catalog/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates an image on a product. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/ProductImagePost} productImage A BigCommerce `ProductImage` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductImageResponse} if callback is null
     */
    this.createProductImage = function(productId, productImage, opts, callback) {
      var postBody = productImage;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductImage");
      }

      // verify the required parameter 'productImage' is set
      if (productImage == undefined || productImage == null) {
        throw new Error("Missing the required parameter 'productImage' when calling createProductImage");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a product `Metafield`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/MetafieldPost} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.createProductMetafield = function(productId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createProductMetafield");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a product review. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/ProductReviewPost} productReview A BigCommerce `ProductReview` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductReviewResponse} if callback is null
     */
    this.createProductReview = function(productId, productReview, opts, callback) {
      var postBody = productReview;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductReview");
      }

      // verify the required parameter 'productReview' is set
      if (productReview == undefined || productReview == null) {
        throw new Error("Missing the required parameter 'productReview' when calling createProductReview");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a video on a product, using a video ID from a host site. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/ProductVideoPost} productVideo A BigCommerce `ProductVideo` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductVideoResponse} if callback is null
     */
    this.createProductVideo = function(productId, productVideo, opts, callback) {
      var postBody = productVideo;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductVideo");
      }

      // verify the required parameter 'productVideo' is set
      if (productVideo == undefined || productVideo == null) {
        throw new Error("Missing the required parameter 'productVideo' when calling createProductVideo");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a `Variant` object.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/VariantPost} variant `Variant` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/VariantResponse} if callback is null
     */
    this.createVariant = function(productId, variant, opts, callback) {
      var postBody = variant;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariant");
      }

      // verify the required parameter 'variant' is set
      if (variant == undefined || variant == null) {
        throw new Error("Missing the required parameter 'variant' when calling createVariant");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {File} imageFile An image file. Supported MIME types include GIF, JPEG, and PNG. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ImageResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ImageResponse} if callback is null
     */
    this.createVariantImage = function(productId, variantId, imageFile, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariantImage");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling createVariantImage");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile == undefined || imageFile == null) {
        throw new Error("Missing the required parameter 'imageFile' when calling createVariantImage");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image_file': imageFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates a variant `Metafield`.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Model/MetafieldPost} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.createVariantMetafield = function(productId, variantId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariantMetafield");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling createVariantMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling createVariantMetafield");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Brand` from the BigCommerce Catalog. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteBrandById = function(brandId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling deleteBrandById");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Brand` image from the BigCommerce Catalog. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteBrandImage = function(brandId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling deleteBrandImage");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Metafield`. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteBrandMetafieldById = function(metafieldId, brandId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteBrandMetafieldById");
      }

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling deleteBrandMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes one or more `Brand` objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteBrands = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'page_title': opts['pageTitle']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/brands', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `BulkPricingRule`, based on the `product_id` and `bulk_pricing_rule_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} bulkPricingRuleId The ID of the `BulkPricingRule`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteBulkPricingRuleById = function(productId, bulkPricingRuleId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteBulkPricingRuleById");
      }

      // verify the required parameter 'bulkPricingRuleId' is set
      if (bulkPricingRuleId == undefined || bulkPricingRuleId == null) {
        throw new Error("Missing the required parameter 'bulkPricingRuleId' when calling deleteBulkPricingRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'bulk_pricing_rule_id': bulkPricingRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes one or more `Category` objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {Number} opts.parentId Filter items by parent_id. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param {String} opts.keyword Filter items by keywords. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteCategories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'parent_id': opts['parentId'],
        'page_title': opts['pageTitle'],
        'keyword': opts['keyword'],
        'is_visible': opts['isVisible']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes one or more `Category` objects from the BigCommerce catalog. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteCategoryById = function(categoryId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCategoryById");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Category` image from the BigCommerce Catalog. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteCategoryImage = function(categoryId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCategoryImage");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Metafield`. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteCategoryMetafieldById = function(metafieldId, categoryId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteCategoryMetafieldById");
      }

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCategoryMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `ComplexRule`, based on the `product_id` and `complex_rule_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} complexRuleId The ID of the `ComplexRule`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteComplexRuleById = function(productId, complexRuleId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteComplexRuleById");
      }

      // verify the required parameter 'complexRuleId' is set
      if (complexRuleId == undefined || complexRuleId == null) {
        throw new Error("Missing the required parameter 'complexRuleId' when calling deleteComplexRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'complex_rule_id': complexRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules/{complex_rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `ConfigurableField`, based on the `product_id` and `configurable_field_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} configurableFieldId The ID of the `ConfigurableField`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteConfigurableFieldById = function(productId, configurableFieldId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteConfigurableFieldById");
      }

      // verify the required parameter 'configurableFieldId' is set
      if (configurableFieldId == undefined || configurableFieldId == null) {
        throw new Error("Missing the required parameter 'configurableFieldId' when calling deleteConfigurableFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'configurable_field_id': configurableFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `CustomField`, based on the `product_id` and `custom_field_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} customFieldId The ID of the `CustomField`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteCustomFieldById = function(productId, customFieldId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteCustomFieldById");
      }

      // verify the required parameter 'customFieldId' is set
      if (customFieldId == undefined || customFieldId == null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling deleteCustomFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'custom_field_id': customFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields/{custom_field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `Modifier` based on the `product_id` and `modifier_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteModifierById = function(productId, modifierId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteModifierById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling deleteModifierById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes the image that was set to show when the modifier value is selected.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {Number} valueId The ID of the `Modifier`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteModifierImage = function(productId, modifierId, valueId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteModifierImage");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling deleteModifierImage");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling deleteModifierImage");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `ModifierValue` based on the `product_id`, `modifier_id`, and `value_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {Number} valueId The ID of the `Modifier/Option Value`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteModifierValueById = function(productId, modifierId, valueId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteModifierValueById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling deleteModifierValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling deleteModifierValueById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `Option`, based on the `product_id` and `option_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteOptionById = function(productId, optionId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteOptionById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteOptionById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a Product's `OptionValue` based on the `product_id`, `option_id`, and `value_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param {Number} valueId The ID of the `Modifier/Option Value`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteOptionValueById = function(productId, optionId, valueId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteOptionValueById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteOptionValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling deleteOptionValueById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values/{value_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Product` object from the BigCommerce Catalog. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteProductById = function(productId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductById");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `ProductImage` in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} imageId The ID of the `Image` that is being operated on. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteProductImage = function(productId, imageId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteProductImage");
      }


      var pathParams = {
        'product_id': productId,
        'image_id': imageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images/{image_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Metafield`. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteProductMetafieldById = function(metafieldId, productId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteProductMetafieldById");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `ProductReview` in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} reviewId The ID of the `review` that is being operated on. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteProductReview = function(productId, reviewId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId == undefined || reviewId == null) {
        throw new Error("Missing the required parameter 'reviewId' when calling deleteProductReview");
      }


      var pathParams = {
        'product_id': productId,
        'review_id': reviewId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews/{review_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `ProductVideo` in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {String} videoId The ID of the `Video` that is being operated on. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteProductVideo = function(productId, videoId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductVideo");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteProductVideo");
      }


      var pathParams = {
        'product_id': productId,
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes one or more `Product` objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.sku Filter items by sku. 
     * @param {Number} opts.price Filter items by price. 
     * @param {Number} opts.weight Filter items by weight. 
     * @param {Number} opts.condition Filter items by condition. 
     * @param {Number} opts.brandId Filter items by brand_id. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {Date} opts.dateLastImported Filter items by date_last_imported. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param {Number} opts.isFeatured Filter items by is_featured. 
     * @param {Number} opts.inventoryLevel Filter items by inventory_level. 
     * @param {Number} opts.totalSold Filter items by total_sold. 
     * @param {String} opts.type Filter items by type: `physical` or `digital`. 
     * @param {Number} opts.categories Filter items by categories. 
     * @param {String} opts.keyword Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteProducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'sku': opts['sku'],
        'price': opts['price'],
        'weight': opts['weight'],
        'condition': opts['condition'],
        'brand_id': opts['brandId'],
        'date_modified': opts['dateModified'],
        'date_last_imported': opts['dateLastImported'],
        'is_visible': opts['isVisible'],
        'is_featured': opts['isFeatured'],
        'inventory_level': opts['inventoryLevel'],
        'total_sold': opts['totalSold'],
        'type': opts['type'],
        'categories': opts['categories'],
        'keyword': opts['keyword']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Variant`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteVariantById = function(productId, variantId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteVariantById");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling deleteVariantById");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a `Metafield`. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteVariantMetafieldById = function(metafieldId, productId, variantId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling deleteVariantMetafieldById");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteVariantMetafieldById");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling deleteVariantMetafieldById");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Brand` object.
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BrandResponse} if callback is null
     */
    this.getBrandById = function(brandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandById");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield`, by `category_id`. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.getBrandMetafieldByBrandId = function(metafieldId, brandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getBrandMetafieldByBrandId");
      }

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandMetafieldByBrandId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'brand_id': brandId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield` object list, by `brand_id`. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield's key. 
     * @param {String} opts.namespace Filter based on a metafield's key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetaFieldCollectionResponse} if callback is null
     */
    this.getBrandMetafieldsByBrandId = function(brandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandMetafieldsByBrandId");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets `Brand` objects. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BrandCollectionResponse} if callback is null
     */
    this.getBrands = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'page_title': opts['pageTitle'],
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/brands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `BulkPricingRule` by `product_id` and `bulk_pricing_rule_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} bulkPricingRuleId The ID of the `BulkPricingRule`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BulkPricingRuleResponse} if callback is null
     */
    this.getBulkPricingRuleById = function(productId, bulkPricingRuleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getBulkPricingRuleById");
      }

      // verify the required parameter 'bulkPricingRuleId' is set
      if (bulkPricingRuleId == undefined || bulkPricingRuleId == null) {
        throw new Error("Missing the required parameter 'bulkPricingRuleId' when calling getBulkPricingRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'bulk_pricing_rule_id': bulkPricingRuleId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `BulkPricingRule` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BulkPricingRuleCollectionResponse} if callback is null
     */
    this.getBulkPricingRules = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getBulkPricingRules");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a paginated categories collection from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter items by name. 
     * @param {Number} opts.parentId Filter items by parent_id. 
     * @param {String} opts.pageTitle Filter items by page_title. 
     * @param {String} opts.keyword Filter items by keywords. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CategoryCollectionResponse} if callback is null
     */
    this.getCategories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'parent_id': opts['parentId'],
        'page_title': opts['pageTitle'],
        'keyword': opts['keyword'],
        'is_visible': opts['isVisible'],
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a `Category` from the BigCommerce Catalog. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CategoryResponse} if callback is null
     */
    this.getCategoryById = function(categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryById");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield` by category_id. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.getCategoryMetafieldByCategoryId = function(metafieldId, categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getCategoryMetafieldByCategoryId");
      }

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryMetafieldByCategoryId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'category_id': categoryId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield` object list, by category_id. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield's key. 
     * @param {String} opts.namespace Filter based on a metafield's key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetaFieldCollectionResponse} if callback is null
     */
    this.getCategoryMetafieldsByCategoryId = function(categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryMetafieldsByCategoryId");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns the categories tree, a nested lineage of the categories with parent->child relationship. The `Category` objects returned are simplified versions of the category objects returned in the rest of this API. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryTreeCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CategoryTreeCollectionResponse} if callback is null
     */
    this.getCategoryTree = function(opts, callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryTreeCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/categories/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `ComplexRule` by product_id. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} complexRuleId The ID of the `ComplexRule`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ComplexRuleResponse} if callback is null
     */
    this.getComplexRuleById = function(productId, complexRuleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getComplexRuleById");
      }

      // verify the required parameter 'complexRuleId' is set
      if (complexRuleId == undefined || complexRuleId == null) {
        throw new Error("Missing the required parameter 'complexRuleId' when calling getComplexRuleById");
      }


      var pathParams = {
        'product_id': productId,
        'complex_rule_id': complexRuleId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules/{complex_rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `ComplexRule` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ComplexRuleCollectionResponse} if callback is null
     */
    this.getComplexRules = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getComplexRules");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `ConfigurableField` by `product_id` and `configurable_field_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} configurableFieldId The ID of the `ConfigurableField`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ConfigurableFieldResponse} if callback is null
     */
    this.getConfigurableFieldById = function(productId, configurableFieldId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getConfigurableFieldById");
      }

      // verify the required parameter 'configurableFieldId' is set
      if (configurableFieldId == undefined || configurableFieldId == null) {
        throw new Error("Missing the required parameter 'configurableFieldId' when calling getConfigurableFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'configurable_field_id': configurableFieldId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `ConfigurableField` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ConfigurableFieldCollectionResponse} if callback is null
     */
    this.getConfigurableFields = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getConfigurableFields");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `CustomField` by `product_id` and `custom_field_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} customFieldId The ID of the `CustomField`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CustomFieldResponse} if callback is null
     */
    this.getCustomFieldById = function(productId, customFieldId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getCustomFieldById");
      }

      // verify the required parameter 'customFieldId' is set
      if (customFieldId == undefined || customFieldId == null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling getCustomFieldById");
      }


      var pathParams = {
        'product_id': productId,
        'custom_field_id': customFieldId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields/{custom_field_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `CustomField` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CustomFieldCollectionResponse} if callback is null
     */
    this.getCustomFields = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getCustomFields");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Modifier` by product_id and modifier_id. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierResponse} if callback is null
     */
    this.getModifierById = function(productId, modifierId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifierById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling getModifierById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `ModifierValue` by `product_id`, `modifier_id`, and `value_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {Number} valueId The ID of the `Modifier/Option Value`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierValueResponse} if callback is null
     */
    this.getModifierValueById = function(productId, modifierId, valueId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifierValueById");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling getModifierValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling getModifierValueById");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `ModifierValue` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierValueCollectionResponse} if callback is null
     */
    this.getModifierValues = function(productId, modifierId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifierValues");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling getModifierValues");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `Modifier` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierCollectionResponse} if callback is null
     */
    this.getModifiers = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getModifiers");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets `Option` object by product ID and option ID.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionResponse} if callback is null
     */
    this.getOptionById = function(productId, optionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptionById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling getOptionById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `OptionValue` by `product_id`, `option_id`, and `value_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param {Number} valueId The ID of the `Modifier/Option Value`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionValueResponse} if callback is null
     */
    this.getOptionValueById = function(productId, optionId, valueId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptionValueById");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling getOptionValueById");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling getOptionValueById");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'value_id': valueId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values/{value_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `OptionValue` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionValueCollectionResponse} if callback is null
     */
    this.getOptionValues = function(productId, optionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptionValues");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling getOptionValues");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets an array of `Option` objects.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionCollectionResponse} if callback is null
     */
    this.getOptions = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOptions");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a `Product` from the BigCommerce Catalog. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include `variants`, `images`, 'primary_image`, `custom_fields`, and `bulk_pricing_rules`. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.priceListId The ID of the `Price List`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductResponse} if callback is null
     */
    this.getProductById = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductById");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include': opts['include'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'price_list_id': opts['priceListId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets image on a product. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} imageId The ID of the `Image` that is being operated on. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductImageResponse} if callback is null
     */
    this.getProductImageById = function(productId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductImageById");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling getProductImageById");
      }


      var pathParams = {
        'product_id': productId,
        'image_id': imageId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images/{image_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets all images on a product. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductImageCollectionResponse} if callback is null
     */
    this.getProductImages = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductImages");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield`, by `product_id`. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.getProductMetafieldByProductId = function(metafieldId, productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getProductMetafieldByProductId");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductMetafieldByProductId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield` object list, by `product_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield's key. 
     * @param {String} opts.namespace Filter based on a metafield's key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetaFieldCollectionResponse} if callback is null
     */
    this.getProductMetafieldsByProductId = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductMetafieldsByProductId");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a product review. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} reviewId The ID of the `review` that is being operated on. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductReviewResponse} if callback is null
     */
    this.getProductReviewById = function(productId, reviewId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductReviewById");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId == undefined || reviewId == null) {
        throw new Error("Missing the required parameter 'reviewId' when calling getProductReviewById");
      }


      var pathParams = {
        'product_id': productId,
        'review_id': reviewId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews/{review_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets all reviews on a product. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductReviewCollectionResponse} if callback is null
     */
    this.getProductReviews = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductReviews");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets video on a product. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {String} videoId The ID of the `Video` that is being operated on. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductVideoResponse} if callback is null
     */
    this.getProductVideoById = function(productId, videoId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductVideoById");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling getProductVideoById");
      }


      var pathParams = {
        'product_id': productId,
        'video_id': videoId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets all videos on a product. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductVideoCollectionResponse} if callback is null
     */
    this.getProductVideos = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductVideos");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a paginated collection of `Products` objects from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Filter items by id. 
     * @param {String} opts.name Filter items by name. 
     * @param {String} opts.sku Filter items by sku. 
     * @param {String} opts.upc Filter items by upc. 
     * @param {Number} opts.price Filter items by price. 
     * @param {Number} opts.weight Filter items by weight. 
     * @param {Number} opts.condition Filter items by condition. 
     * @param {Number} opts.brandId Filter items by brand_id. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {Date} opts.dateLastImported Filter items by date_last_imported. 
     * @param {Number} opts.isVisible Filter items by is_visible. 
     * @param {Number} opts.isFeatured Filter items by is_featured. 
     * @param {Number} opts.isFreeShipping Filter items by is_free_shipping. 
     * @param {Number} opts.inventoryLevel Filter items by inventory_level. 
     * @param {Number} opts.inventoryLow Filter items by inventory_low. Values: 1, 0. 
     * @param {Number} opts.outOfStock Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. 
     * @param {Number} opts.totalSold Filter items by total_sold. 
     * @param {String} opts.type Filter items by type: `physical` or `digital`. 
     * @param {Number} opts.categories Filter items by categories. 
     * @param {String} opts.keyword Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. 
     * @param {String} opts.keywordContext Set context for a product search. 
     * @param {Number} opts.status Filter items by status. 
     * @param {String} opts.include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include `variants`, `images`, 'primary_image`, `custom_fields`, and `bulk_pricing_rules`. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param {String} opts.availability Filter items by availability. Values are: available, disabled, preorder. 
     * @param {Number} opts.priceListId The ID of the `Price List`. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.direction Sort direction. Acceptable values are: `asc`, `desc`. 
     * @param {String} opts.sort Field name to sort by. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductCollectionResponse} if callback is null
     */
    this.getProducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'sku': opts['sku'],
        'upc': opts['upc'],
        'price': opts['price'],
        'weight': opts['weight'],
        'condition': opts['condition'],
        'brand_id': opts['brandId'],
        'date_modified': opts['dateModified'],
        'date_last_imported': opts['dateLastImported'],
        'is_visible': opts['isVisible'],
        'is_featured': opts['isFeatured'],
        'is_free_shipping': opts['isFreeShipping'],
        'inventory_level': opts['inventoryLevel'],
        'inventory_low': opts['inventoryLow'],
        'out_of_stock': opts['outOfStock'],
        'total_sold': opts['totalSold'],
        'type': opts['type'],
        'categories': opts['categories'],
        'keyword': opts['keyword'],
        'keyword_context': opts['keywordContext'],
        'status': opts['status'],
        'include': opts['include'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields'],
        'availability': opts['availability'],
        'price_list_id': opts['priceListId'],
        'page': opts['page'],
        'limit': opts['limit'],
        'direction': opts['direction'],
        'sort': opts['sort']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Variant` object.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/VariantResponse} if callback is null
     */
    this.getVariantById = function(productId, variantId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantById");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getVariantById");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield`, by `product_id` and `variant_id`. 
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.getVariantMetafieldByProductIdAndVariantId = function(metafieldId, productId, variantId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling getVariantMetafieldByProductIdAndVariantId");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantMetafieldByProductIdAndVariantId");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getVariantMetafieldByProductIdAndVariantId");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a `Metafield` object list, by `product_id` and `variant_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.key Filter based on a metafield's key. 
     * @param {String} opts.namespace Filter based on a metafield's key. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetaFieldCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetaFieldCollectionResponse} if callback is null
     */
    this.getVariantMetafieldsByProductIdAndVariantId = function(productId, variantId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantMetafieldsByProductIdAndVariantId");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getVariantMetafieldsByProductIdAndVariantId");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'key': opts['key'],
        'namespace': opts['namespace'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaFieldCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a `Variant` object list from the BigCommerce Catalog. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Filter items by id. 
     * @param {String} opts.sku Filter items by sku. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/VariantCollectionResponse} if callback is null
     */
    this.getVariants = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'sku': opts['sku'],
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a `Variant` object list from the BigCommerce Catalog. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.includeFields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. 
     * @param {String} opts.excludeFields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/VariantCollectionResponse} if callback is null
     */
    this.getVariantsByProductId = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantsByProductId");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'include_fields': opts['includeFields'],
        'exclude_fields': opts['excludeFields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantCollectionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Brand` in the BigCommerce Catalog. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param {module:Model/BrandPut} brand Returns a `Brand` from the BigCommerce Catalog. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BrandResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BrandResponse} if callback is null
     */
    this.updateBrand = function(brandId, brand, opts, callback) {
      var postBody = brand;

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling updateBrand");
      }

      // verify the required parameter 'brand' is set
      if (brand == undefined || brand == null) {
        throw new Error("Missing the required parameter 'brand' when calling updateBrand");
      }


      var pathParams = {
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BrandResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Metafield` object.
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} brandId The ID of the `Brand` to which the resource belongs. 
     * @param {module:Model/MetafieldPut} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.updateBrandMetafield = function(metafieldId, brandId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateBrandMetafield");
      }

      // verify the required parameter 'brandId' is set
      if (brandId == undefined || brandId == null) {
        throw new Error("Missing the required parameter 'brandId' when calling updateBrandMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateBrandMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'brand_id': brandId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/brands/{brand_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `BulkPricingRule`, based on the `product_id` and `bulk_pricing_rule_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} bulkPricingRuleId The ID of the `BulkPricingRule`. 
     * @param {module:Model/BulkPricingRulePut} bulkPricingRule `BulkPricingRule` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/BulkPricingRuleResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/BulkPricingRuleResponse} if callback is null
     */
    this.updateBulkPricingRule = function(productId, bulkPricingRuleId, bulkPricingRule, opts, callback) {
      var postBody = bulkPricingRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateBulkPricingRule");
      }

      // verify the required parameter 'bulkPricingRuleId' is set
      if (bulkPricingRuleId == undefined || bulkPricingRuleId == null) {
        throw new Error("Missing the required parameter 'bulkPricingRuleId' when calling updateBulkPricingRule");
      }

      // verify the required parameter 'bulkPricingRule' is set
      if (bulkPricingRule == undefined || bulkPricingRule == null) {
        throw new Error("Missing the required parameter 'bulkPricingRule' when calling updateBulkPricingRule");
      }


      var pathParams = {
        'product_id': productId,
        'bulk_pricing_rule_id': bulkPricingRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkPricingRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Category` in the BigCommerce Catalog. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param {module:Model/CategoryPut} category A BigCommerce `Category` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CategoryResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CategoryResponse} if callback is null
     */
    this.updateCategory = function(categoryId, category, opts, callback) {
      var postBody = category;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling updateCategory");
      }

      // verify the required parameter 'category' is set
      if (category == undefined || category == null) {
        throw new Error("Missing the required parameter 'category' when calling updateCategory");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Metafield` object.
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} categoryId The ID of the `Category` to which the resource belongs. 
     * @param {module:Model/MetafieldPut} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.updateCategoryMetafield = function(metafieldId, categoryId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateCategoryMetafield");
      }

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling updateCategoryMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateCategoryMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'category_id': categoryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/categories/{category_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `ComplexRule`, based on the `product_id` and `complex_rule_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} complexRuleId The ID of the `ComplexRule`. 
     * @param {module:Model/ComplexRulePut} complexRule `ComplexRule` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ComplexRuleResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ComplexRuleResponse} if callback is null
     */
    this.updateComplexRule = function(productId, complexRuleId, complexRule, opts, callback) {
      var postBody = complexRule;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateComplexRule");
      }

      // verify the required parameter 'complexRuleId' is set
      if (complexRuleId == undefined || complexRuleId == null) {
        throw new Error("Missing the required parameter 'complexRuleId' when calling updateComplexRule");
      }

      // verify the required parameter 'complexRule' is set
      if (complexRule == undefined || complexRule == null) {
        throw new Error("Missing the required parameter 'complexRule' when calling updateComplexRule");
      }


      var pathParams = {
        'product_id': productId,
        'complex_rule_id': complexRuleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComplexRuleResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/complex-rules/{complex_rule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `ConfigurableField`, based on the `product_id` and `configurable_field_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} configurableFieldId The ID of the `ConfigurableField`. 
     * @param {module:Model/ConfigurableFieldPut} configurableField `ConfigurableField` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ConfigurableFieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ConfigurableFieldResponse} if callback is null
     */
    this.updateConfigurableField = function(productId, configurableFieldId, configurableField, opts, callback) {
      var postBody = configurableField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateConfigurableField");
      }

      // verify the required parameter 'configurableFieldId' is set
      if (configurableFieldId == undefined || configurableFieldId == null) {
        throw new Error("Missing the required parameter 'configurableFieldId' when calling updateConfigurableField");
      }

      // verify the required parameter 'configurableField' is set
      if (configurableField == undefined || configurableField == null) {
        throw new Error("Missing the required parameter 'configurableField' when calling updateConfigurableField");
      }


      var pathParams = {
        'product_id': productId,
        'configurable_field_id': configurableFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigurableFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `CustomField`, based on the `product_id` and `custom_field_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} customFieldId The ID of the `CustomField`. 
     * @param {module:Model/CustomFieldPut} customField `CustomField` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/CustomFieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CustomFieldResponse} if callback is null
     */
    this.updateCustomField = function(productId, customFieldId, customField, opts, callback) {
      var postBody = customField;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateCustomField");
      }

      // verify the required parameter 'customFieldId' is set
      if (customFieldId == undefined || customFieldId == null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling updateCustomField");
      }

      // verify the required parameter 'customField' is set
      if (customField == undefined || customField == null) {
        throw new Error("Missing the required parameter 'customField' when calling updateCustomField");
      }


      var pathParams = {
        'product_id': productId,
        'custom_field_id': customFieldId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomFieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/custom-fields/{custom_field_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `Modifier` based on the `product_id` and `modifier_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {module:Model/ModifierPut} modifier A BigCommerce `Modifier` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierResponse} if callback is null
     */
    this.updateModifier = function(productId, modifierId, modifier, opts, callback) {
      var postBody = modifier;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateModifier");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling updateModifier");
      }

      // verify the required parameter 'modifier' is set
      if (modifier == undefined || modifier == null) {
        throw new Error("Missing the required parameter 'modifier' when calling updateModifier");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `ModifierValue` based on the `product_id`, `modifier_id`, and `value_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} modifierId The ID of the `Modifier`. 
     * @param {Number} valueId The ID of the `Modifier/Option Value`. 
     * @param {module:Model/ModifierValuePut} modifierValue A BigCommerce `ModifierValue` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ModifierValueResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ModifierValueResponse} if callback is null
     */
    this.updateModifierValue = function(productId, modifierId, valueId, modifierValue, opts, callback) {
      var postBody = modifierValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateModifierValue");
      }

      // verify the required parameter 'modifierId' is set
      if (modifierId == undefined || modifierId == null) {
        throw new Error("Missing the required parameter 'modifierId' when calling updateModifierValue");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling updateModifierValue");
      }

      // verify the required parameter 'modifierValue' is set
      if (modifierValue == undefined || modifierValue == null) {
        throw new Error("Missing the required parameter 'modifierValue' when calling updateModifierValue");
      }


      var pathParams = {
        'product_id': productId,
        'modifier_id': modifierId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModifierValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `Option`, based on the `product_id` and `option_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param {module:Model/OptionPut} option A BigCommerce `Option` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionResponse} if callback is null
     */
    this.updateOption = function(productId, optionId, option, opts, callback) {
      var postBody = option;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateOption");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling updateOption");
      }

      // verify the required parameter 'option' is set
      if (option == undefined || option == null) {
        throw new Error("Missing the required parameter 'option' when calling updateOption");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a Product's `OptionValue` based on the `product_id`, `option_id`, and `value_id`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} optionId The ID of the `Option`. 
     * @param {Number} valueId The ID of the `Modifier/Option Value`. 
     * @param {module:Model/OptionValuePut} optionValue A BigCommerce `OptionValue` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OptionValueResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OptionValueResponse} if callback is null
     */
    this.updateOptionValue = function(productId, optionId, valueId, optionValue, opts, callback) {
      var postBody = optionValue;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateOptionValue");
      }

      // verify the required parameter 'optionId' is set
      if (optionId == undefined || optionId == null) {
        throw new Error("Missing the required parameter 'optionId' when calling updateOptionValue");
      }

      // verify the required parameter 'valueId' is set
      if (valueId == undefined || valueId == null) {
        throw new Error("Missing the required parameter 'valueId' when calling updateOptionValue");
      }

      // verify the required parameter 'optionValue' is set
      if (optionValue == undefined || optionValue == null) {
        throw new Error("Missing the required parameter 'optionValue' when calling updateOptionValue");
      }


      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'value_id': valueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OptionValueResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/options/{option_id}/values/{value_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Product` in the BigCommerce Catalog. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/ProductPut} product A BigCommerce `Product` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductResponse} if callback is null
     */
    this.updateProduct = function(productId, product, opts, callback) {
      var postBody = product;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProduct");
      }

      // verify the required parameter 'product' is set
      if (product == undefined || product == null) {
        throw new Error("Missing the required parameter 'product' when calling updateProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates an image on a product. Publicly accessible URLs and files (form post) are valid parameters. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} imageId The ID of the `Image` that is being operated on. 
     * @param {module:Model/ProductImagePut} productImage A BigCommerce `ProductImage` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductImageResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductImageResponse} if callback is null
     */
    this.updateProductImage = function(productId, imageId, productImage, opts, callback) {
      var postBody = productImage;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling updateProductImage");
      }

      // verify the required parameter 'productImage' is set
      if (productImage == undefined || productImage == null) {
        throw new Error("Missing the required parameter 'productImage' when calling updateProductImage");
      }


      var pathParams = {
        'product_id': productId,
        'image_id': imageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductImageResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/images/{image_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Metafield` object.
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {module:Model/MetafieldPut} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.updateProductMetafield = function(metafieldId, productId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateProductMetafield");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateProductMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a product review. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} reviewId The ID of the `review` that is being operated on. 
     * @param {module:Model/ProductReviewPut} productReview A BigCommerce `ProductReview` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductReviewResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductReviewResponse} if callback is null
     */
    this.updateProductReview = function(productId, reviewId, productReview, opts, callback) {
      var postBody = productReview;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId == undefined || reviewId == null) {
        throw new Error("Missing the required parameter 'reviewId' when calling updateProductReview");
      }

      // verify the required parameter 'productReview' is set
      if (productReview == undefined || productReview == null) {
        throw new Error("Missing the required parameter 'productReview' when calling updateProductReview");
      }


      var pathParams = {
        'product_id': productId,
        'review_id': reviewId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductReviewResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/reviews/{review_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a video on a product. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {String} videoId The ID of the `Video` that is being operated on. 
     * @param {module:Model/ProductVideoPut} productVideo A BigCommerce `ProductVideo` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ProductVideoResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ProductVideoResponse} if callback is null
     */
    this.updateProductVideo = function(productId, videoId, productVideo, opts, callback) {
      var postBody = productVideo;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProductVideo");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateProductVideo");
      }

      // verify the required parameter 'productVideo' is set
      if (productVideo == undefined || productVideo == null) {
        throw new Error("Missing the required parameter 'productVideo' when calling updateProductVideo");
      }


      var pathParams = {
        'product_id': productId,
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductVideoResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Variant` object.
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Model/VariantPut} variant A `Variant` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/VariantResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/VariantResponse} if callback is null
     */
    this.updateVariant = function(productId, variantId, variant, opts, callback) {
      var postBody = variant;

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateVariant");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling updateVariant");
      }

      // verify the required parameter 'variant' is set
      if (variant == undefined || variant == null) {
        throw new Error("Missing the required parameter 'variant' when calling updateVariant");
      }


      var pathParams = {
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariantResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a `Metafield` object.
     * @param {Number} metafieldId The ID of the `Metafield`. 
     * @param {Number} productId The ID of the `Product` to which the resource belongs. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {module:Model/MetafieldPut} metafield A `Metafield` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/MetafieldResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetafieldResponse} if callback is null
     */
    this.updateVariantMetafield = function(metafieldId, productId, variantId, metafield, opts, callback) {
      var postBody = metafield;

      // verify the required parameter 'metafieldId' is set
      if (metafieldId == undefined || metafieldId == null) {
        throw new Error("Missing the required parameter 'metafieldId' when calling updateVariantMetafield");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling updateVariantMetafield");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling updateVariantMetafield");
      }

      // verify the required parameter 'metafield' is set
      if (metafield == undefined || metafield == null) {
        throw new Error("Missing the required parameter 'metafield' when calling updateVariantMetafield");
      }


      var pathParams = {
        'metafield_id': metafieldId,
        'product_id': productId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetafieldResponse;

      return this.apiClient.callApi(
        '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
