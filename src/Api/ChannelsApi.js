/**
 * BigCommerce Channels API
 * The Channels API enables you to create and manage listings across a BigCommerce merchant's sales channels.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ChannelCollectionResponse', 'Model/ChannelResponse', 'Model/CreateChannelRequest', 'Model/Listing', 'Model/ListingCollectionResponse', 'Model/ListingResponse', 'Model/UpdateChannelRequest', 'Model/UpdateListingRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ChannelCollectionResponse'), require('../Model/ChannelResponse'), require('../Model/CreateChannelRequest'), require('../Model/Listing'), require('../Model/ListingCollectionResponse'), require('../Model/ListingResponse'), require('../Model/UpdateChannelRequest'), require('../Model/UpdateListingRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceChannelsApi) {
      root.BigCommerceChannelsApi = {};
    }
    root.BigCommerceChannelsApi.ChannelsApi = factory(root.BigCommerceChannelsApi.ApiClient, root.BigCommerceChannelsApi.ChannelCollectionResponse, root.BigCommerceChannelsApi.ChannelResponse, root.BigCommerceChannelsApi.CreateChannelRequest, root.BigCommerceChannelsApi.Listing, root.BigCommerceChannelsApi.ListingCollectionResponse, root.BigCommerceChannelsApi.ListingResponse, root.BigCommerceChannelsApi.UpdateChannelRequest, root.BigCommerceChannelsApi.UpdateListingRequest);
  }
}(this, function(ApiClient, ChannelCollectionResponse, ChannelResponse, CreateChannelRequest, Listing, ListingCollectionResponse, ListingResponse, UpdateChannelRequest, UpdateListingRequest) {
  'use strict';

  /**
   * Channels service.
   * @module Api/ChannelsApi
   * @version 1.0
   */

  /**
   * Constructs a new ChannelsApi. 
   * @alias module:Api/ChannelsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:Api/ChannelsApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Channel
     * @param {module:Model/CreateChannelRequest} body 
     * @param {module:Api/ChannelsApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ChannelResponse}
     */
    this.createChannel = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createChannel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelResponse;

      return this.apiClient.callApi(
        '/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelListings operation.
     * @callback module:Api/ChannelsApi~createChannelListingsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ListingCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Channel Listings
     * @param {Number} channelId 
     * @param {Array.<module:Model/Listing>} body If state is omitted in the variants object, it inherits the top-level state
     * @param {module:Api/ChannelsApi~createChannelListingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ListingCollectionResponse}
     */
    this.createChannelListings = function(channelId, body, callback) {
      var postBody = body;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling createChannelListings");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createChannelListings");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListingCollectionResponse;

      return this.apiClient.callApi(
        '/channels/{channelId}/listings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannel operation.
     * @callback module:Api/ChannelsApi~getChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Channel
     * @param {Number} channelId The ID of a Channel that&#39;s available through GET /channels
     * @param {module:Api/ChannelsApi~getChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ChannelResponse}
     */
    this.getChannel = function(channelId, callback) {
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannel");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelResponse;

      return this.apiClient.callApi(
        '/channels/{channelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelListing operation.
     * @callback module:Api/ChannelsApi~getChannelListingCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ListingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Channel Listing
     * @param {Number} channelId 
     * @param {Number} listingId The ID of a Channel Listing that&#39;s available through GET /channels/listings
     * @param {module:Api/ChannelsApi~getChannelListingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ListingResponse}
     */
    this.getChannelListing = function(channelId, listingId, callback) {
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelListing");
      }

      // verify the required parameter 'listingId' is set
      if (listingId == undefined || listingId == null) {
        throw new Error("Missing the required parameter 'listingId' when calling getChannelListing");
      }


      var pathParams = {
        'channelId': channelId,
        'listingId': listingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListingResponse;

      return this.apiClient.callApi(
        '/channels/{channelId}/listings/{listingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelListings operation.
     * @callback module:Api/ChannelsApi~listChannelListingsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ListingCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Channels Listings
     * @param {Number} channelId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {Number} opts.after Specifies the prior ID number in a limited (paginated) list of listings. 
     * @param {module:Api/ChannelsApi~listChannelListingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ListingCollectionResponse}
     */
    this.listChannelListings = function(channelId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling listChannelListings");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
        'limit': opts['limit'],
        'after': opts['after']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListingCollectionResponse;

      return this.apiClient.callApi(
        '/channels/{channelId}/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannels operation.
     * @callback module:Api/ChannelsApi~listChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ChannelCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Channels
     * @param {module:Api/ChannelsApi~listChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ChannelCollectionResponse}
     */
    this.listChannels = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCollectionResponse;

      return this.apiClient.callApi(
        '/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:Api/ChannelsApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Channel
     * @param {Number} channelId The ID of a Channel that&#39;s available through GET /channels
     * @param {module:Model/UpdateChannelRequest} body 
     * @param {module:Api/ChannelsApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ChannelResponse}
     */
    this.updateChannel = function(channelId, body, callback) {
      var postBody = body;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannel");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateChannel");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelResponse;

      return this.apiClient.callApi(
        '/channels/{channelId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelListings operation.
     * @callback module:Api/ChannelsApi~updateChannelListingsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ListingCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Channel Listings
     * @param {Number} channelId 
     * @param {Array.<module:Model/UpdateListingRequest>} body 
     * @param {module:Api/ChannelsApi~updateChannelListingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ListingCollectionResponse}
     */
    this.updateChannelListings = function(channelId, body, callback) {
      var postBody = body;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannelListings");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateChannelListings");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListingCollectionResponse;

      return this.apiClient.callApi(
        '/channels/{channelId}/listings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
