/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Order Transactions API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/NoContent', 'Model/NotFound', 'Model/TransactionCollectionResponse', 'Model/TransactionPost', 'Model/TransactionResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/NoContent'), require('../Model/NotFound'), require('../Model/TransactionCollectionResponse'), require('../Model/TransactionPost'), require('../Model/TransactionResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.OrderTransactionsApi = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.NoContent, root.BigCommerceApi.NotFound, root.BigCommerceApi.TransactionCollectionResponse, root.BigCommerceApi.TransactionPost, root.BigCommerceApi.TransactionResponse);
  }
}(this, function(ApiClient, NoContent, NotFound, TransactionCollectionResponse, TransactionPost, TransactionResponse) {
  'use strict';

  /**
   * OrderTransactions service.
   * @module Api/OrderTransactionsApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new OrderTransactionsApi. 
   * @alias module:Api/OrderTransactionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:Api/OrderTransactionsApi~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/TransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new &#x60;Transaction&#x60; related to a BigCommerce Order. 
     * @param {Number} orderId The ID of the &#x60;Order&#x60; to which the transactions belong. 
     * @param {module:Model/TransactionPost} transaction A BigCommerce &#x60;Transaction&#x60; object. 
     * @param {module:Api/OrderTransactionsApi~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/TransactionResponse}
     */
    this.createTransaction = function(orderId, transaction, callback) {
      var postBody = transaction;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling createTransaction");
      }

      // verify the required parameter 'transaction' is set
      if (transaction == undefined || transaction == null) {
        throw new Error("Missing the required parameter 'transaction' when calling createTransaction");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/orders/{order_id}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:Api/OrderTransactionsApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/TransactionCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a collection of &#x60;Transaction&#x60; objects related to a BigCommerce Order. 
     * @param {Number} orderId The ID of the &#x60;Order&#x60; to which the transactions belong. 
     * @param {module:Api/OrderTransactionsApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/TransactionCollectionResponse}
     */
    this.getTransactions = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getTransactions");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionCollectionResponse;

      return this.apiClient.callApi(
        '/orders/{order_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
