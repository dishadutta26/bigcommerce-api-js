/**
 * Orders APIs
 * Orders APIs integrate with point-of-sale, shipping, distribution, and inventory-management systems.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Order', 'Model/OrderCoupon', 'Model/OrderMessage', 'Model/OrderProduct', 'Model/OrderRequest', 'Model/OrderShipment', 'Model/OrderShipmentCount', 'Model/OrderShipmentRequest', 'Model/OrderShippingAddress', 'Model/OrderStatus', 'Model/OrderTax', 'Model/OrdersCountResponse', 'Model/ShippingQuote'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/Order'), require('../Model/OrderCoupon'), require('../Model/OrderMessage'), require('../Model/OrderProduct'), require('../Model/OrderRequest'), require('../Model/OrderShipment'), require('../Model/OrderShipmentCount'), require('../Model/OrderShipmentRequest'), require('../Model/OrderShippingAddress'), require('../Model/OrderStatus'), require('../Model/OrderTax'), require('../Model/OrdersCountResponse'), require('../Model/ShippingQuote'));
  } else {
    // Browser globals (root is window)
    if (!root.OrdersApIs) {
      root.OrdersApIs = {};
    }
    root.OrdersApIs.OrdersApi = factory(root.OrdersApIs.ApiClient, root.OrdersApIs.Order, root.OrdersApIs.OrderCoupon, root.OrdersApIs.OrderMessage, root.OrdersApIs.OrderProduct, root.OrdersApIs.OrderRequest, root.OrdersApIs.OrderShipment, root.OrdersApIs.OrderShipmentCount, root.OrdersApIs.OrderShipmentRequest, root.OrdersApIs.OrderShippingAddress, root.OrdersApIs.OrderStatus, root.OrdersApIs.OrderTax, root.OrdersApIs.OrdersCountResponse, root.OrdersApIs.ShippingQuote);
  }
}(this, function(ApiClient, Order, OrderCoupon, OrderMessage, OrderProduct, OrderRequest, OrderShipment, OrderShipmentCount, OrderShipmentRequest, OrderShippingAddress, OrderStatus, OrderTax, OrdersCountResponse, ShippingQuote) {
  'use strict';

  /**
   * Orders service.
   * @module Api/OrdersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OrdersApi. 
   * @alias module:Api/OrdersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an Order
     * Create an Order
     * @param {module:Model/OrderRequest} body 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/Order}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Order} if callback is null
     */
    this.createOrder = function(body, opts, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Create A New Order Shipment
     * Creates an Order Shipment.
     * @param {Number} orderId ID of the order
     * @param {module:Model/OrderShipmentRequest} body 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OrderShipment}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OrderShipment} if callback is null
     */
    this.createOrderShipment = function(orderId, body, opts, callback) {
      var postBody = body;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling createOrderShipment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createOrderShipment");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderShipment;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Delete All Order Shipments
     * Deletes all shipments associated with an order.
     * @param {Number} orderId ID of the order
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteAllOrderShipments = function(orderId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteAllOrderShipments");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Delete All Orders
     * Archives all orders.
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteAllOrders = function(opts, callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Archive an Order
     * Archives an order.  Any attempt to archive an order on a store with automatic tax enabled will fail, and will return `405 Method not allowed.`
     * @param {Number} orderId ID of the order
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteOrder = function(orderId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Delete an Order Shipment
     * Deletes a shipment associated with an order.
     * @param {Number} orderId ID of the order
     * @param {Number} shipmentId Shipment ID
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteOrderShipment = function(orderId, shipmentId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrderShipment");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling deleteOrderShipment");
      }


      var pathParams = {
        'order_id': orderId,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipments/{shipment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get an Order
     * Gets the collection of orders.
     * @param {Number} orderId ID of the order
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/Order}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Order} if callback is null
     */
    this.getOrder = function(orderId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get a Count of Orders
     * Gets an array of the orders in the store organized by order status.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OrdersCountResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OrdersCountResponse} if callback is null
     */
    this.getOrderCount = function(opts, callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrdersCountResponse;

      return this.apiClient.callApi(
        '/orders/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * List Order Coupons
     * Lists all order coupons. Optional parameters can be passed in.
     * @param {Number} orderId ID of the order
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return in the response.
     * @param {Number} opts.limit Number of results to return.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/OrderCoupon>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/OrderCoupon>} if callback is null
     */
    this.getOrderCoupons = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderCoupons");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderCoupon];

      return this.apiClient.callApi(
        '/orders/{order_id}/coupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get Order Messages
     * Gets the messages associated with an order.
     * @param {String} orderId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minId The minimum order ID.
     * @param {Number} opts.maxId The maximum order ID.
     * @param {Number} opts.customerId Customer ID
     * @param {String} opts.minDateCreated Minimum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`  ISO-8601: `2017-04-20T11:32:00.000-04:00`
     * @param {String} opts.maxDateCreated Maximum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`  ISO-8601: `2017-04-20T11:32:00.000-04:00`
     * @param {Boolean} opts.isFlagged If the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages).
     * @param {String} opts.status Status of the order message.
     * @param {Number} opts.page The page to return in the response.
     * @param {Number} opts.limit Number of results to return.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/OrderMessage>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/OrderMessage>} if callback is null
     */
    this.getOrderMessages = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderMessages");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'min_id': opts['minId'],
        'max_id': opts['maxId'],
        'customer_id': opts['customerId'],
        'min_date_created': opts['minDateCreated'],
        'max_date_created': opts['maxDateCreated'],
        'is_flagged': opts['isFlagged'],
        'status': opts['status'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderMessage];

      return this.apiClient.callApi(
        '/orders/{order_id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get an Order Product
     * Gets a product line item associated with the order.
     * @param {Number} orderId ID of the order
     * @param {Number} productId ID of the product
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OrderProduct}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OrderProduct} if callback is null
     */
    this.getOrderProduct = function(orderId, productId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getOrderProduct");
      }


      var pathParams = {
        'order_id': orderId,
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderProduct;

      return this.apiClient.callApi(
        '/orders/{order_id}/products/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * List Order Products
     * Lists all order products on an order using `order_id`. By default, items sort from lowest to highest according to a newly created ID, separate from the `order_id` and the `product_id`.
     * @param {Number} orderId ID of the order
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return in the response.
     * @param {Number} opts.limit Number of results to return.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/OrderProduct>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/OrderProduct>} if callback is null
     */
    this.getOrderProducts = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderProducts");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderProduct];

      return this.apiClient.callApi(
        '/orders/{order_id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get a Shipment
     * Gets an order shipment. 
     * @param {Number} orderId ID of the order
     * @param {Number} shipmentId Shipment ID
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OrderShipment}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OrderShipment} if callback is null
     */
    this.getOrderShipment = function(orderId, shipmentId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderShipment");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getOrderShipment");
      }


      var pathParams = {
        'order_id': orderId,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderShipment;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipments/{shipment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get A List of Order Shipments
     * Gets a list of all shipments on an order
     * @param {Number} orderId ID of the order
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return in the response.
     * @param {Number} opts.limit Number of results to return.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/OrderShipment>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/OrderShipment>} if callback is null
     */
    this.getOrderShipments = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderShipments");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderShipment];

      return this.apiClient.callApi(
        '/orders/{order_id}/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get All Order Taxes
     * Gets all order taxes using `order_id`. Each tax applied to an order. This information can be useful for reporting purposes.  Pass in the query parameter `?details=true` to return extra details about order taxes. `order_product_id` and `line_item_type` are also returned  All values are read-only.
     * @param {Number} orderId ID of the order
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return in the response.
     * @param {Number} opts.limit Number of results to return.
     * @param {String} opts.details To return detailed tax information, pass in the details query. (default to true)
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/OrderTax>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/OrderTax>} if callback is null
     */
    this.getOrderTaxes = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderTaxes");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'details': opts['details']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderTax];

      return this.apiClient.callApi(
        '/orders/{order_id}/taxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get A Count of Shipments Per Order
     * Gets a count of the number of shipments that have been made for a single order.
     * @param {Number} orderId ID of the order
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OrderShipmentCount}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OrderShipmentCount} if callback is null
     */
    this.getShipmentCount = function(orderId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getShipmentCount");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderShipmentCount;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipments/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get a Shipping Address
     * Gets a shipping address associated with an order.  Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote. 
     * @param {String} orderId 
     * @param {String} id 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OrderShippingAddress}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OrderShippingAddress} if callback is null
     */
    this.getShippingAddress = function(orderId, id, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getShippingAddress");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getShippingAddress");
      }


      var pathParams = {
        'order_id': orderId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderShippingAddress;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipping_addresses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get a Shipping Quote
     * Gets any shipping quotes assocated to an order.   This is a read only enpoint and the output can vary based on the shipping quote. A shipping quote can only be generated using the storefront at this time. Orders that are created in the control panel or via api return a 204 for this endpoint since a shipping quote is not generated during that process.
     * @param {Number} orderId ID of the order
     * @param {Number} shippingAddressId Shipping address ID
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ShippingQuote}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ShippingQuote} if callback is null
     */
    this.getShippingQuote = function(orderId, shippingAddressId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling getShippingQuote");
      }

      // verify the required parameter 'shippingAddressId' is set
      if (shippingAddressId == undefined || shippingAddressId == null) {
        throw new Error("Missing the required parameter 'shippingAddressId' when calling getShippingQuote");
      }


      var pathParams = {
        'order_id': orderId,
        'shipping_address_id': shippingAddressId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShippingQuote;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipping_addresses/{shipping_address_id}/shipping_quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get All Order Statuses
     * Gets a list of order statues.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/OrderStatus>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/OrderStatus>} if callback is null
     */
    this.listOrderStatuses = function(opts, callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderStatus];

      return this.apiClient.callApi(
        '/order_statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * List Orders
     * Gets a list of orders using the filter query
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minId The minimum order ID.
     * @param {Number} opts.maxId The maximum order ID.
     * @param {Number} opts.minTotal The minimum order total in float format. eg. 12.50
     * @param {Number} opts.maxTotal The maximum order total in float format. eg. 12.50
     * @param {Number} opts.customerId Customer ID
     * @param {String} opts.email The email of the customer.
     * @param {Number} opts.statusId The staus ID of the order. You can get the status id from the `/orders` endpoints.
     * @param {String} opts.cartId The cart ID of the order.
     * @param {String} opts.paymentMethod The payment method used on the order.
     * @param {String} opts.minDateCreated Minimum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`  ISO-8601: `2017-04-20T11:32:00.000-04:00`
     * @param {String} opts.maxDateCreated Maximum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`  ISO-8601: `2017-04-20T11:32:00.000-04:00`
     * @param {String} opts.maxDateModified Maximum date the order was modified in RFC-2822 or ISO-8601.  RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`  ISO-8601: `2017-04-20T11:32:00.000-04:00`
     * @param {Number} opts.page The page to return in the response.
     * @param {Number} opts.limit Number of results to return.
     * @param {String} opts.sort Direction to sort orders asc or desc. Ex. sort=date_created:desc
     * @param {Boolean} opts.isDeleted If the order was deleted or archived.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/Order>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Order>} if callback is null
     */
    this.listOrders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'min_id': opts['minId'],
        'max_id': opts['maxId'],
        'min_total': opts['minTotal'],
        'max_total': opts['maxTotal'],
        'customer_id': opts['customerId'],
        'email': opts['email'],
        'status_id': opts['statusId'],
        'cart_id': opts['cartId'],
        'payment_method': opts['paymentMethod'],
        'min_date_created': opts['minDateCreated'],
        'max_date_created': opts['maxDateCreated'],
        'max_date_modified': opts['maxDateModified'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'is_deleted': opts['isDeleted']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get A List of Order Shipping Address
     * Get all shipping address on an order using the `order_id`.  Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote. 
     * @param {Number} orderId ID of the order
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return in the response.
     * @param {Number} opts.limit Number of results to return.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Model/OrderShippingAddress>}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/OrderShippingAddress>} if callback is null
     */
    this.listShippingAddresses = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling listShippingAddresses");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [OrderShippingAddress];

      return this.apiClient.callApi(
        '/orders/{order_id}/shipping_addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Update an Order
     * Update an Order
     * @param {module:Model/OrderRequest} body 
     * @param {Number} orderId ID of the order
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/Order}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Order} if callback is null
     */
    this.updateOrder = function(body, orderId, opts, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateOrder");
      }

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Update A Shipment
     * Updates an existing shipment associated with an order.
     * @param {Number} orderId ID of the order
     * @param {Number} shipmentId Shipment ID
     * @param {module:Model/OrderShipmentRequest} body 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/OrderShipment}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/OrderShipment} if callback is null
     */
    this.updateOrderShipment = function(orderId, shipmentId, body, opts, callback) {
      var postBody = body;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrderShipment");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling updateOrderShipment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateOrderShipment");
      }


      var pathParams = {
        'order_id': orderId,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderShipment;

      return this.apiClient.callApi(
        '/orders/{order_id}/shipments/{shipment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
