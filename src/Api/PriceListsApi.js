/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Price Lists API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ErrorResponse', 'Model/NoContent', 'Model/NotFound', 'Model/PriceListCollectionResponse', 'Model/PriceListPost', 'Model/PriceListPut', 'Model/PriceListResponse', 'Model/PriceRecordBatchErrorResponse', 'Model/PriceRecordCollectionPut', 'Model/PriceRecordCollectionResponse', 'Model/PriceRecordPut', 'Model/PriceRecordResponse', 'Model/SuccessBatchResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorResponse'), require('../Model/NoContent'), require('../Model/NotFound'), require('../Model/PriceListCollectionResponse'), require('../Model/PriceListPost'), require('../Model/PriceListPut'), require('../Model/PriceListResponse'), require('../Model/PriceRecordBatchErrorResponse'), require('../Model/PriceRecordCollectionPut'), require('../Model/PriceRecordCollectionResponse'), require('../Model/PriceRecordPut'), require('../Model/PriceRecordResponse'), require('../Model/SuccessBatchResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.PriceListsApi = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.ErrorResponse, root.BigCommerceApi.NoContent, root.BigCommerceApi.NotFound, root.BigCommerceApi.PriceListCollectionResponse, root.BigCommerceApi.PriceListPost, root.BigCommerceApi.PriceListPut, root.BigCommerceApi.PriceListResponse, root.BigCommerceApi.PriceRecordBatchErrorResponse, root.BigCommerceApi.PriceRecordCollectionPut, root.BigCommerceApi.PriceRecordCollectionResponse, root.BigCommerceApi.PriceRecordPut, root.BigCommerceApi.PriceRecordResponse, root.BigCommerceApi.SuccessBatchResponse);
  }
}(this, function(ApiClient, ErrorResponse, NoContent, NotFound, PriceListCollectionResponse, PriceListPost, PriceListPut, PriceListResponse, PriceRecordBatchErrorResponse, PriceRecordCollectionPut, PriceRecordCollectionResponse, PriceRecordPut, PriceRecordResponse, SuccessBatchResponse) {
  'use strict';

  /**
   * PriceLists service.
   * @module Api/PriceListsApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new PriceListsApi. 
   * @alias module:Api/PriceListsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a `Price List` in BigCommerce. 
     * @param {module:Model/PriceListPost} priceList A BigCommerce `PriceList` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceListResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceListResponse} if callback is null
     */
    this.createPriceList = function(priceList, opts, callback) {
      var postBody = priceList;

      // verify the required parameter 'priceList' is set
      if (priceList == undefined || priceList == null) {
        throw new Error("Missing the required parameter 'priceList' when calling createPriceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceListResponse;

      return this.apiClient.callApi(
        '/pricelists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes one `Price List` object from BigCommerce by its ID. Also removes all associated Price Records. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deletePriceList = function(priceListId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling deletePriceList");
      }


      var pathParams = {
        'price_list_id': priceListId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes one `Price Record` object from BigCommerce, by `variant_id`. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {String} currencyCode The currency code associated with the price record being acted upon. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deletePriceListRecord = function(priceListId, variantId, currencyCode, opts, callback) {
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling deletePriceListRecord");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling deletePriceListRecord");
      }

      // verify the required parameter 'currencyCode' is set
      if (currencyCode == undefined || currencyCode == null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling deletePriceListRecord");
      }


      var pathParams = {
        'price_list_id': priceListId,
        'variant_id': variantId,
        'currency_code': currencyCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records/{variant_id}/{currency_code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes one or more `Price Record` objects from BigCommerce using a filter. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.variantId The ID of the `Variant` whose prices were requested. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/NoContent}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/NoContent} if callback is null
     */
    this.deletePriceListRecordsByFilter = function(priceListId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling deletePriceListRecordsByFilter");
      }


      var pathParams = {
        'price_list_id': priceListId
      };
      var queryParams = {
        'variant_id': opts['variantId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NoContent;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes the collection of `Price Record` objects associated with a certain price list and variant ID. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deletePriceListRecordsByVariantId = function(priceListId, variantId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling deletePriceListRecordsByVariantId");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling deletePriceListRecordsByVariantId");
      }


      var pathParams = {
        'price_list_id': priceListId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records/{variant_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a set of `Price List` objects from BigCommerce using a filter. Also removes all associated Price Recordss. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Filter items by id. 
     * @param {String} opts.name Filter items by name. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deletePriceListsByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pricelists', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a `Price List` object from BigCommerce. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceListResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceListResponse} if callback is null
     */
    this.getPriceList = function(priceListId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling getPriceList");
      }


      var pathParams = {
        'price_list_id': priceListId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceListResponse;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a paginated collection of `Price List` objects from BigCommerce. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Filter items by id. 
     * @param {String} opts.name Filter items by name. 
     * @param {Date} opts.dateCreated Filter items by date_created. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceListCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceListCollectionResponse} if callback is null
     */
    this.getPriceListCollection = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'date_created': opts['dateCreated'],
        'date_modified': opts['dateModified'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceListCollectionResponse;

      return this.apiClient.callApi(
        '/pricelists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Returns a `Price Record` object from BigCommerce. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {String} currencyCode The currency code associated with the price record being acted upon. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceRecordResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceRecordResponse} if callback is null
     */
    this.getPriceListRecord = function(priceListId, variantId, currencyCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling getPriceListRecord");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getPriceListRecord");
      }

      // verify the required parameter 'currencyCode' is set
      if (currencyCode == undefined || currencyCode == null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling getPriceListRecord");
      }


      var pathParams = {
        'price_list_id': priceListId,
        'variant_id': variantId,
        'currency_code': currencyCode
      };
      var queryParams = {
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceRecordResponse;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records/{variant_id}/{currency_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Fetches the `Price Records` associated with a particular Price List, using a filter. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.variantId The ID of the `Variant` whose prices were requested. 
     * @param {String} opts.productId A comma-separated list of ids of `Product`s whose prices were requested. 
     * @param {String} opts.currency Filter items by currency. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.include Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. 
     * @param {Number} opts.price Filter items by price. 
     * @param {Number} opts.salePrice Filter items by sale_price. 
     * @param {Number} opts.retailPrice Filter items by retail_price. 
     * @param {Number} opts.mapPrice Filter items by map_price. 
     * @param {Number} opts.calculatedPrice Filter items by calculated_price. 
     * @param {Date} opts.dateCreated Filter items by date_created. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {String} opts.sku Filter items by sku. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceRecordCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceRecordCollectionResponse} if callback is null
     */
    this.getPriceListRecordCollection = function(priceListId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling getPriceListRecordCollection");
      }


      var pathParams = {
        'price_list_id': priceListId
      };
      var queryParams = {
        'variant_id': opts['variantId'],
        'product_id': opts['productId'],
        'currency': opts['currency'],
        'page': opts['page'],
        'limit': opts['limit'],
        'include': opts['include'],
        'price': opts['price'],
        'sale_price': opts['salePrice'],
        'retail_price': opts['retailPrice'],
        'map_price': opts['mapPrice'],
        'calculated_price': opts['calculatedPrice'],
        'date_created': opts['dateCreated'],
        'date_modified': opts['dateModified'],
        'sku': opts['sku']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceRecordCollectionResponse;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Fetches an array of `Price Records` matching a particular Price List and Variant ID. Will contain any set price records by currency. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceRecordCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceRecordCollectionResponse} if callback is null
     */
    this.getPriceListRecordsByVariantId = function(priceListId, variantId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling getPriceListRecordsByVariantId");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling getPriceListRecordsByVariantId");
      }


      var pathParams = {
        'price_list_id': priceListId,
        'variant_id': variantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceRecordCollectionResponse;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records/{variant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates or updates a single `Price Record` object. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {Number} variantId ID of the variant on a product, or on an associated Price List Record. 
     * @param {String} currencyCode The currency code associated with the price record being acted upon. 
     * @param {module:Model/PriceRecordPut} priceRecord A BigCommerce `Price Record` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceRecordResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceRecordResponse} if callback is null
     */
    this.setPriceListRecord = function(priceListId, variantId, currencyCode, priceRecord, opts, callback) {
      var postBody = priceRecord;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling setPriceListRecord");
      }

      // verify the required parameter 'variantId' is set
      if (variantId == undefined || variantId == null) {
        throw new Error("Missing the required parameter 'variantId' when calling setPriceListRecord");
      }

      // verify the required parameter 'currencyCode' is set
      if (currencyCode == undefined || currencyCode == null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling setPriceListRecord");
      }

      // verify the required parameter 'priceRecord' is set
      if (priceRecord == undefined || priceRecord == null) {
        throw new Error("Missing the required parameter 'priceRecord' when calling setPriceListRecord");
      }


      var pathParams = {
        'price_list_id': priceListId,
        'variant_id': variantId,
        'currency_code': currencyCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceRecordResponse;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records/{variant_id}/{currency_code}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Creates or updates a batch of `Price Records` associated with a particular Price List. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {module:Model/PriceRecordCollectionPut} priceRecordBatch A BigCommerce `Price Record` request. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xStrictMode Header that determines whether the Batch API operates in strict mode or not.  Strict mode will reject the entire request if any item in the batch has an error.  (default to 0)
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SuccessBatchResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SuccessBatchResponse} if callback is null
     */
    this.setPriceListRecordCollection = function(priceListId, priceRecordBatch, opts, callback) {
      opts = opts || {};
      var postBody = priceRecordBatch;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling setPriceListRecordCollection");
      }

      // verify the required parameter 'priceRecordBatch' is set
      if (priceRecordBatch == undefined || priceRecordBatch == null) {
        throw new Error("Missing the required parameter 'priceRecordBatch' when calling setPriceListRecordCollection");
      }


      var pathParams = {
        'price_list_id': priceListId
      };
      var queryParams = {
      };
      var headerParams = {
        'X-Strict-Mode': opts['xStrictMode']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessBatchResponse;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}/records', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a single `Price List` object. 
     * @param {Number} priceListId The ID of the `Price List` requested. 
     * @param {module:Model/PriceListPut} priceList A BigCommerce `Price List` object. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PriceListResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PriceListResponse} if callback is null
     */
    this.updatePriceList = function(priceListId, priceList, opts, callback) {
      var postBody = priceList;

      // verify the required parameter 'priceListId' is set
      if (priceListId == undefined || priceListId == null) {
        throw new Error("Missing the required parameter 'priceListId' when calling updatePriceList");
      }

      // verify the required parameter 'priceList' is set
      if (priceList == undefined || priceList == null) {
        throw new Error("Missing the required parameter 'priceList' when calling updatePriceList");
      }


      var pathParams = {
        'price_list_id': priceListId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PriceListResponse;

      return this.apiClient.callApi(
        '/pricelists/{price_list_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
