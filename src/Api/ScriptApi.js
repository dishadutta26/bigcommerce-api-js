/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Scripts API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ErrorResponse', 'Model/ScriptPost', 'Model/ScriptPut', 'Model/ScriptResponse', 'Model/ScriptsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorResponse'), require('../Model/ScriptPost'), require('../Model/ScriptPut'), require('../Model/ScriptResponse'), require('../Model/ScriptsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.ScriptApi = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.ErrorResponse, root.BigCommerceApi.ScriptPost, root.BigCommerceApi.ScriptPut, root.BigCommerceApi.ScriptResponse, root.BigCommerceApi.ScriptsResponse);
  }
}(this, function(ApiClient, ErrorResponse, ScriptPost, ScriptPut, ScriptResponse, ScriptsResponse) {
  'use strict';

  /**
   * Script service.
   * @module Api/ScriptApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new ScriptApi. 
   * @alias module:Api/ScriptApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a script.
     * @param {module:Model/ScriptPost} scriptBody 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ScriptResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ScriptResponse} if callback is null
     */
    this.createScript = function(scriptBody, opts, callback) {
      var postBody = scriptBody;

      // verify the required parameter 'scriptBody' is set
      if (scriptBody == undefined || scriptBody == null) {
        throw new Error("Missing the required parameter 'scriptBody' when calling createScript");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScriptResponse;

      return this.apiClient.callApi(
        '/content/scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a script.
     * @param {String} uuid The identifier for a specific script.
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteScript = function(uuid, opts, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteScript");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/content/scripts/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a script.
     * @param {String} uuid The identifier for a specific script.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ScriptResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ScriptResponse} if callback is null
     */
    this.getScript = function(uuid, opts, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling getScript");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScriptResponse;

      return this.apiClient.callApi(
        '/content/scripts/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets all scripts.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {String} opts.sort Scripts field name to sort by. 
     * @param {String} opts.direction Sort direction. Acceptable values are: `asc`, `desc`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ScriptsResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ScriptsResponse} if callback is null
     */
    this.getScripts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'direction': opts['direction']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScriptsResponse;

      return this.apiClient.callApi(
        '/content/scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Updates a script.
     * @param {String} uuid The identifier for a specific script.
     * @param {module:Model/ScriptPut} scriptBody 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ScriptResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ScriptResponse} if callback is null
     */
    this.updateScript = function(uuid, scriptBody, opts, callback) {
      var postBody = scriptBody;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateScript");
      }

      // verify the required parameter 'scriptBody' is set
      if (scriptBody == undefined || scriptBody == null) {
        throw new Error("Missing the required parameter 'scriptBody' when calling updateScript");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScriptResponse;

      return this.apiClient.callApi(
        '/content/scripts/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
