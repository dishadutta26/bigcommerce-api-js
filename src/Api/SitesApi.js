/**
 * Sites & Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Route', 'Model/RouteCollectionResponse', 'Model/RouteResponse', 'Model/Site', 'Model/SiteCreateRequest', 'Model/SiteResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/Route'), require('../Model/RouteCollectionResponse'), require('../Model/RouteResponse'), require('../Model/Site'), require('../Model/SiteCreateRequest'), require('../Model/SiteResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SitesRoutes) {
      root.SitesRoutes = {};
    }
    root.SitesRoutes.SitesApi = factory(root.SitesRoutes.ApiClient, root.SitesRoutes.Route, root.SitesRoutes.RouteCollectionResponse, root.SitesRoutes.RouteResponse, root.SitesRoutes.Site, root.SitesRoutes.SiteCreateRequest, root.SitesRoutes.SiteResponse);
  }
}(this, function(ApiClient, Route, RouteCollectionResponse, RouteResponse, Site, SiteCreateRequest, SiteResponse) {
  'use strict';

  /**
   * Sites service.
   * @module Api/SitesApi
   * @version 0.0.1
   */

  /**
   * Constructs a new SitesApi. 
   * @alias module:Api/SitesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteRoute operation.
     * @callback module:Api/SitesApi~deleteRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE Site Route
     * @param {String} siteId 
     * @param {String} id 
     * @param {module:Api/SitesApi~deleteRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRoute = function(siteId, id, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId == undefined || siteId == null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteRoute");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRoute");
      }


      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/routes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSite operation.
     * @callback module:Api/SitesApi~deleteSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE Site
     * @param {String} id 
     * @param {module:Api/SitesApi~deleteSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSite = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSite");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelSite operation.
     * @callback module:Api/SitesApi~getChannelSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET Channel Site
     * Alias of GET /sites?channel_id&#x3D;channel_id
     * @param {String} channelId 
     * @param {module:Api/SitesApi~getChannelSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SiteResponse}
     */
    this.getChannelSite = function(channelId, callback) {
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelSite");
      }


      var pathParams = {
        'channel_id': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteResponse;

      return this.apiClient.callApi(
        '/channels/{channel_id}/site', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSite operation.
     * @callback module:Api/SitesApi~getSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET Site
     * @param {String} id 
     * @param {module:Api/SitesApi~getSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SiteResponse}
     */
    this.getSite = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getSite");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteResponse;

      return this.apiClient.callApi(
        '/sites/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteRoute operation.
     * @callback module:Api/SitesApi~getSiteRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/RouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET Site Route
     * @param {String} siteId 
     * @param {String} id 
     * @param {module:Api/SitesApi~getSiteRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/RouteResponse}
     */
    this.getSiteRoute = function(siteId, id, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId == undefined || siteId == null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteRoute");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteRoute");
      }


      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RouteResponse;

      return this.apiClient.callApi(
        '/sites/{site_id}/routes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the indexSiteRoutes operation.
     * @callback module:Api/SitesApi~indexSiteRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/RouteCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET Site Routes
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter routes by a given resource type
     * @param {module:Api/SitesApi~indexSiteRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/RouteCollectionResponse}
     */
    this.indexSiteRoutes = function(siteId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId == undefined || siteId == null) {
        throw new Error("Missing the required parameter 'siteId' when calling indexSiteRoutes");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'type': opts['type']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RouteCollectionResponse;

      return this.apiClient.callApi(
        '/sites/{site_id}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postChannelSite operation.
     * @callback module:Api/SitesApi~postChannelSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST Channel Site
     * Alias of POST /sites
     * @param {String} channelId 
     * @param {module:Model/SiteCreateRequest} body 
     * @param {module:Api/SitesApi~postChannelSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SiteResponse}
     */
    this.postChannelSite = function(channelId, body, callback) {
      var postBody = body;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling postChannelSite");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postChannelSite");
      }


      var pathParams = {
        'channel_id': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteResponse;

      return this.apiClient.callApi(
        '/channels/{channel_id}/site', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSite operation.
     * @callback module:Api/SitesApi~postSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST Site
     * @param {module:Model/SiteCreateRequest} body 
     * @param {module:Api/SitesApi~postSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SiteResponse}
     */
    this.postSite = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postSite");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteResponse;

      return this.apiClient.callApi(
        '/sites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSiteRoute operation.
     * @callback module:Api/SitesApi~postSiteRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/RouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST Site Route
     * @param {String} siteId 
     * @param {module:Model/Route} body 
     * @param {module:Api/SitesApi~postSiteRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/RouteResponse}
     */
    this.postSiteRoute = function(siteId, body, callback) {
      var postBody = body;

      // verify the required parameter 'siteId' is set
      if (siteId == undefined || siteId == null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSiteRoute");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postSiteRoute");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RouteResponse;

      return this.apiClient.callApi(
        '/sites/{site_id}/routes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putChannelSite operation.
     * @callback module:Api/SitesApi~putChannelSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT Channel Site
     * @param {String} channelId 
     * @param {module:Model/Site} body 
     * @param {module:Api/SitesApi~putChannelSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SiteResponse}
     */
    this.putChannelSite = function(channelId, body, callback) {
      var postBody = body;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling putChannelSite");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling putChannelSite");
      }


      var pathParams = {
        'channel_id': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteResponse;

      return this.apiClient.callApi(
        '/channels/{channel_id}/site', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putSite operation.
     * @callback module:Api/SitesApi~putSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT Site
     * @param {String} id 
     * @param {module:Model/Site} body 
     * @param {module:Api/SitesApi~putSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SiteResponse}
     */
    this.putSite = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling putSite");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling putSite");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteResponse;

      return this.apiClient.callApi(
        '/sites/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putSiteRoute operation.
     * @callback module:Api/SitesApi~putSiteRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/RouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT Site Route
     * @param {String} siteId 
     * @param {String} id 
     * @param {module:Model/Route} body 
     * @param {module:Api/SitesApi~putSiteRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/RouteResponse}
     */
    this.putSiteRoute = function(siteId, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'siteId' is set
      if (siteId == undefined || siteId == null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSiteRoute");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling putSiteRoute");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling putSiteRoute");
      }


      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RouteResponse;

      return this.apiClient.callApi(
        '/sites/{site_id}/routes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
