/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Subscribers API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ErrorResponse', 'Model/NotFound', 'Model/SubscriberCollectionResponse', 'Model/SubscriberPost', 'Model/SubscriberPut', 'Model/SubscriberResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorResponse'), require('../Model/NotFound'), require('../Model/SubscriberCollectionResponse'), require('../Model/SubscriberPost'), require('../Model/SubscriberPut'), require('../Model/SubscriberResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.SubscribersApi = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.ErrorResponse, root.BigCommerceApi.NotFound, root.BigCommerceApi.SubscriberCollectionResponse, root.BigCommerceApi.SubscriberPost, root.BigCommerceApi.SubscriberPut, root.BigCommerceApi.SubscriberResponse);
  }
}(this, function(ApiClient, ErrorResponse, NotFound, SubscriberCollectionResponse, SubscriberPost, SubscriberPut, SubscriberResponse) {
  'use strict';

  /**
   * Subscribers service.
   * @module Api/SubscribersApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new SubscribersApi. 
   * @alias module:Api/SubscribersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSubscriber operation.
     * @callback module:Api/SubscribersApi~createSubscriberCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a &#x60;Subscriber&#x60; object. 
     * @param {module:Model/SubscriberPost} subscriber &#x60;Subscriber&#x60; object. 
     * @param {module:Api/SubscribersApi~createSubscriberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SubscriberResponse}
     */
    this.createSubscriber = function(subscriber, callback) {
      var postBody = subscriber;

      // verify the required parameter 'subscriber' is set
      if (subscriber == undefined || subscriber == null) {
        throw new Error("Missing the required parameter 'subscriber' when calling createSubscriber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubscriberResponse;

      return this.apiClient.callApi(
        '/customers/subscribers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscriberById operation.
     * @callback module:Api/SubscribersApi~deleteSubscriberByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a &#x60;Subscriber&#x60; object. 
     * @param {Number} subscriberId The ID of the &#x60;Subscriber&#x60; requested. 
     * @param {module:Api/SubscribersApi~deleteSubscriberByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSubscriberById = function(subscriberId, callback) {
      var postBody = null;

      // verify the required parameter 'subscriberId' is set
      if (subscriberId == undefined || subscriberId == null) {
        throw new Error("Missing the required parameter 'subscriberId' when calling deleteSubscriberById");
      }


      var pathParams = {
        'subscriber_id': subscriberId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/subscribers/{subscriber_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscribers operation.
     * @callback module:Api/SubscribersApi~deleteSubscribersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Subscriber or Subscribers from BigCommerce Customers. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Filter items by email. 
     * @param {String} opts.firstName Filter items by first_name. 
     * @param {String} opts.lastName Filter items by last_name. 
     * @param {String} opts.source Filter items by source. 
     * @param {Number} opts.orderId Filter items by order_id. 
     * @param {Date} opts.dateCreated Filter items by date_created. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {module:Api/SubscribersApi~deleteSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSubscribers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'email': opts['email'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'source': opts['source'],
        'order_id': opts['orderId'],
        'date_created': opts['dateCreated'],
        'date_modified': opts['dateModified']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/subscribers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriberById operation.
     * @callback module:Api/SubscribersApi~getSubscriberByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets &#x60;Subscriber&#x60; object.
     * @param {Number} subscriberId The ID of the &#x60;Subscriber&#x60; requested. 
     * @param {module:Api/SubscribersApi~getSubscriberByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SubscriberResponse}
     */
    this.getSubscriberById = function(subscriberId, callback) {
      var postBody = null;

      // verify the required parameter 'subscriberId' is set
      if (subscriberId == undefined || subscriberId == null) {
        throw new Error("Missing the required parameter 'subscriberId' when calling getSubscriberById");
      }


      var pathParams = {
        'subscriber_id': subscriberId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubscriberResponse;

      return this.apiClient.callApi(
        '/customers/subscribers/{subscriber_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscribers operation.
     * @callback module:Api/SubscribersApi~getSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SubscriberCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated Subscribers collection. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Filter items by email. 
     * @param {String} opts.firstName Filter items by first_name. 
     * @param {String} opts.lastName Filter items by last_name. 
     * @param {String} opts.source Filter items by source. 
     * @param {Number} opts.orderId Filter items by order_id. 
     * @param {Date} opts.dateCreated Filter items by date_created. 
     * @param {Date} opts.dateModified Filter items by date_modified. 
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products. 
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products. 
     * @param {module:Api/SubscribersApi~getSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SubscriberCollectionResponse}
     */
    this.getSubscribers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'email': opts['email'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'source': opts['source'],
        'order_id': opts['orderId'],
        'date_created': opts['dateCreated'],
        'date_modified': opts['dateModified'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubscriberCollectionResponse;

      return this.apiClient.callApi(
        '/customers/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscriber operation.
     * @callback module:Api/SubscribersApi~updateSubscriberCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/SubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a &#x60;Subscriber&#x60; object. 
     * @param {Number} subscriberId The ID of the &#x60;Subscriber&#x60; requested. 
     * @param {module:Model/SubscriberPut} subscriber Returns a &#x60;Subscriber&#x60; object. 
     * @param {module:Api/SubscribersApi~updateSubscriberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/SubscriberResponse}
     */
    this.updateSubscriber = function(subscriberId, subscriber, callback) {
      var postBody = subscriber;

      // verify the required parameter 'subscriberId' is set
      if (subscriberId == undefined || subscriberId == null) {
        throw new Error("Missing the required parameter 'subscriberId' when calling updateSubscriber");
      }

      // verify the required parameter 'subscriber' is set
      if (subscriber == undefined || subscriber == null) {
        throw new Error("Missing the required parameter 'subscriber' when calling updateSubscriber");
      }


      var pathParams = {
        'subscriber_id': subscriberId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubscriberResponse;

      return this.apiClient.callApi(
        '/customers/subscribers/{subscriber_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
