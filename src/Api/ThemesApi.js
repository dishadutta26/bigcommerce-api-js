/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Themes API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Activate', 'Model/ErrorResponse', 'Model/JobId', 'Model/JobResponse', 'Model/NoContent', 'Model/ThemeResponse', 'Model/ThemesCollectionResponse', 'Model/WhichThemeToDownload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/Activate'), require('../Model/ErrorResponse'), require('../Model/JobId'), require('../Model/JobResponse'), require('../Model/NoContent'), require('../Model/ThemeResponse'), require('../Model/ThemesCollectionResponse'), require('../Model/WhichThemeToDownload'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.ThemesApi = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.Activate, root.BigCommerceApi.ErrorResponse, root.BigCommerceApi.JobId, root.BigCommerceApi.JobResponse, root.BigCommerceApi.NoContent, root.BigCommerceApi.ThemeResponse, root.BigCommerceApi.ThemesCollectionResponse, root.BigCommerceApi.WhichThemeToDownload);
  }
}(this, function(ApiClient, Activate, ErrorResponse, JobId, JobResponse, NoContent, ThemeResponse, ThemesCollectionResponse, WhichThemeToDownload) {
  'use strict';

  /**
   * Themes service.
   * @module Api/ThemesApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new ThemesApi. 
   * @alias module:Api/ThemesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Activates a store theme.
     * @param {module:Model/Activate} body Request parameters.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/NoContent}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/NoContent} if callback is null
     */
    this.activateStoreTheme = function(body, opts, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling activateStoreTheme");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NoContent;

      return this.apiClient.callApi(
        '/themes/actions/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Deletes a specified store theme.
     * @param {String} themeId The theme identifier.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/NoContent}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/NoContent} if callback is null
     */
    this.deleteStoreTheme = function(themeId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'themeId' is set
      if (themeId == undefined || themeId == null) {
        throw new Error("Missing the required parameter 'themeId' when calling deleteStoreTheme");
      }


      var pathParams = {
        'theme_id': themeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NoContent;

      return this.apiClient.callApi(
        '/themes/{theme_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Downloads a specified store theme.
     * @param {String} themeId The theme identifier.
     * @param {module:Model/WhichThemeToDownload} which A BigCommerce object specifying which theme to download. One of: `original`: the original Marketplace or uploaded custom theme; `last_activated`: the theme version most recently applied to the store; `last_created`: the theme version most recently created. If `which` is missing or invalid in the request, its value will default to `last_activated`. 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/JobId}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/JobId} if callback is null
     */
    this.downloadTheme = function(themeId, which, opts, callback) {
      var postBody = which;

      // verify the required parameter 'themeId' is set
      if (themeId == undefined || themeId == null) {
        throw new Error("Missing the required parameter 'themeId' when calling downloadTheme");
      }

      // verify the required parameter 'which' is set
      if (which == undefined || which == null) {
        throw new Error("Missing the required parameter 'which' when calling downloadTheme");
      }


      var pathParams = {
        'theme_id': themeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobId;

      return this.apiClient.callApi(
        '/themes/{theme_id}/actions/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a specified job.
     * @param {String} jobId The job identifier.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/JobResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/JobResponse} if callback is null
     */
    this.getJob = function(jobId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId == undefined || jobId == null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJob");
      }


      var pathParams = {
        'job_id': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobResponse;

      return this.apiClient.callApi(
        '/themes/jobs/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets a specified store theme.
     * @param {String} themeId The theme identifier.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ThemeResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ThemeResponse} if callback is null
     */
    this.getStoreTheme = function(themeId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'themeId' is set
      if (themeId == undefined || themeId == null) {
        throw new Error("Missing the required parameter 'themeId' when calling getStoreTheme");
      }


      var pathParams = {
        'theme_id': themeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThemeResponse;

      return this.apiClient.callApi(
        '/themes/{theme_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Gets all store themes.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ThemesCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ThemesCollectionResponse} if callback is null
     */
    this.getStoreThemes = function(opts, callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThemesCollectionResponse;

      return this.apiClient.callApi(
        '/themes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Uploads a new theme to a BigCommerce store.
     * @param {File} file The file.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/JobId}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/JobId} if callback is null
     */
    this.uploadTheme = function(file, opts, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file == undefined || file == null) {
        throw new Error("Missing the required parameter 'file' when calling uploadTheme");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = JobId;

      return this.apiClient.callApi(
        '/themes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
