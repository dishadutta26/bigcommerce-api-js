/**
 * BigCommerce Widgets API
 * Widgets API allows developers to inject content into a BigCommerce theme.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/LayoutCollectionResponse', 'Model/LayoutRequest', 'Model/LayoutResponse', 'Model/PlacementRequest', 'Model/PlacementResponse', 'Model/PlacementsCollectionResponse', 'Model/ThemeRegionsCollectionResponse', 'Model/WidgetCollectionResponse', 'Model/WidgetRequest', 'Model/WidgetResponse', 'Model/WidgetTemplateRequest', 'Model/WidgetTemplateResponse', 'Model/WidgetTemplatesCollectionResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/LayoutCollectionResponse'), require('../Model/LayoutRequest'), require('../Model/LayoutResponse'), require('../Model/PlacementRequest'), require('../Model/PlacementResponse'), require('../Model/PlacementsCollectionResponse'), require('../Model/ThemeRegionsCollectionResponse'), require('../Model/WidgetCollectionResponse'), require('../Model/WidgetRequest'), require('../Model/WidgetResponse'), require('../Model/WidgetTemplateRequest'), require('../Model/WidgetTemplateResponse'), require('../Model/WidgetTemplatesCollectionResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceWidgetsApi) {
      root.BigCommerceWidgetsApi = {};
    }
    root.BigCommerceWidgetsApi.WidgetApi = factory(root.BigCommerceWidgetsApi.ApiClient, root.BigCommerceWidgetsApi.LayoutCollectionResponse, root.BigCommerceWidgetsApi.LayoutRequest, root.BigCommerceWidgetsApi.LayoutResponse, root.BigCommerceWidgetsApi.PlacementRequest, root.BigCommerceWidgetsApi.PlacementResponse, root.BigCommerceWidgetsApi.PlacementsCollectionResponse, root.BigCommerceWidgetsApi.ThemeRegionsCollectionResponse, root.BigCommerceWidgetsApi.WidgetCollectionResponse, root.BigCommerceWidgetsApi.WidgetRequest, root.BigCommerceWidgetsApi.WidgetResponse, root.BigCommerceWidgetsApi.WidgetTemplateRequest, root.BigCommerceWidgetsApi.WidgetTemplateResponse, root.BigCommerceWidgetsApi.WidgetTemplatesCollectionResponse);
  }
}(this, function(ApiClient, LayoutCollectionResponse, LayoutRequest, LayoutResponse, PlacementRequest, PlacementResponse, PlacementsCollectionResponse, ThemeRegionsCollectionResponse, WidgetCollectionResponse, WidgetRequest, WidgetResponse, WidgetTemplateRequest, WidgetTemplateResponse, WidgetTemplatesCollectionResponse) {
  'use strict';

  /**
   * Widget service.
   * @module Api/WidgetApi
   * @version 1.0.0
   */

  /**
   * Constructs a new WidgetApi. 
   * @alias module:Api/WidgetApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createLayout operation.
     * @callback module:Api/WidgetApi~createLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/LayoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Layout
     * Creates a Layout
     * @param {module:Model/LayoutRequest} body 
     * @param {module:Api/WidgetApi~createLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/LayoutResponse}
     */
    this.createLayout = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createLayout");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LayoutResponse;

      return this.apiClient.callApi(
        '/content/layouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPlacement operation.
     * @callback module:Api/WidgetApi~createPlacementCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/PlacementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Placement
     * Creates a Placement
     * @param {module:Model/PlacementRequest} body 
     * @param {module:Api/WidgetApi~createPlacementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PlacementResponse}
     */
    this.createPlacement = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createPlacement");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlacementResponse;

      return this.apiClient.callApi(
        '/content/placements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createWidget operation.
     * @callback module:Api/WidgetApi~createWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Widget
     * Creates a Widget
     * @param {module:Model/WidgetRequest} body 
     * @param {module:Api/WidgetApi~createWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetResponse}
     */
    this.createWidget = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createWidget");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetResponse;

      return this.apiClient.callApi(
        '/content/widgets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createWidgetTemplate operation.
     * @callback module:Api/WidgetApi~createWidgetTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Widget Template
     * Creates a Widget Template
     * @param {module:Model/WidgetTemplateRequest} body 
     * @param {module:Api/WidgetApi~createWidgetTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetTemplateResponse}
     */
    this.createWidgetTemplate = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createWidgetTemplate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetTemplateResponse;

      return this.apiClient.callApi(
        '/content/widget-templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLayout operation.
     * @callback module:Api/WidgetApi~deleteLayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Layout
     * Deletes a Layout
     * @param {String} uuid The identifier for a specific layout.
     * @param {module:Api/WidgetApi~deleteLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLayout = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteLayout");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/content/layouts/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlacement operation.
     * @callback module:Api/WidgetApi~deletePlacementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Placement
     * Deletes a Placement
     * @param {String} uuid The identifier for a specific placement.
     * @param {module:Api/WidgetApi~deletePlacementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePlacement = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling deletePlacement");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/content/placements/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWidget operation.
     * @callback module:Api/WidgetApi~deleteWidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Widget
     * Deletes a Widget
     * @param {String} uuid The identifier for a specific widget.
     * @param {module:Api/WidgetApi~deleteWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWidget = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteWidget");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/content/widgets/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWidgetTemplate operation.
     * @callback module:Api/WidgetApi~deleteWidgetTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete A Widget Template
     * Deletes a Widget Template
     * @param {String} uuid The identifier for a specific template.
     * @param {module:Api/WidgetApi~deleteWidgetTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWidgetTemplate = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteWidgetTemplate");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/content/widget-templates/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentRegions operation.
     * @callback module:Api/WidgetApi~getContentRegionsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/ThemeRegionsCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Theme Regions
     * Returns a list of unique Theme Regions in a template file.
     * @param {String} templateFile The template file
     * @param {module:Api/WidgetApi~getContentRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/ThemeRegionsCollectionResponse}
     */
    this.getContentRegions = function(templateFile, callback) {
      var postBody = null;

      // verify the required parameter 'templateFile' is set
      if (templateFile == undefined || templateFile == null) {
        throw new Error("Missing the required parameter 'templateFile' when calling getContentRegions");
      }


      var pathParams = {
      };
      var queryParams = {
        'templateFile': templateFile
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThemeRegionsCollectionResponse;

      return this.apiClient.callApi(
        '/content/regions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayout operation.
     * @callback module:Api/WidgetApi~getLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/LayoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Layout
     * Returns a single Layout
     * @param {String} uuid The identifier for a specific layout.
     * @param {module:Api/WidgetApi~getLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/LayoutResponse}
     */
    this.getLayout = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling getLayout");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LayoutResponse;

      return this.apiClient.callApi(
        '/content/layouts/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayouts operation.
     * @callback module:Api/WidgetApi~getLayoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/LayoutCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Layouts
     * Returns a list of Layouts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products.
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products.
     * @param {String} opts.templateFile The template file
     * @param {module:Api/WidgetApi~getLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/LayoutCollectionResponse}
     */
    this.getLayouts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'template_file': opts['templateFile']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LayoutCollectionResponse;

      return this.apiClient.callApi(
        '/content/layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlacement operation.
     * @callback module:Api/WidgetApi~getPlacementCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/PlacementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Placement
     * Returns a single Placement
     * @param {String} uuid The identifier for a specific placement.
     * @param {module:Api/WidgetApi~getPlacementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PlacementResponse}
     */
    this.getPlacement = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling getPlacement");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlacementResponse;

      return this.apiClient.callApi(
        '/content/placements/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlacements operation.
     * @callback module:Api/WidgetApi~getPlacementsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/PlacementsCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Placements
     * Returns a list of Placements
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products.
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products.
     * @param {String} opts.widgetTemplateKind The kind of widget template.
     * @param {String} opts.templateFile The template file
     * @param {String} opts.widgetUuid The identifier for a specific widget.
     * @param {String} opts.widgetTemplateUuid The identifier for a specific widget template.
     * @param {module:Api/WidgetApi~getPlacementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PlacementsCollectionResponse}
     */
    this.getPlacements = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'widget_template_kind': opts['widgetTemplateKind'],
        'template_file': opts['templateFile'],
        'widget_uuid': opts['widgetUuid'],
        'widget_template_uuid': opts['widgetTemplateUuid']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlacementsCollectionResponse;

      return this.apiClient.callApi(
        '/content/placements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidget operation.
     * @callback module:Api/WidgetApi~getWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Widget
     * Returns a single Widget
     * @param {String} uuid The identifier for a specific widget.
     * @param {module:Api/WidgetApi~getWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetResponse}
     */
    this.getWidget = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling getWidget");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetResponse;

      return this.apiClient.callApi(
        '/content/widgets/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetTemplate operation.
     * @callback module:Api/WidgetApi~getWidgetTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Widget Template
     * Return a single Widget Template
     * @param {String} uuid The identifier for a specific template.
     * @param {module:Api/WidgetApi~getWidgetTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetTemplateResponse}
     */
    this.getWidgetTemplate = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling getWidgetTemplate");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetTemplateResponse;

      return this.apiClient.callApi(
        '/content/widget-templates/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetTemplates operation.
     * @callback module:Api/WidgetApi~getWidgetTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetTemplatesCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Widget Templates
     * Returns a list of Widget Templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products.
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products.
     * @param {String} opts.widgetTemplateKind The kind of widget template.
     * @param {module:Api/WidgetApi~getWidgetTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetTemplatesCollectionResponse}
     */
    this.getWidgetTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'widget_template_kind': opts['widgetTemplateKind']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetTemplatesCollectionResponse;

      return this.apiClient.callApi(
        '/content/widget-templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgets operation.
     * @callback module:Api/WidgetApi~getWidgetsCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Widgets
     * Returns a list of Widgets
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page number in a limited (paginated) list of products.
     * @param {Number} opts.limit Controls the number of items per page in a limited (paginated) list of products.
     * @param {String} opts.widgetTemplateKind The kind of widget template.
     * @param {String} opts.widgetTemplateUuid The identifier for a specific widget template.
     * @param {module:Api/WidgetApi~getWidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetCollectionResponse}
     */
    this.getWidgets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'widget_template_kind': opts['widgetTemplateKind'],
        'widget_template_uuid': opts['widgetTemplateUuid']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetCollectionResponse;

      return this.apiClient.callApi(
        '/content/widgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLayout operation.
     * @callback module:Api/WidgetApi~updateLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/LayoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Layout
     * Updates a Layout
     * @param {String} uuid The identifier for a specific layout.
     * @param {module:Model/LayoutRequest} layoutBody 
     * @param {module:Api/WidgetApi~updateLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/LayoutResponse}
     */
    this.updateLayout = function(uuid, layoutBody, callback) {
      var postBody = layoutBody;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateLayout");
      }

      // verify the required parameter 'layoutBody' is set
      if (layoutBody == undefined || layoutBody == null) {
        throw new Error("Missing the required parameter 'layoutBody' when calling updateLayout");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LayoutResponse;

      return this.apiClient.callApi(
        '/content/layouts/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlacement operation.
     * @callback module:Api/WidgetApi~updatePlacementCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/PlacementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Placement
     * Updates a Placement
     * @param {String} uuid The identifier for a specific placement.
     * @param {module:Model/PlacementRequest} placementBody 
     * @param {module:Api/WidgetApi~updatePlacementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/PlacementResponse}
     */
    this.updatePlacement = function(uuid, placementBody, callback) {
      var postBody = placementBody;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling updatePlacement");
      }

      // verify the required parameter 'placementBody' is set
      if (placementBody == undefined || placementBody == null) {
        throw new Error("Missing the required parameter 'placementBody' when calling updatePlacement");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlacementResponse;

      return this.apiClient.callApi(
        '/content/placements/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWidget operation.
     * @callback module:Api/WidgetApi~updateWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Widget
     * Updates a Widget
     * @param {String} uuid The identifier for a specific widget.
     * @param {module:Model/WidgetRequest} body 
     * @param {module:Api/WidgetApi~updateWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetResponse}
     */
    this.updateWidget = function(uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateWidget");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateWidget");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetResponse;

      return this.apiClient.callApi(
        '/content/widgets/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWidgetTemplate operation.
     * @callback module:Api/WidgetApi~updateWidgetTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:Model/WidgetTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Widget Template
     * Updates a Widget Template
     * @param {String} uuid The identifier for a specific template.
     * @param {module:Model/WidgetTemplateRequest} body 
     * @param {module:Api/WidgetApi~updateWidgetTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WidgetTemplateResponse}
     */
    this.updateWidgetTemplate = function(uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid == undefined || uuid == null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateWidgetTemplate");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateWidgetTemplate");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetTemplateResponse;

      return this.apiClient.callApi(
        '/content/widget-templates/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
