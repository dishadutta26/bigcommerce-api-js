/**
 * Wishlist API
 * The Wishlist API allows a developer to create and manage customer Wishlists.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/WishlistAddItemsRequest', 'Model/WishlistCollectionResponse', 'Model/WishlistRequest', 'Model/WishlistResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/WishlistAddItemsRequest'), require('../Model/WishlistCollectionResponse'), require('../Model/WishlistRequest'), require('../Model/WishlistResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.WishlistApi) {
      root.WishlistApi = {};
    }
    root.WishlistApi.WishlistsApi = factory(root.WishlistApi.ApiClient, root.WishlistApi.WishlistAddItemsRequest, root.WishlistApi.WishlistCollectionResponse, root.WishlistApi.WishlistRequest, root.WishlistApi.WishlistResponse);
  }
}(this, function(ApiClient, WishlistAddItemsRequest, WishlistCollectionResponse, WishlistRequest, WishlistResponse) {
  'use strict';

  /**
   * Wishlists service.
   * @module Api/WishlistsApi
   * @version 1.0
   */

  /**
   * Constructs a new WishlistsApi. 
   * @alias module:Api/WishlistsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add Wishlist Item
     * Adds a Wishlist Item. More than one item can be added at a time.
     * @param {Number} wishlistId ID of the Wishlist
     * @param {Object} opts Optional parameters
     * @param {module:Model/WishlistAddItemsRequest} opts.body 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WishlistResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WishlistResponse} if callback is null
     */
    this.addWishlistItems = function(wishlistId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'wishlistId' is set
      if (wishlistId == undefined || wishlistId == null) {
        throw new Error("Missing the required parameter 'wishlistId' when calling addWishlistItems");
      }


      var pathParams = {
        'wishlist_id': wishlistId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WishlistResponse;

      return this.apiClient.callApi(
        '/wishlists/{wishlist_id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Create a Wishlist
     * Creates a Wishlist and Wishlist Item. More than one item can be added in the POST.
     * @param {module:Model/WishlistRequest} body 
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WishlistResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WishlistResponse} if callback is null
     */
    this.createWishlist = function(body, opts, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createWishlist");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WishlistResponse;

      return this.apiClient.callApi(
        '/wishlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Delete a Wishlist
     * Deletes a Wishlist
     * @param {Number} wishlistId ID of the Wishlist
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteWishlist = function(wishlistId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'wishlistId' is set
      if (wishlistId == undefined || wishlistId == null) {
        throw new Error("Missing the required parameter 'wishlistId' when calling deleteWishlist");
      }


      var pathParams = {
        'wishlist_id': wishlistId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/wishlists/{wishlist_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Delete Wishlist Item
     * Deletes a Wishlist Item
     * @param {Number} wishlistId ID of the Wishlist
     * @param {Number} itemId 
     * @param callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise} if callback is null
     */
    this.deleteWishlistItem = function(wishlistId, itemId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'wishlistId' is set
      if (wishlistId == undefined || wishlistId == null) {
        throw new Error("Missing the required parameter 'wishlistId' when calling deleteWishlistItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteWishlistItem");
      }


      var pathParams = {
        'wishlist_id': wishlistId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/wishlists/{wishlist_id}/items/{item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get a Wishlist
     * Returns a single Wishlist
     * @param {Number} wishlistId ID of the Wishlist
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WishlistResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WishlistResponse} if callback is null
     */
    this.getWishlist = function(wishlistId, opts, callback) {
      var postBody = null;

      // verify the required parameter 'wishlistId' is set
      if (wishlistId == undefined || wishlistId == null) {
        throw new Error("Missing the required parameter 'wishlistId' when calling getWishlist");
      }


      var pathParams = {
        'wishlist_id': wishlistId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WishlistResponse;

      return this.apiClient.callApi(
        '/wishlists/{wishlist_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Get Wishlists
     * Returns a list of Wishlists.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.customerId All wishlists relating to the customer.
     * @param {Number} opts.page The page number of results per page. 1 is the default and starts from record 0.
     * @param {Number} opts.limit The numbers of items to return per page. Default is 50 and maximum is 250.
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WishlistCollectionResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WishlistCollectionResponse} if callback is null
     */
    this.listWishlists = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'customer_id': opts['customerId'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WishlistCollectionResponse;

      return this.apiClient.callApi(
        '/wishlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


    /**
     * Update a Wishlist
     * Updates a Wishlist
     * @param {module:Model/WishlistRequest} body 
     * @param {Number} wishlistId ID of the Wishlist
     * @param callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Model/WishlistResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WishlistResponse} if callback is null
     */
    this.updateWishlist = function(body, wishlistId, opts, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateWishlist");
      }

      // verify the required parameter 'wishlistId' is set
      if (wishlistId == undefined || wishlistId == null) {
        throw new Error("Missing the required parameter 'wishlistId' when calling updateWishlist");
      }


      var pathParams = {
        'wishlist_id': wishlistId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WishlistResponse;

      return this.apiClient.callApi(
        '/wishlists/{wishlist_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
