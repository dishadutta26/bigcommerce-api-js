/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/BrandBase', 'Model/CustomUrlBrand'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BrandBase'), require('./CustomUrlBrand'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.BrandPut = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.BrandBase, root.BigCommerceApi.CustomUrlBrand);
  }
}(this, function(ApiClient, BrandBase, CustomUrlBrand) {
  'use strict';




  /**
   * The BrandPut model module.
   * @module Model/BrandPut
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>BrandPut</code>.
   * The model for a PUT to update brand. 
   * @alias module:Model/BrandPut
   * @class
   * @implements module:Model/BrandBase
   */
  var exports = function() {
    var _this = this;

    BrandBase.call(_this);

  };

  /**
   * Constructs a <code>BrandPut</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/BrandPut} obj Optional instance to populate.
   * @return {module:Model/BrandPut} The populated <code>BrandPut</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      BrandBase.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The unique numeric ID of the brand; increments sequentially. 
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;

  // Implement BrandBase interface:
  /**
   * The name of the brand. Must be unique. 
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * The title shown in the browser while viewing the brand. 
   * @member {String} page_title
   */
exports.prototype['page_title'] = undefined;

  /**
   * Comma-separated list of meta keywords to include in the HTML. 
   * @member {Array.<String>} meta_keywords
   */
exports.prototype['meta_keywords'] = undefined;

  /**
   * A meta description to include. 
   * @member {String} meta_description
   */
exports.prototype['meta_description'] = undefined;

  /**
   * A comma-separated list of keywords that can be used to locate this brand. 
   * @member {String} search_keywords
   */
exports.prototype['search_keywords'] = undefined;

  /**
   * Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. 
   * @member {String} image_url
   */
exports.prototype['image_url'] = undefined;

  /**
   * @member {module:Model/CustomUrlBrand} custom_url
   */
exports.prototype['custom_url'] = undefined;



  return exports;
}));


