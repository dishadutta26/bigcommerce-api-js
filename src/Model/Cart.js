/**
 * Data Model for BigCommerce's v3 Server-to-Server Cart API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/AppliedCoupon', 'Model/AppliedDiscount', 'Model/Currency', 'Model/LineItems'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AppliedCoupon'), require('./AppliedDiscount'), require('./Currency'), require('./LineItems'));
  } else {
    // Browser globals (root is window)
    if (!root.DataModelForBigCommercesV3ServerToServerCartApi) {
      root.DataModelForBigCommercesV3ServerToServerCartApi = {};
    }
    root.DataModelForBigCommercesV3ServerToServerCartApi.Cart = factory(root.DataModelForBigCommercesV3ServerToServerCartApi.ApiClient, root.DataModelForBigCommercesV3ServerToServerCartApi.AppliedCoupon, root.DataModelForBigCommercesV3ServerToServerCartApi.AppliedDiscount, root.DataModelForBigCommercesV3ServerToServerCartApi.Currency, root.DataModelForBigCommercesV3ServerToServerCartApi.LineItems);
  }
}(this, function(ApiClient, AppliedCoupon, AppliedDiscount, Currency, LineItems) {
  'use strict';




  /**
   * The Cart model module.
   * @module Model/Cart
   * @version v0.0.1
   */

  /**
   * Constructs a new <code>Cart</code>.
   * A cart contains a collection of items, prices, discounts, etc.. It does not contain customer-related data.
   * @alias module:Model/Cart
   * @class
   */
  var exports = function() {
    var _this = this;















  };

  /**
   * Constructs a <code>Cart</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/Cart} obj Optional instance to populate.
   * @return {module:Model/Cart} The populated <code>Cart</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('customer_id')) {
        obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'Number');
      }
      if (data.hasOwnProperty('channel_id')) {
        obj['channel_id'] = ApiClient.convertToType(data['channel_id'], 'Number');
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = Currency.constructFromObject(data['currency']);
      }
      if (data.hasOwnProperty('tax_included')) {
        obj['tax_included'] = ApiClient.convertToType(data['tax_included'], 'Boolean');
      }
      if (data.hasOwnProperty('base_amount')) {
        obj['base_amount'] = ApiClient.convertToType(data['base_amount'], 'Number');
      }
      if (data.hasOwnProperty('discount_amount')) {
        obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
      }
      if (data.hasOwnProperty('cart_amount')) {
        obj['cart_amount'] = ApiClient.convertToType(data['cart_amount'], 'Number');
      }
      if (data.hasOwnProperty('coupons')) {
        obj['coupons'] = ApiClient.convertToType(data['coupons'], [AppliedCoupon]);
      }
      if (data.hasOwnProperty('discounts')) {
        obj['discounts'] = ApiClient.convertToType(data['discounts'], [AppliedDiscount]);
      }
      if (data.hasOwnProperty('line_items')) {
        obj['line_items'] = LineItems.constructFromObject(data['line_items']);
      }
      if (data.hasOwnProperty('created_time')) {
        obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
      }
      if (data.hasOwnProperty('updated_time')) {
        obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'String');
      }
    }
    return obj;
  }

  /**
   * Cart ID, provided after creating a cart with a POST.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * ID of the customer to which the cart belongs.
   * @member {Number} customer_id
   */
  exports.prototype['customer_id'] = undefined;
  /**
   * @member {Number} channel_id
   */
  exports.prototype['channel_id'] = undefined;
  /**
   * The cart's email. This is the same email that is used in the billing address
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * @member {module:Model/Currency} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * @member {Boolean} tax_included
   */
  exports.prototype['tax_included'] = undefined;
  /**
   * Cost of cart's contents, before applying discounts.
   * @member {Number} base_amount
   */
  exports.prototype['base_amount'] = undefined;
  /**
   * Discounted amount.
   * @member {Number} discount_amount
   */
  exports.prototype['discount_amount'] = undefined;
  /**
   * Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).
   * @member {Number} cart_amount
   */
  exports.prototype['cart_amount'] = undefined;
  /**
   * @member {Array.<module:Model/AppliedCoupon>} coupons
   */
  exports.prototype['coupons'] = undefined;
  /**
   * @member {Array.<module:Model/AppliedDiscount>} discounts
   */
  exports.prototype['discounts'] = undefined;
  /**
   * @member {module:Model/LineItems} line_items
   */
  exports.prototype['line_items'] = undefined;
  /**
   * Time when the cart was created.
   * @member {String} created_time
   */
  exports.prototype['created_time'] = undefined;
  /**
   * Time when the cart was last updated.
   * @member {String} updated_time
   */
  exports.prototype['updated_time'] = undefined;



  return exports;
}));


