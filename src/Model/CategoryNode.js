/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/CategoryNode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CategoryNode'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.CategoryNode = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.CategoryNode);
  }
}(this, function(ApiClient, CategoryNode) {
  'use strict';




  /**
   * The CategoryNode model module.
   * @module Model/CategoryNode
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>CategoryNode</code>.
   * A BigCommerce category node object. Used to reflect parent <> child category relationships. 
   * @alias module:Model/CategoryNode
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>CategoryNode</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/CategoryNode} obj Optional instance to populate.
   * @return {module:Model/CategoryNode} The populated <code>CategoryNode</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('parent_id')) {
        obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('is_visible')) {
        obj['is_visible'] = ApiClient.convertToType(data['is_visible'], 'Boolean');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('children')) {
        obj['children'] = ApiClient.convertToType(data['children'], [CategoryNode]);
      }
    }
    return obj;
  }

  /**
   * The unique numeric ID of the category; increments sequentially. 
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog. 
   * @member {Number} parent_id
   */
  exports.prototype['parent_id'] = undefined;
  /**
   * The name displayed for the category. Name is unique with respect to the category's siblings. 
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. 
   * @member {Boolean} is_visible
   */
  exports.prototype['is_visible'] = undefined;
  /**
   * The custom URL for the category on the storefront. 
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * The list of children of the category. 
   * @member {Array.<module:Model/CategoryNode>} children
   */
  exports.prototype['children'] = undefined;



  return exports;
}));


