/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ComplexRuleConditionBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ComplexRuleConditionBase'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.ComplexRuleConditionPut = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.ComplexRuleConditionBase);
  }
}(this, function(ApiClient, ComplexRuleConditionBase) {
  'use strict';




  /**
   * The ComplexRuleConditionPut model module.
   * @module Model/ComplexRuleConditionPut
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>ComplexRuleConditionPut</code>.
   * The model for a PUT to update conditions on a complex rule. 
   * @alias module:Model/ComplexRuleConditionPut
   * @class
   * @implements module:Model/ComplexRuleConditionBase
   */
  var exports = function() {
    var _this = this;

    ComplexRuleConditionBase.call(_this);
  };

  /**
   * Constructs a <code>ComplexRuleConditionPut</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/ComplexRuleConditionPut} obj Optional instance to populate.
   * @return {module:Model/ComplexRuleConditionPut} The populated <code>ComplexRuleConditionPut</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      ComplexRuleConditionBase.constructFromObject(data, obj);
    }
    return obj;
  }


  // Implement ComplexRuleConditionBase interface:
  /**
   * The unique numeric ID of the rule condition; increments sequentially. 
   * @member {Number} id
   */
exports.prototype['id'] = undefined;

  /**
   * The unique numeric ID of the rule with which the condition is associated. 
   * @member {Number} rule_id
   */
exports.prototype['rule_id'] = undefined;

  /**
   * The unique numeric ID of the modifier with which the rule condition is associated. 
   * @member {Number} modifier_id
   */
exports.prototype['modifier_id'] = undefined;

  /**
   * The unique numeric ID of the modifier value with which the rule condition is associated. 
   * @member {Number} modifier_value_id
   */
exports.prototype['modifier_value_id'] = undefined;

  /**
   * The unique numeric ID of the variant with which the rule condition is associated. 
   * @member {Number} variant_id
   */
exports.prototype['variant_id'] = undefined;



  return exports;
}));


