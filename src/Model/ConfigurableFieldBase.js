/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.ConfigurableFieldBase = factory(root.BigCommerceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ConfigurableFieldBase model module.
   * @module Model/ConfigurableFieldBase
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>ConfigurableFieldBase</code>.
   * Common ConfigurableField properties. 
   * @alias module:Model/ConfigurableFieldBase
   * @class
   */
  var exports = function() {
    var _this = this;








  };

  /**
   * Constructs a <code>ConfigurableFieldBase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/ConfigurableFieldBase} obj Optional instance to populate.
   * @return {module:Model/ConfigurableFieldBase} The populated <code>ConfigurableFieldBase</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('file_allowed_types')) {
        obj['file_allowed_types'] = ApiClient.convertToType(data['file_allowed_types'], ['String']);
      }
      if (data.hasOwnProperty('file_max_size')) {
        obj['file_max_size'] = ApiClient.convertToType(data['file_max_size'], ['Number']);
      }
      if (data.hasOwnProperty('select_options')) {
        obj['select_options'] = ApiClient.convertToType(data['select_options'], ['String']);
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('sort_order')) {
        obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The name for the configurable field. Will display on the storefront and can be used as a reference point in the Orders API. 
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The type of the configurable field, which determines what sort of information the field is intended to collect on the storefront. Supported types in include a text input, a multi-line textarea, a checkbox, a file upload, and a dropdown selection. 
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * For fields of \"file\" type, this controls the allowed file types for upload. 
   * @member {Array.<String>} file_allowed_types
   */
  exports.prototype['file_allowed_types'] = undefined;
  /**
   * For fields of \"file\" type, this controls the maximum file size. The platform has a maximum file size of 512MB for all uploads regardless of this setting. 
   * @member {Array.<Number>} file_max_size
   */
  exports.prototype['file_max_size'] = undefined;
  /**
   * For fields of \"select\" type, this is an array of the options which should be presented in the dropdown. 
   * @member {Array.<String>} select_options
   */
  exports.prototype['select_options'] = undefined;
  /**
   * Controls whether the field is required to have some input before a product may be added to cart. 
   * @member {Boolean} required
   */
  exports.prototype['required'] = undefined;
  /**
   * Controls the sort order of this field relative to other configurable fields on the product, for purposes of ordering them on the storefront. 
   * @member {Number} sort_order
   */
  exports.prototype['sort_order'] = undefined;



  return exports;
}));


