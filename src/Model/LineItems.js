/**
 * Data Model for BigCommerce's v3 Server-to-Server Cart API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ItemDigital', 'Model/ItemGiftCertificate', 'Model/ItemPhysical'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ItemDigital'), require('./ItemGiftCertificate'), require('./ItemPhysical'));
  } else {
    // Browser globals (root is window)
    if (!root.DataModelForBigCommercesV3ServerToServerCartApi) {
      root.DataModelForBigCommercesV3ServerToServerCartApi = {};
    }
    root.DataModelForBigCommercesV3ServerToServerCartApi.LineItems = factory(root.DataModelForBigCommercesV3ServerToServerCartApi.ApiClient, root.DataModelForBigCommercesV3ServerToServerCartApi.ItemDigital, root.DataModelForBigCommercesV3ServerToServerCartApi.ItemGiftCertificate, root.DataModelForBigCommercesV3ServerToServerCartApi.ItemPhysical);
  }
}(this, function(ApiClient, ItemDigital, ItemGiftCertificate, ItemPhysical) {
  'use strict';




  /**
   * The LineItems model module.
   * @module Model/LineItems
   * @version v0.0.1
   */

  /**
   * Constructs a new <code>LineItems</code>.
   * @alias module:Model/LineItems
   * @class
   * @param physicalItems {Array.<module:Model/ItemPhysical>} 
   * @param digitalItems {Array.<module:Model/ItemDigital>} 
   * @param giftCertificates {Array.<module:Model/ItemGiftCertificate>} 
   */
  var exports = function(physicalItems, digitalItems, giftCertificates) {
    var _this = this;

    _this['physical_items'] = physicalItems;
    _this['digital_items'] = digitalItems;
    _this['gift_certificates'] = giftCertificates;
  };

  /**
   * Constructs a <code>LineItems</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/LineItems} obj Optional instance to populate.
   * @return {module:Model/LineItems} The populated <code>LineItems</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('physical_items')) {
        obj['physical_items'] = ApiClient.convertToType(data['physical_items'], [ItemPhysical]);
      }
      if (data.hasOwnProperty('digital_items')) {
        obj['digital_items'] = ApiClient.convertToType(data['digital_items'], [ItemDigital]);
      }
      if (data.hasOwnProperty('gift_certificates')) {
        obj['gift_certificates'] = ApiClient.convertToType(data['gift_certificates'], [ItemGiftCertificate]);
      }
    }
    return obj;
  }

  /**
   * @member {Array.<module:Model/ItemPhysical>} physical_items
   */
  exports.prototype['physical_items'] = undefined;
  /**
   * @member {Array.<module:Model/ItemDigital>} digital_items
   */
  exports.prototype['digital_items'] = undefined;
  /**
   * @member {Array.<module:Model/ItemGiftCertificate>} gift_certificates
   */
  exports.prototype['gift_certificates'] = undefined;



  return exports;
}));


