/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/MetafieldBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MetafieldBase'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.Metafield = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.MetafieldBase);
  }
}(this, function(ApiClient, MetafieldBase) {
  'use strict';




  /**
   * The Metafield model module.
   * @module Model/Metafield
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>Metafield</code>.
   * Allows app partners to write custom data to various resources in the API. 
   * @alias module:Model/Metafield
   * @class
   * @implements module:Model/MetafieldBase
   */
  var exports = function() {
    var _this = this;

    MetafieldBase.call(_this);



  };

  /**
   * Constructs a <code>Metafield</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/Metafield} obj Optional instance to populate.
   * @return {module:Model/Metafield} The populated <code>Metafield</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      MetafieldBase.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('updated_at')) {
        obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
      }
    }
    return obj;
  }

  /**
   * The unique identifier for the metafields. 
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Date and time of the metafield's creation. 
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * Date and time when the metafield was last updated. 
   * @member {Date} updated_at
   */
  exports.prototype['updated_at'] = undefined;

  // Implement MetafieldBase interface:
  /**
   * Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). 
   * @member {String} permission_set
   */
exports.prototype['permission_set'] = undefined;

  /**
   * Namespace for the metafield, for organizational purposes. 
   * @member {String} namespace
   */
exports.prototype['namespace'] = undefined;

  /**
   * The name of the field, for example: `location_id`, `color`. 
   * @member {String} key
   */
exports.prototype['key'] = undefined;

  /**
   * The value of the field, for example: `1`, `blue`. 
   * @member {String} value
   */
exports.prototype['value'] = undefined;

  /**
   * Description for the metafields. 
   * @member {String} description
   */
exports.prototype['description'] = undefined;

  /**
   * The type of resource with which the metafield is associated. 
   * @member {String} resource_type
   */
exports.prototype['resource_type'] = undefined;

  /**
   * The unique identifier for the resource with which the metafield is associated. 
   * @member {Number} resource_id
   */
exports.prototype['resource_id'] = undefined;



  return exports;
}));


