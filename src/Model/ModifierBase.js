/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ModifierValue', 'Model/OptionConfig'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ModifierValue'), require('./OptionConfig'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.ModifierBase = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.ModifierValue, root.BigCommerceApi.OptionConfig);
  }
}(this, function(ApiClient, ModifierValue, OptionConfig) {
  'use strict';




  /**
   * The ModifierBase model module.
   * @module Model/ModifierBase
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>ModifierBase</code>.
   * Common Modifier properties. 
   * @alias module:Model/ModifierBase
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>ModifierBase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/ModifierBase} obj Optional instance to populate.
   * @return {module:Model/ModifierBase} The populated <code>ModifierBase</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('sort_order')) {
        obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'Number');
      }
      if (data.hasOwnProperty('config')) {
        obj['config'] = OptionConfig.constructFromObject(data['config']);
      }
      if (data.hasOwnProperty('option_values')) {
        obj['option_values'] = ApiClient.convertToType(data['option_values'], [ModifierValue]);
      }
    }
    return obj;
  }

  /**
   * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: D = date, C = checkbox, F = file, T = text, MT = multi_line_text, N = numbers_only_text, RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. 
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Whether or not this modifer is required or not at checkout. 
   * @member {Boolean} required
   */
  exports.prototype['required'] = undefined;
  /**
   * The order the modifiers display on the product detail page.
   * @member {Number} sort_order
   */
  exports.prototype['sort_order'] = undefined;
  /**
   * @member {module:Model/OptionConfig} config
   */
  exports.prototype['config'] = undefined;
  /**
   * @member {Array.<module:Model/ModifierValue>} option_values
   */
  exports.prototype['option_values'] = undefined;



  return exports;
}));


