/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.OptionConfig = factory(root.BigCommerceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The OptionConfig model module.
   * @module Model/OptionConfig
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>OptionConfig</code>.
   * @alias module:Model/OptionConfig
   * @class
   */
  var exports = function() {
    var _this = this;

























  };

  /**
   * Constructs a <code>OptionConfig</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/OptionConfig} obj Optional instance to populate.
   * @return {module:Model/OptionConfig} The populated <code>OptionConfig</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('default_value')) {
        obj['default_value'] = ApiClient.convertToType(data['default_value'], 'String');
      }
      if (data.hasOwnProperty('checked_by_default')) {
        obj['checked_by_default'] = ApiClient.convertToType(data['checked_by_default'], 'Boolean');
      }
      if (data.hasOwnProperty('checkbox_label')) {
        obj['checkbox_label'] = ApiClient.convertToType(data['checkbox_label'], 'String');
      }
      if (data.hasOwnProperty('date_limited')) {
        obj['date_limited'] = ApiClient.convertToType(data['date_limited'], 'Boolean');
      }
      if (data.hasOwnProperty('date_limit_mode')) {
        obj['date_limit_mode'] = ApiClient.convertToType(data['date_limit_mode'], 'String');
      }
      if (data.hasOwnProperty('date_earliest_value')) {
        obj['date_earliest_value'] = ApiClient.convertToType(data['date_earliest_value'], 'Date');
      }
      if (data.hasOwnProperty('date_latest_value')) {
        obj['date_latest_value'] = ApiClient.convertToType(data['date_latest_value'], 'Date');
      }
      if (data.hasOwnProperty('file_types_mode')) {
        obj['file_types_mode'] = ApiClient.convertToType(data['file_types_mode'], 'String');
      }
      if (data.hasOwnProperty('file_types_supported')) {
        obj['file_types_supported'] = ApiClient.convertToType(data['file_types_supported'], ['String']);
      }
      if (data.hasOwnProperty('file_types_other')) {
        obj['file_types_other'] = ApiClient.convertToType(data['file_types_other'], ['String']);
      }
      if (data.hasOwnProperty('file_max_size')) {
        obj['file_max_size'] = ApiClient.convertToType(data['file_max_size'], 'Number');
      }
      if (data.hasOwnProperty('text_characters_limited')) {
        obj['text_characters_limited'] = ApiClient.convertToType(data['text_characters_limited'], 'Boolean');
      }
      if (data.hasOwnProperty('text_min_length')) {
        obj['text_min_length'] = ApiClient.convertToType(data['text_min_length'], 'Number');
      }
      if (data.hasOwnProperty('text_max_length')) {
        obj['text_max_length'] = ApiClient.convertToType(data['text_max_length'], 'Number');
      }
      if (data.hasOwnProperty('text_lines_limited')) {
        obj['text_lines_limited'] = ApiClient.convertToType(data['text_lines_limited'], 'Boolean');
      }
      if (data.hasOwnProperty('text_max_lines')) {
        obj['text_max_lines'] = ApiClient.convertToType(data['text_max_lines'], 'Number');
      }
      if (data.hasOwnProperty('number_limited')) {
        obj['number_limited'] = ApiClient.convertToType(data['number_limited'], 'Boolean');
      }
      if (data.hasOwnProperty('number_limit_mode')) {
        obj['number_limit_mode'] = ApiClient.convertToType(data['number_limit_mode'], 'String');
      }
      if (data.hasOwnProperty('number_lowest_value')) {
        obj['number_lowest_value'] = ApiClient.convertToType(data['number_lowest_value'], 'Number');
      }
      if (data.hasOwnProperty('number_highest_value')) {
        obj['number_highest_value'] = ApiClient.convertToType(data['number_highest_value'], 'Number');
      }
      if (data.hasOwnProperty('number_integers_only')) {
        obj['number_integers_only'] = ApiClient.convertToType(data['number_integers_only'], 'Boolean');
      }
      if (data.hasOwnProperty('product_list_adjusts_inventory')) {
        obj['product_list_adjusts_inventory'] = ApiClient.convertToType(data['product_list_adjusts_inventory'], 'Boolean');
      }
      if (data.hasOwnProperty('product_list_adjusts_pricing')) {
        obj['product_list_adjusts_pricing'] = ApiClient.convertToType(data['product_list_adjusts_pricing'], 'Boolean');
      }
      if (data.hasOwnProperty('product_list_shipping_calc')) {
        obj['product_list_shipping_calc'] = ApiClient.convertToType(data['product_list_shipping_calc'], 'String');
      }
    }
    return obj;
  }

  /**
   * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string. 
   * @member {String} default_value
   */
  exports.prototype['default_value'] = undefined;
  /**
   * (checkbox) Flag for setting the checkbox to be checked by default. 
   * @member {Boolean} checked_by_default
   */
  exports.prototype['checked_by_default'] = undefined;
  /**
   * (checkbox) Label displayed for the checkbox option. 
   * @member {String} checkbox_label
   */
  exports.prototype['checkbox_label'] = undefined;
  /**
   * (date) Flag to limit the dates allowed to be entered on a date option. 
   * @member {Boolean} date_limited
   */
  exports.prototype['date_limited'] = undefined;
  /**
   * (date) The type of limit that is allowed to be entered on a date option. 
   * @member {String} date_limit_mode
   */
  exports.prototype['date_limit_mode'] = undefined;
  /**
   * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. 
   * @member {Date} date_earliest_value
   */
  exports.prototype['date_earliest_value'] = undefined;
  /**
   * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. 
   * @member {Date} date_latest_value
   */
  exports.prototype['date_latest_value'] = undefined;
  /**
   * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. 
   * @member {String} file_types_mode
   */
  exports.prototype['file_types_mode'] = undefined;
  /**
   * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).   `other` - Allows file types defined in the `file_types_other` array. 
   * @member {Array.<String>} file_types_supported
   */
  exports.prototype['file_types_supported'] = undefined;
  /**
   * (file) A list of other file types allowed with the file upload option. 
   * @member {Array.<String>} file_types_other
   */
  exports.prototype['file_types_other'] = undefined;
  /**
   * (file) The maximum size for a file that can be used with the file upload option. 
   * @member {Number} file_max_size
   */
  exports.prototype['file_max_size'] = undefined;
  /**
   * (text, multi_line_text) Flag to validate the length of a text or multi-line text input. 
   * @member {Boolean} text_characters_limited
   */
  exports.prototype['text_characters_limited'] = undefined;
  /**
   * (text, multi_line_text) The minimum length allowed for a text or multi-line text option. 
   * @member {Number} text_min_length
   */
  exports.prototype['text_min_length'] = undefined;
  /**
   * (text, multi_line_text) The maximum length allowed for a text or multi line text option. 
   * @member {Number} text_max_length
   */
  exports.prototype['text_max_length'] = undefined;
  /**
   * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. 
   * @member {Boolean} text_lines_limited
   */
  exports.prototype['text_lines_limited'] = undefined;
  /**
   * (multi_line_text) The maximum number of lines allowed on a multi-line text input. 
   * @member {Number} text_max_lines
   */
  exports.prototype['text_max_lines'] = undefined;
  /**
   * (numbers_only_text) Flag to limit the value of a number option. 
   * @member {Boolean} number_limited
   */
  exports.prototype['number_limited'] = undefined;
  /**
   * (numbers_only_text) The type of limit on values entered for a number option. 
   * @member {String} number_limit_mode
   */
  exports.prototype['number_limit_mode'] = undefined;
  /**
   * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. 
   * @member {Number} number_lowest_value
   */
  exports.prototype['number_lowest_value'] = undefined;
  /**
   * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. 
   * @member {Number} number_highest_value
   */
  exports.prototype['number_highest_value'] = undefined;
  /**
   * (numbers_only_text) Flag to limit the input on a number option to whole numbers only. 
   * @member {Boolean} number_integers_only
   */
  exports.prototype['number_integers_only'] = undefined;
  /**
   * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. 
   * @member {Boolean} product_list_adjusts_inventory
   */
  exports.prototype['product_list_adjusts_inventory'] = undefined;
  /**
   * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. 
   * @member {Boolean} product_list_adjusts_pricing
   */
  exports.prototype['product_list_adjusts_pricing'] = undefined;
  /**
   * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. 
   * @member {String} product_list_shipping_calc
   */
  exports.prototype['product_list_shipping_calc'] = undefined;



  return exports;
}));


