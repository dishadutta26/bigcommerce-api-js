/**
 * Orders APIs
 * Orders APIs integrate with point-of-sale, shipping, distribution, and inventory-management systems.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.OrdersApIs) {
      root.OrdersApIs = {};
    }
    root.OrdersApIs.OrderCountStatus = factory(root.OrdersApIs.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The OrderCountStatus model module.
   * @module Model/OrderCountStatus
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrderCountStatus</code>.
   * |Status ID | Name  | Description | |--|--|--| | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. | | 1 | Pending |Customer started the checkout process, but did not complete it. | | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. | | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. | | 4 | Refunded | Seller has used the Refund action. | | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. | | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. | | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. | | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. | | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. | | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. | | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. | | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. | | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. | | 14 | Partially Refunded | Seller has partially refunded the order. |
   * @alias module:Model/OrderCountStatus
   * @class
   */
  var exports = function() {
    var _this = this;








  };

  /**
   * Constructs a <code>OrderCountStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/OrderCountStatus} obj Optional instance to populate.
   * @return {module:Model/OrderCountStatus} The populated <code>OrderCountStatus</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('system_label')) {
        obj['system_label'] = ApiClient.convertToType(data['system_label'], 'String');
      }
      if (data.hasOwnProperty('custom_label')) {
        obj['custom_label'] = ApiClient.convertToType(data['custom_label'], 'String');
      }
      if (data.hasOwnProperty('system_description')) {
        obj['system_description'] = ApiClient.convertToType(data['system_description'], 'String');
      }
      if (data.hasOwnProperty('count')) {
        obj['count'] = ApiClient.convertToType(data['count'], 'Number');
      }
      if (data.hasOwnProperty('sort_order')) {
        obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The id of the type of order status
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Name of the type of order status
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * System name of the type of order status.
   * @member {String} system_label
   */
  exports.prototype['system_label'] = undefined;
  /**
   * Custom order status label given in the Control Panel
   * @member {String} custom_label
   */
  exports.prototype['custom_label'] = undefined;
  /**
   * System description of the order status
   * @member {String} system_description
   */
  exports.prototype['system_description'] = undefined;
  /**
   * Number of orders that exist with this status
   * @member {Number} count
   */
  exports.prototype['count'] = undefined;
  /**
   * The sort order of the order status from the Control Panel
   * @member {Number} sort_order
   */
  exports.prototype['sort_order'] = undefined;



  return exports;
}));


