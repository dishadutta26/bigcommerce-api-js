/**
 * Orders APIs
 * Orders APIs integrate with point-of-sale, shipping, distribution, and inventory-management systems.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.OrdersApIs) {
      root.OrdersApIs = {};
    }
    root.OrdersApIs.OrderCoupon = factory(root.OrdersApIs.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The OrderCoupon model module.
   * @module Model/OrderCoupon
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrderCoupon</code>.
   * @alias module:Model/OrderCoupon
   * @class
   */
  var exports = function() {
    var _this = this;








  };

  /**
   * Constructs a <code>OrderCoupon</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/OrderCoupon} obj Optional instance to populate.
   * @return {module:Model/OrderCoupon} The populated <code>OrderCoupon</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('coupon_id')) {
        obj['coupon_id'] = ApiClient.convertToType(data['coupon_id'], 'Number');
      }
      if (data.hasOwnProperty('order_id')) {
        obj['order_id'] = ApiClient.convertToType(data['order_id'], 'Number');
      }
      if (data.hasOwnProperty('code')) {
        obj['code'] = ApiClient.convertToType(data['code'], 'String');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('discount')) {
        obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Numeric ID of the coupon code.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Numeric ID of the associated coupon.
   * @member {Number} coupon_id
   */
  exports.prototype['coupon_id'] = undefined;
  /**
   * Numeric ID of the associated order.
   * @member {Number} order_id
   */
  exports.prototype['order_id'] = undefined;
  /**
   * Coupon code, as a string.
   * @member {String} code
   */
  exports.prototype['code'] = undefined;
  /**
   * Amount of the discount. This information is returned as in integer. Dollar and percentage discounts will return the same.  For example, $3 returns as '3' while 5% will return as 5. Check the discount type to see what type of discount is available. (Float, Float-As-String, Integer)
   * @member {String} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * type 0: per_item_discount type 1: percentage_discount type 2: per_total_discount type 3: shipping_discount type 4: free_shipping
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The amount off the order the discount is worth. For example, if an order subtotal is $90 and the discount is $3 then it will return as 3.000. If the discount is 3% then will return as 2.7000 or the amount of the order.  (Float, Float-As-String, Integer)
   * @member {Number} discount
   */
  exports.prototype['discount'] = undefined;



  return exports;
}));


