/**
 * Orders APIs
 * Orders APIs integrate with point-of-sale, shipping, distribution, and inventory-management systems.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/OrderProductAppliedDiscounts', 'Model/OrderProductOptions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OrderProductAppliedDiscounts'), require('./OrderProductOptions'));
  } else {
    // Browser globals (root is window)
    if (!root.OrdersApIs) {
      root.OrdersApIs = {};
    }
    root.OrdersApIs.OrderProduct = factory(root.OrdersApIs.ApiClient, root.OrdersApIs.OrderProductAppliedDiscounts, root.OrdersApIs.OrderProductOptions);
  }
}(this, function(ApiClient, OrderProductAppliedDiscounts, OrderProductOptions) {
  'use strict';




  /**
   * The OrderProduct model module.
   * @module Model/OrderProduct
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrderProduct</code>.
   * @alias module:Model/OrderProduct
   * @class
   */
  var exports = function() {
    var _this = this;














































  };

  /**
   * Constructs a <code>OrderProduct</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/OrderProduct} obj Optional instance to populate.
   * @return {module:Model/OrderProduct} The populated <code>OrderProduct</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('order_id')) {
        obj['order_id'] = ApiClient.convertToType(data['order_id'], 'Number');
      }
      if (data.hasOwnProperty('product_id')) {
        obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
      }
      if (data.hasOwnProperty('order_address_id')) {
        obj['order_address_id'] = ApiClient.convertToType(data['order_address_id'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('sku')) {
        obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('base_price')) {
        obj['base_price'] = ApiClient.convertToType(data['base_price'], 'String');
      }
      if (data.hasOwnProperty('price_ex_tax')) {
        obj['price_ex_tax'] = ApiClient.convertToType(data['price_ex_tax'], 'String');
      }
      if (data.hasOwnProperty('price_inc_tax')) {
        obj['price_inc_tax'] = ApiClient.convertToType(data['price_inc_tax'], 'String');
      }
      if (data.hasOwnProperty('price_tax')) {
        obj['price_tax'] = ApiClient.convertToType(data['price_tax'], 'String');
      }
      if (data.hasOwnProperty('base_total')) {
        obj['base_total'] = ApiClient.convertToType(data['base_total'], 'String');
      }
      if (data.hasOwnProperty('total_ex_tax')) {
        obj['total_ex_tax'] = ApiClient.convertToType(data['total_ex_tax'], 'String');
      }
      if (data.hasOwnProperty('total_inc_tax')) {
        obj['total_inc_tax'] = ApiClient.convertToType(data['total_inc_tax'], 'String');
      }
      if (data.hasOwnProperty('total_tax')) {
        obj['total_tax'] = ApiClient.convertToType(data['total_tax'], 'String');
      }
      if (data.hasOwnProperty('quantity')) {
        obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
      }
      if (data.hasOwnProperty('base_cost_price')) {
        obj['base_cost_price'] = ApiClient.convertToType(data['base_cost_price'], 'String');
      }
      if (data.hasOwnProperty('cost_price_inc_tax')) {
        obj['cost_price_inc_tax'] = ApiClient.convertToType(data['cost_price_inc_tax'], 'String');
      }
      if (data.hasOwnProperty('cost_price_ex_tax')) {
        obj['cost_price_ex_tax'] = ApiClient.convertToType(data['cost_price_ex_tax'], 'String');
      }
      if (data.hasOwnProperty('weight')) {
        obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
      }
      if (data.hasOwnProperty('cost_price_tax')) {
        obj['cost_price_tax'] = ApiClient.convertToType(data['cost_price_tax'], 'String');
      }
      if (data.hasOwnProperty('is_refunded')) {
        obj['is_refunded'] = ApiClient.convertToType(data['is_refunded'], 'Boolean');
      }
      if (data.hasOwnProperty('refunded_amount')) {
        obj['refunded_amount'] = ApiClient.convertToType(data['refunded_amount'], 'String');
      }
      if (data.hasOwnProperty('return_id')) {
        obj['return_id'] = ApiClient.convertToType(data['return_id'], 'Number');
      }
      if (data.hasOwnProperty('wrapping_name')) {
        obj['wrapping_name'] = ApiClient.convertToType(data['wrapping_name'], 'String');
      }
      if (data.hasOwnProperty('base_wrapping_cost')) {
        obj['base_wrapping_cost'] = ApiClient.convertToType(data['base_wrapping_cost'], 'String');
      }
      if (data.hasOwnProperty('wrapping_cost_ex_tax')) {
        obj['wrapping_cost_ex_tax'] = ApiClient.convertToType(data['wrapping_cost_ex_tax'], 'String');
      }
      if (data.hasOwnProperty('wrapping_cost_inc_tax')) {
        obj['wrapping_cost_inc_tax'] = ApiClient.convertToType(data['wrapping_cost_inc_tax'], 'String');
      }
      if (data.hasOwnProperty('wrapping_cost_tax')) {
        obj['wrapping_cost_tax'] = ApiClient.convertToType(data['wrapping_cost_tax'], 'String');
      }
      if (data.hasOwnProperty('wrapping_message')) {
        obj['wrapping_message'] = ApiClient.convertToType(data['wrapping_message'], 'String');
      }
      if (data.hasOwnProperty('quantity_shipped')) {
        obj['quantity_shipped'] = ApiClient.convertToType(data['quantity_shipped'], 'Number');
      }
      if (data.hasOwnProperty('event_name')) {
        obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
      }
      if (data.hasOwnProperty('event_date')) {
        obj['event_date'] = ApiClient.convertToType(data['event_date'], 'Date');
      }
      if (data.hasOwnProperty('fixed_shipping_cost')) {
        obj['fixed_shipping_cost'] = ApiClient.convertToType(data['fixed_shipping_cost'], 'String');
      }
      if (data.hasOwnProperty('ebay_item_id')) {
        obj['ebay_item_id'] = ApiClient.convertToType(data['ebay_item_id'], 'String');
      }
      if (data.hasOwnProperty('ebay_transaction_id')) {
        obj['ebay_transaction_id'] = ApiClient.convertToType(data['ebay_transaction_id'], 'String');
      }
      if (data.hasOwnProperty('option_set_id')) {
        obj['option_set_id'] = ApiClient.convertToType(data['option_set_id'], 'Number');
      }
      if (data.hasOwnProperty('parent_order_product_id')) {
        obj['parent_order_product_id'] = ApiClient.convertToType(data['parent_order_product_id'], 'Number');
      }
      if (data.hasOwnProperty('is_bundled_product')) {
        obj['is_bundled_product'] = ApiClient.convertToType(data['is_bundled_product'], 'Boolean');
      }
      if (data.hasOwnProperty('bin_picking_number')) {
        obj['bin_picking_number'] = ApiClient.convertToType(data['bin_picking_number'], 'String');
      }
      if (data.hasOwnProperty('applied_discounts')) {
        obj['applied_discounts'] = ApiClient.convertToType(data['applied_discounts'], [OrderProductAppliedDiscounts]);
      }
      if (data.hasOwnProperty('product_options')) {
        obj['product_options'] = ApiClient.convertToType(data['product_options'], [OrderProductOptions]);
      }
      if (data.hasOwnProperty('external_id')) {
        obj['external_id'] = ApiClient.convertToType(data['external_id'], 'Number');
      }
      if (data.hasOwnProperty('upc')) {
        obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
      }
      if (data.hasOwnProperty('variant_id')) {
        obj['variant_id'] = ApiClient.convertToType(data['variant_id'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Numeric ID of this product within this order.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Numeric ID of the associated order.
   * @member {Number} order_id
   */
  exports.prototype['order_id'] = undefined;
  /**
   * Numeric ID of the product.
   * @member {Number} product_id
   */
  exports.prototype['product_id'] = undefined;
  /**
   * Numeric ID of the associated order address.
   * @member {Number} order_address_id
   */
  exports.prototype['order_address_id'] = undefined;
  /**
   * The product name.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * User-defined product code/stock keeping unit (SKU).
   * @member {String} sku
   */
  exports.prototype['sku'] = undefined;
  /**
   * Type of product
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The product's base price. (Float, Float-As-String, Integer)
   * @member {String} base_price
   */
  exports.prototype['base_price'] = undefined;
  /**
   * The product’s price excluding tax. (Float, Float-As-String, Integer)
   * @member {String} price_ex_tax
   */
  exports.prototype['price_ex_tax'] = undefined;
  /**
   * The product’s price including tax. (Float, Float-As-String, Integer)
   * @member {String} price_inc_tax
   */
  exports.prototype['price_inc_tax'] = undefined;
  /**
   * Amount of tax applied to a single product.   Price tax is calculated as: `price_tax = price_inc_tax - price_ex_tax`  (Float, Float-As-String, Integer)
   * @member {String} price_tax
   */
  exports.prototype['price_tax'] = undefined;
  /**
   * Total base price. (Float, Float-As-String, Integer)
   * @member {String} base_total
   */
  exports.prototype['base_total'] = undefined;
  /**
   * Total base price excluding tax. (Float, Float-As-String, Integer)
   * @member {String} total_ex_tax
   */
  exports.prototype['total_ex_tax'] = undefined;
  /**
   * Total base price including tax. (Float, Float-As-String, Integer)
   * @member {String} total_inc_tax
   */
  exports.prototype['total_inc_tax'] = undefined;
  /**
   * Total tax applied to products. For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00.  If there is a manual discount applied total_tax is calcuted as the following: `(price_ex_tax - discount)*tax_rate=total_tax`.  See [applied discounts](https://developer.bigcommerce.com/api-reference/orders/orders-api/models/orderproductsapplieddiscounts) for more on how manual discounts are applied to orders.    (Float, Float-As-String, Integer)
   * @member {String} total_tax
   */
  exports.prototype['total_tax'] = undefined;
  /**
   * Quantity of the product ordered.
   * @member {Number} quantity
   */
  exports.prototype['quantity'] = undefined;
  /**
   * The product's cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer) Read Only
   * @member {String} base_cost_price
   */
  exports.prototype['base_cost_price'] = undefined;
  /**
   * The product's cost price including tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
   * @member {String} cost_price_inc_tax
   */
  exports.prototype['cost_price_inc_tax'] = undefined;
  /**
   * The products cost price excluding tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
   * @member {String} cost_price_ex_tax
   */
  exports.prototype['cost_price_ex_tax'] = undefined;
  /**
   * Weight of the product. (Float, Float-As-String, Integer)
   * @member {Number} weight
   */
  exports.prototype['weight'] = undefined;
  /**
   * Tax applied to the product’s cost price. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
   * @member {String} cost_price_tax
   */
  exports.prototype['cost_price_tax'] = undefined;
  /**
   * Whether the product has been refunded.
   * @member {Boolean} is_refunded
   */
  exports.prototype['is_refunded'] = undefined;
  /**
   * The amount refunded from this transaction. (Float, Float-As-String, Integer)
   * @member {String} refunded_amount
   */
  exports.prototype['refunded_amount'] = undefined;
  /**
   * Numeric ID for the refund.
   * @member {Number} return_id
   */
  exports.prototype['return_id'] = undefined;
  /**
   * Name of gift-wrapping option
   * @member {String} wrapping_name
   */
  exports.prototype['wrapping_name'] = undefined;
  /**
   * The value of the base wrapping cost. (Float, Float-As-String, Integer)
   * @member {String} base_wrapping_cost
   */
  exports.prototype['base_wrapping_cost'] = undefined;
  /**
   * The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
   * @member {String} wrapping_cost_ex_tax
   */
  exports.prototype['wrapping_cost_ex_tax'] = undefined;
  /**
   * The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
   * @member {String} wrapping_cost_inc_tax
   */
  exports.prototype['wrapping_cost_inc_tax'] = undefined;
  /**
   * Tax applied to gift-wrapping option. (Float, Float-As-String, Integer)
   * @member {String} wrapping_cost_tax
   */
  exports.prototype['wrapping_cost_tax'] = undefined;
  /**
   * Message to accompany gift-wrapping option.
   * @member {String} wrapping_message
   */
  exports.prototype['wrapping_message'] = undefined;
  /**
   * Quantity of this item shipped.
   * @member {Number} quantity_shipped
   */
  exports.prototype['quantity_shipped'] = undefined;
  /**
   * Name of promotional event/delivery date.
   * @member {String} event_name
   */
  exports.prototype['event_name'] = undefined;
  /**
   * Date of the promotional event/scheduled delivery.
   * @member {Date} event_date
   */
  exports.prototype['event_date'] = undefined;
  /**
   * Fixed shipping cost for this product. (Float, Float-As-String, Integer)
   * @member {String} fixed_shipping_cost
   */
  exports.prototype['fixed_shipping_cost'] = undefined;
  /**
   * Item ID for this product on eBay.
   * @member {String} ebay_item_id
   */
  exports.prototype['ebay_item_id'] = undefined;
  /**
   * Transaction ID for this product on eBay.
   * @member {String} ebay_transaction_id
   */
  exports.prototype['ebay_transaction_id'] = undefined;
  /**
   * Numeric ID of the option set applied to the product.
   * @member {Number} option_set_id
   */
  exports.prototype['option_set_id'] = undefined;
  /**
   * ID of a parent product.
   * @member {Number} parent_order_product_id
   */
  exports.prototype['parent_order_product_id'] = undefined;
  /**
   * Whether this product is bundled with other products.
   * @member {Boolean} is_bundled_product
   */
  exports.prototype['is_bundled_product'] = undefined;
  /**
   * Bin picking number for the physical product.
   * @member {String} bin_picking_number
   */
  exports.prototype['bin_picking_number'] = undefined;
  /**
   * Array of objects containing discounts applied to the product.
   * @member {Array.<module:Model/OrderProductAppliedDiscounts>} applied_discounts
   */
  exports.prototype['applied_discounts'] = undefined;
  /**
   * Array of product option objects.
   * @member {Array.<module:Model/OrderProductOptions>} product_options
   */
  exports.prototype['product_options'] = undefined;
  /**
   * ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.
   * @member {Number} external_id
   */
  exports.prototype['external_id'] = undefined;
  /**
   * Universal Product Code. Can be written to for custom products and catalog products.
   * @member {String} upc
   */
  exports.prototype['upc'] = undefined;
  /**
   * Products `variant_id`. PUT or POST. This field is not available for custom products.
   * @member {Number} variant_id
   */
  exports.prototype['variant_id'] = undefined;



  return exports;
}));


