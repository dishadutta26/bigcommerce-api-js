/**
 * Orders APIs
 * Orders APIs integrate with point-of-sale, shipping, distribution, and inventory-management systems.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.OrdersApIs) {
      root.OrdersApIs = {};
    }
    root.OrdersApIs.OrderProductOptions = factory(root.OrdersApIs.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The OrderProductOptions model module.
   * @module Model/OrderProductOptions
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrderProductOptions</code>.
   * @alias module:Model/OrderProductOptions
   * @class
   */
  var exports = function() {
    var _this = this;











  };

  /**
   * Constructs a <code>OrderProductOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/OrderProductOptions} obj Optional instance to populate.
   * @return {module:Model/OrderProductOptions} The populated <code>OrderProductOptions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('option_id')) {
        obj['option_id'] = ApiClient.convertToType(data['option_id'], 'Number');
      }
      if (data.hasOwnProperty('order_product_id')) {
        obj['order_product_id'] = ApiClient.convertToType(data['order_product_id'], 'Number');
      }
      if (data.hasOwnProperty('product_option_id')) {
        obj['product_option_id'] = ApiClient.convertToType(data['product_option_id'], 'Number');
      }
      if (data.hasOwnProperty('display_name')) {
        obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
      }
      if (data.hasOwnProperty('display_value')) {
        obj['display_value'] = ApiClient.convertToType(data['display_value'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('display_style')) {
        obj['display_style'] = ApiClient.convertToType(data['display_style'], 'String');
      }
    }
    return obj;
  }

  /**
   * The unique numerical ID of the option; increments sequentially.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Numeric ID of the associated option.
   * @member {Number} option_id
   */
  exports.prototype['option_id'] = undefined;
  /**
   * 
   * @member {Number} order_product_id
   */
  exports.prototype['order_product_id'] = undefined;
  /**
   * 
   * @member {Number} product_option_id
   */
  exports.prototype['product_option_id'] = undefined;
  /**
   * The name of the option, as shown on the storefront.
   * @member {String} display_name
   */
  exports.prototype['display_name'] = undefined;
  /**
   * The name of the value, as shown on the storefront.
   * @member {String} display_value
   */
  exports.prototype['display_value'] = undefined;
  /**
   * 
   * @member {String} value
   */
  exports.prototype['value'] = undefined;
  /**
   * Option Type
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The optionâ€™s name, as used internally. Must be unique
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles.
   * @member {String} display_style
   */
  exports.prototype['display_style'] = undefined;



  return exports;
}));


