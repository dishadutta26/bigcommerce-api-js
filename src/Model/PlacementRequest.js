/**
 * BigCommerce Widgets API
 * Widgets API allows developers to inject content into a BigCommerce theme.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceWidgetsApi) {
      root.BigCommerceWidgetsApi = {};
    }
    root.BigCommerceWidgetsApi.PlacementRequest = factory(root.BigCommerceWidgetsApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PlacementRequest model module.
   * @module Model/PlacementRequest
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>PlacementRequest</code>.
   * @alias module:Model/PlacementRequest
   * @class
   * @param widgetUuid {String} A widget identifier.
   * @param templateFile {String} The template file that you would like to target.
   */
  var exports = function(widgetUuid, templateFile) {
    var _this = this;

    _this['widget_uuid'] = widgetUuid;



    _this['template_file'] = templateFile;

  };

  /**
   * Constructs a <code>PlacementRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/PlacementRequest} obj Optional instance to populate.
   * @return {module:Model/PlacementRequest} The populated <code>PlacementRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('widget_uuid')) {
        obj['widget_uuid'] = ApiClient.convertToType(data['widget_uuid'], 'String');
      }
      if (data.hasOwnProperty('entity_id')) {
        obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'String');
      }
      if (data.hasOwnProperty('sort_order')) {
        obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'Number');
      }
      if (data.hasOwnProperty('region')) {
        obj['region'] = ApiClient.convertToType(data['region'], 'String');
      }
      if (data.hasOwnProperty('template_file')) {
        obj['template_file'] = ApiClient.convertToType(data['template_file'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
    }
    return obj;
  }

  /**
   * A widget identifier.
   * @member {String} widget_uuid
   */
  exports.prototype['widget_uuid'] = undefined;
  /**
   * The specific instance of a page that you would like to target.
   * @member {String} entity_id
   */
  exports.prototype['entity_id'] = undefined;
  /**
   * The sort order to control the position of a content widget in a region.
   * @member {Number} sort_order
   */
  exports.prototype['sort_order'] = undefined;
  /**
   * The name of the region in which to insert content widgets.
   * @member {String} region
   */
  exports.prototype['region'] = undefined;
  /**
   * The template file that you would like to target.
   * @member {String} template_file
   */
  exports.prototype['template_file'] = undefined;
  /**
   * Sets the placement as either inactive or active.
   * @member {String} status
   * @default 'inactive'
   */
  exports.prototype['status'] = 'inactive';



  return exports;
}));


