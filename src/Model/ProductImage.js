/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ProductImageBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ProductImageBase'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.ProductImage = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.ProductImageBase);
  }
}(this, function(ApiClient, ProductImageBase) {
  'use strict';




  /**
   * The ProductImage model module.
   * @module Model/ProductImage
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>ProductImage</code>.
   * The full ProductImage model. 
   * @alias module:Model/ProductImage
   * @class
   * @implements module:Model/ProductImageBase
   */
  var exports = function() {
    var _this = this;

    ProductImageBase.call(_this);








  };

  /**
   * Constructs a <code>ProductImage</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/ProductImage} obj Optional instance to populate.
   * @return {module:Model/ProductImage} The populated <code>ProductImage</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      ProductImageBase.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('product_id')) {
        obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
      }
      if (data.hasOwnProperty('image_file')) {
        obj['image_file'] = ApiClient.convertToType(data['image_file'], 'String');
      }
      if (data.hasOwnProperty('url_zoom')) {
        obj['url_zoom'] = ApiClient.convertToType(data['url_zoom'], 'String');
      }
      if (data.hasOwnProperty('url_standard')) {
        obj['url_standard'] = ApiClient.convertToType(data['url_standard'], 'String');
      }
      if (data.hasOwnProperty('url_thumbnail')) {
        obj['url_thumbnail'] = ApiClient.convertToType(data['url_thumbnail'], 'String');
      }
      if (data.hasOwnProperty('url_tiny')) {
        obj['url_tiny'] = ApiClient.convertToType(data['url_tiny'], 'String');
      }
      if (data.hasOwnProperty('date_modified')) {
        obj['date_modified'] = ApiClient.convertToType(data['date_modified'], 'Date');
      }
    }
    return obj;
  }

  /**
   * The unique numeric ID of the image; increments sequentially. 
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The unique numeric identifier for the product with which the image is associated. 
   * @member {Number} product_id
   */
  exports.prototype['product_id'] = undefined;
  /**
   * The local path to the original image file uploaded to BigCommerce. 
   * @member {String} image_file
   */
  exports.prototype['image_file'] = undefined;
  /**
   * The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. 
   * @member {String} url_zoom
   */
  exports.prototype['url_zoom'] = undefined;
  /**
   * The standard URL for this image. By default, this is used for product-page images. 
   * @member {String} url_standard
   */
  exports.prototype['url_standard'] = undefined;
  /**
   * The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. 
   * @member {String} url_thumbnail
   */
  exports.prototype['url_thumbnail'] = undefined;
  /**
   * The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. 
   * @member {String} url_tiny
   */
  exports.prototype['url_tiny'] = undefined;
  /**
   * The date on which the product image was modified. 
   * @member {Date} date_modified
   */
  exports.prototype['date_modified'] = undefined;

  // Implement ProductImageBase interface:
  /**
   * Flag for identifying whether the image is used as the product's thumbnail. 
   * @member {Boolean} is_thumbnail
   */
exports.prototype['is_thumbnail'] = undefined;

  /**
   * The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. 
   * @member {Number} sort_order
   */
exports.prototype['sort_order'] = undefined;

  /**
   * The description for the image. 
   * @member {String} description
   */
exports.prototype['description'] = undefined;



  return exports;
}));


