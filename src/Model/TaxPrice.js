/**
 * Product Pricing API
 * API to provide marketing/display pricing for products, variants, and partially configured selections.
 *
 * OpenAPI spec version: master
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ProductPricingApi) {
      root.ProductPricingApi = {};
    }
    root.ProductPricingApi.TaxPrice = factory(root.ProductPricingApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The TaxPrice model module.
   * @module Model/TaxPrice
   * @version master
   */

  /**
   * Constructs a new <code>TaxPrice</code>.
   * The price for a product including estimates for tax
   * @alias module:Model/TaxPrice
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>TaxPrice</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/TaxPrice} obj Optional instance to populate.
   * @return {module:Model/TaxPrice} The populated <code>TaxPrice</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('as_entered')) {
        obj['as_entered'] = ApiClient.convertToType(data['as_entered'], 'Number');
      }
      if (data.hasOwnProperty('entered_inclusive')) {
        obj['entered_inclusive'] = ApiClient.convertToType(data['entered_inclusive'], 'Boolean');
      }
      if (data.hasOwnProperty('tax_exclusive')) {
        obj['tax_exclusive'] = ApiClient.convertToType(data['tax_exclusive'], 'Number');
      }
      if (data.hasOwnProperty('tax_inclusive')) {
        obj['tax_inclusive'] = ApiClient.convertToType(data['tax_inclusive'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The price provided by the merchant as entered in their catalog/price list (may be inc or ex)
   * @member {Number} as_entered
   */
  exports.prototype['as_entered'] = undefined;
  /**
   * Whether the `as_entered` price is inclusive or exclusive of tax, based on the stores tax jurisdiction
   * @member {Boolean} entered_inclusive
   */
  exports.prototype['entered_inclusive'] = undefined;
  /**
   * The estimated tax exclusive price for this product based on the provided customer group
   * @member {Number} tax_exclusive
   */
  exports.prototype['tax_exclusive'] = undefined;
  /**
   * The estimated tax inclusive price for this product based on the provided customer group
   * @member {Number} tax_inclusive
   */
  exports.prototype['tax_inclusive'] = undefined;



  return exports;
}));


