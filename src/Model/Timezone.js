/**
 * Store Information APIs
 * The Store Information object, and Get Store Information endpoint, manage store profile settings.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/DateFormat'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DateFormat'));
  } else {
    // Browser globals (root is window)
    if (!root.StoreInformationApIs) {
      root.StoreInformationApIs = {};
    }
    root.StoreInformationApIs.Timezone = factory(root.StoreInformationApIs.ApiClient, root.StoreInformationApIs.DateFormat);
  }
}(this, function(ApiClient, DateFormat) {
  'use strict';




  /**
   * The Timezone model module.
   * @module Model/Timezone
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Timezone</code>.
   * @alias module:Model/Timezone
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>Timezone</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/Timezone} obj Optional instance to populate.
   * @return {module:Model/Timezone} The populated <code>Timezone</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('raw_offset')) {
        obj['raw_offset'] = ApiClient.convertToType(data['raw_offset'], 'Number');
      }
      if (data.hasOwnProperty('dst_offset')) {
        obj['dst_offset'] = ApiClient.convertToType(data['dst_offset'], 'Number');
      }
      if (data.hasOwnProperty('dst_correction')) {
        obj['dst_correction'] = ApiClient.convertToType(data['dst_correction'], 'Boolean');
      }
      if (data.hasOwnProperty('date_format')) {
        obj['date_format'] = DateFormat.constructFromObject(data['date_format']);
      }
    }
    return obj;
  }

  /**
   * a string identifying the time zone, in the format: <Continent-name>/<City-name>.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * a negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
   * @member {Number} raw_offset
   */
  exports.prototype['raw_offset'] = undefined;
  /**
   * \"-/+\" offset from UTC/GMT, in seconds, during summer/daylight saving time.
   * @member {Number} dst_offset
   */
  exports.prototype['dst_offset'] = undefined;
  /**
   * a boolean indicating whether this time zone observes daylight saving time.
   * @member {Boolean} dst_correction
   */
  exports.prototype['dst_correction'] = undefined;
  /**
   * @member {module:Model/DateFormat} date_format
   */
  exports.prototype['date_format'] = undefined;



  return exports;
}));


