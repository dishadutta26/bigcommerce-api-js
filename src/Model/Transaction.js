/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Order Transactions API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/AVSResult', 'Model/CVVResult', 'Model/CreditCard', 'Model/Custom', 'Model/GiftCertificate', 'Model/Offline', 'Model/StoreCredit', 'Model/TransactionPost'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AVSResult'), require('./CVVResult'), require('./CreditCard'), require('./Custom'), require('./GiftCertificate'), require('./Offline'), require('./StoreCredit'), require('./TransactionPost'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.Transaction = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.AVSResult, root.BigCommerceApi.CVVResult, root.BigCommerceApi.CreditCard, root.BigCommerceApi.Custom, root.BigCommerceApi.GiftCertificate, root.BigCommerceApi.Offline, root.BigCommerceApi.StoreCredit, root.BigCommerceApi.TransactionPost);
  }
}(this, function(ApiClient, AVSResult, CVVResult, CreditCard, Custom, GiftCertificate, Offline, StoreCredit, TransactionPost) {
  'use strict';




  /**
   * The Transaction model module.
   * @module Model/Transaction
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>Transaction</code>.
   * A BigCommerce Transaction object describes a single transaction. 
   * @alias module:Model/Transaction
   * @class
   * @implements module:Model/TransactionPost
   * @param event {String} Store event that created the transaction. 
   * @param method {String} The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline. 
   * @param amount {Number} Amount of money in the transaction. 
   * @param currency {String} Currency used for the transaction. 
   * @param gateway {String} The payment gateway, where applicable. 
   */
  var exports = function(event, method, amount, currency, gateway) {
    var _this = this;

    TransactionPost.call(_this, event, method, amount, currency, gateway);









  };

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/Transaction} obj Optional instance to populate.
   * @return {module:Model/Transaction} The populated <code>Transaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      TransactionPost.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('order_id')) {
        obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
      }
      if (data.hasOwnProperty('date_created')) {
        obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
      }
      if (data.hasOwnProperty('payment_instrument_token')) {
        obj['payment_instrument_token'] = ApiClient.convertToType(data['payment_instrument_token'], 'String');
      }
      if (data.hasOwnProperty('avs_result')) {
        obj['avs_result'] = AVSResult.constructFromObject(data['avs_result']);
      }
      if (data.hasOwnProperty('cvv_result')) {
        obj['cvv_result'] = CVVResult.constructFromObject(data['cvv_result']);
      }
      if (data.hasOwnProperty('credit_card')) {
        obj['credit_card'] = CreditCard.constructFromObject(data['credit_card']);
      }
      if (data.hasOwnProperty('gift_certificate')) {
        obj['gift_certificate'] = GiftCertificate.constructFromObject(data['gift_certificate']);
      }
      if (data.hasOwnProperty('store_credit')) {
        obj['store_credit'] = StoreCredit.constructFromObject(data['store_credit']);
      }
    }
    return obj;
  }

  /**
   * Unique identifier for the transaction. 
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Identifier for the BigCommerce Order with which this transaction is associated. 
   * @member {String} order_id
   */
  exports.prototype['order_id'] = undefined;
  /**
   * The datetime of the transaction. 
   * @member {Date} date_created
   */
  exports.prototype['date_created'] = undefined;
  /**
   * Token for an existing stored Credit Card used for this transaction, if any. 
   * @member {String} payment_instrument_token
   */
  exports.prototype['payment_instrument_token'] = undefined;
  /**
   * @member {module:Model/AVSResult} avs_result
   */
  exports.prototype['avs_result'] = undefined;
  /**
   * @member {module:Model/CVVResult} cvv_result
   */
  exports.prototype['cvv_result'] = undefined;
  /**
   * @member {module:Model/CreditCard} credit_card
   */
  exports.prototype['credit_card'] = undefined;
  /**
   * @member {module:Model/GiftCertificate} gift_certificate
   */
  exports.prototype['gift_certificate'] = undefined;
  /**
   * @member {module:Model/StoreCredit} store_credit
   */
  exports.prototype['store_credit'] = undefined;

  // Implement TransactionPost interface:
  /**
   * Store event that created the transaction. 
   * @member {String} event
   */
exports.prototype['event'] = undefined;

  /**
   * The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline. 
   * @member {String} method
   */
exports.prototype['method'] = undefined;

  /**
   * Amount of money in the transaction. 
   * @member {Number} amount
   */
exports.prototype['amount'] = undefined;

  /**
   * Currency used for the transaction. 
   * @member {String} currency
   */
exports.prototype['currency'] = undefined;

  /**
   * The payment gateway, where applicable. 
   * @member {String} gateway
   */
exports.prototype['gateway'] = undefined;

  /**
   * The transaction ID returned by the payment gateway for this transaction item. 
   * @member {String} gateway_transaction_id
   */
exports.prototype['gateway_transaction_id'] = undefined;

  /**
   * The datetime of the transaction. 
   * @member {Date} date_created
   */
exports.prototype['date_created'] = undefined;

  /**
   * True if the transaction performed was a test, or if the gateway is in test mode. 
   * @member {Boolean} test
   */
exports.prototype['test'] = undefined;

  /**
   * Status of the transaction. 
   * @member {String} status
   */
exports.prototype['status'] = undefined;

  /**
   * Result of gateway fraud review, if any. Default is `false`. 
   * @member {Boolean} fraud_review
   */
exports.prototype['fraud_review'] = undefined;

  /**
   * Identifier for an existing transaction upon which this transaction acts. 
   * @member {Number} reference_transaction_id
   */
exports.prototype['reference_transaction_id'] = undefined;

  /**
   * @member {module:Model/Offline} offline
   */
exports.prototype['offline'] = undefined;

  /**
   * @member {module:Model/Custom} custom
   */
exports.prototype['custom'] = undefined;



  return exports;
}));


