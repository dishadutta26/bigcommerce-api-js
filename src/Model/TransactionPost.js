/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Order Transactions API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Custom', 'Model/Offline'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Custom'), require('./Offline'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.TransactionPost = factory(root.BigCommerceApi.ApiClient, root.BigCommerceApi.Custom, root.BigCommerceApi.Offline);
  }
}(this, function(ApiClient, Custom, Offline) {
  'use strict';




  /**
   * The TransactionPost model module.
   * @module Model/TransactionPost
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>TransactionPost</code>.
   * Payload to create a transaction in BigCommerce. 
   * @alias module:Model/TransactionPost
   * @class
   * @param event {String} Store event that created the transaction. 
   * @param method {String} The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline. 
   * @param amount {Number} Amount of money in the transaction. 
   * @param currency {String} Currency used for the transaction. 
   * @param gateway {String} The payment gateway, where applicable. 
   */
  var exports = function(event, method, amount, currency, gateway) {
    var _this = this;

    _this['event'] = event;
    _this['method'] = method;
    _this['amount'] = amount;
    _this['currency'] = currency;
    _this['gateway'] = gateway;








  };

  /**
   * Constructs a <code>TransactionPost</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/TransactionPost} obj Optional instance to populate.
   * @return {module:Model/TransactionPost} The populated <code>TransactionPost</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('event')) {
        obj['event'] = ApiClient.convertToType(data['event'], 'String');
      }
      if (data.hasOwnProperty('method')) {
        obj['method'] = ApiClient.convertToType(data['method'], 'String');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('gateway')) {
        obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
      }
      if (data.hasOwnProperty('gateway_transaction_id')) {
        obj['gateway_transaction_id'] = ApiClient.convertToType(data['gateway_transaction_id'], 'String');
      }
      if (data.hasOwnProperty('date_created')) {
        obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
      }
      if (data.hasOwnProperty('test')) {
        obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('fraud_review')) {
        obj['fraud_review'] = ApiClient.convertToType(data['fraud_review'], 'Boolean');
      }
      if (data.hasOwnProperty('reference_transaction_id')) {
        obj['reference_transaction_id'] = ApiClient.convertToType(data['reference_transaction_id'], 'Number');
      }
      if (data.hasOwnProperty('offline')) {
        obj['offline'] = Offline.constructFromObject(data['offline']);
      }
      if (data.hasOwnProperty('custom')) {
        obj['custom'] = Custom.constructFromObject(data['custom']);
      }
    }
    return obj;
  }

  /**
   * Store event that created the transaction. 
   * @member {String} event
   */
  exports.prototype['event'] = undefined;
  /**
   * The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline. 
   * @member {String} method
   */
  exports.prototype['method'] = undefined;
  /**
   * Amount of money in the transaction. 
   * @member {Number} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * Currency used for the transaction. 
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * The payment gateway, where applicable. 
   * @member {String} gateway
   */
  exports.prototype['gateway'] = undefined;
  /**
   * The transaction ID returned by the payment gateway for this transaction item. 
   * @member {String} gateway_transaction_id
   */
  exports.prototype['gateway_transaction_id'] = undefined;
  /**
   * The datetime of the transaction. 
   * @member {Date} date_created
   */
  exports.prototype['date_created'] = undefined;
  /**
   * True if the transaction performed was a test, or if the gateway is in test mode. 
   * @member {Boolean} test
   */
  exports.prototype['test'] = undefined;
  /**
   * Status of the transaction. 
   * @member {String} status
   */
  exports.prototype['status'] = undefined;
  /**
   * Result of gateway fraud review, if any. Default is `false`. 
   * @member {Boolean} fraud_review
   */
  exports.prototype['fraud_review'] = undefined;
  /**
   * Identifier for an existing transaction upon which this transaction acts. 
   * @member {Number} reference_transaction_id
   */
  exports.prototype['reference_transaction_id'] = undefined;
  /**
   * @member {module:Model/Offline} offline
   */
  exports.prototype['offline'] = undefined;
  /**
   * @member {module:Model/Custom} custom
   */
  exports.prototype['custom'] = undefined;



  return exports;
}));


