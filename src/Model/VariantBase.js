/**
 * BigCommerce API
 * A Swagger Document for the BigCommmerce v3 Catalog API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BigCommerceApi) {
      root.BigCommerceApi = {};
    }
    root.BigCommerceApi.VariantBase = factory(root.BigCommerceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The VariantBase model module.
   * @module Model/VariantBase
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>VariantBase</code>.
   * Common Variant properties.
   * @alias module:Model/VariantBase
   * @class
   */
  var exports = function() {
    var _this = this;


















  };

  /**
   * Constructs a <code>VariantBase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/VariantBase} obj Optional instance to populate.
   * @return {module:Model/VariantBase} The populated <code>VariantBase</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('cost_price')) {
        obj['cost_price'] = ApiClient.convertToType(data['cost_price'], 'Number');
      }
      if (data.hasOwnProperty('price')) {
        obj['price'] = ApiClient.convertToType(data['price'], 'Number');
      }
      if (data.hasOwnProperty('sale_price')) {
        obj['sale_price'] = ApiClient.convertToType(data['sale_price'], 'Number');
      }
      if (data.hasOwnProperty('retail_price')) {
        obj['retail_price'] = ApiClient.convertToType(data['retail_price'], 'Number');
      }
      if (data.hasOwnProperty('weight')) {
        obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
      }
      if (data.hasOwnProperty('width')) {
        obj['width'] = ApiClient.convertToType(data['width'], 'Number');
      }
      if (data.hasOwnProperty('height')) {
        obj['height'] = ApiClient.convertToType(data['height'], 'Number');
      }
      if (data.hasOwnProperty('depth')) {
        obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
      }
      if (data.hasOwnProperty('is_free_shipping')) {
        obj['is_free_shipping'] = ApiClient.convertToType(data['is_free_shipping'], 'Boolean');
      }
      if (data.hasOwnProperty('fixed_cost_shipping_price')) {
        obj['fixed_cost_shipping_price'] = ApiClient.convertToType(data['fixed_cost_shipping_price'], 'Number');
      }
      if (data.hasOwnProperty('purchasing_disabled')) {
        obj['purchasing_disabled'] = ApiClient.convertToType(data['purchasing_disabled'], 'Boolean');
      }
      if (data.hasOwnProperty('purchasing_disabled_message')) {
        obj['purchasing_disabled_message'] = ApiClient.convertToType(data['purchasing_disabled_message'], 'String');
      }
      if (data.hasOwnProperty('image_url')) {
        obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
      }
      if (data.hasOwnProperty('upc')) {
        obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
      }
      if (data.hasOwnProperty('inventory_level')) {
        obj['inventory_level'] = ApiClient.convertToType(data['inventory_level'], 'Number');
      }
      if (data.hasOwnProperty('inventory_warning_level')) {
        obj['inventory_warning_level'] = ApiClient.convertToType(data['inventory_warning_level'], 'Number');
      }
      if (data.hasOwnProperty('bin_picking_number')) {
        obj['bin_picking_number'] = ApiClient.convertToType(data['bin_picking_number'], 'String');
      }
    }
    return obj;
  }

  /**
   * The cost price of the variant. Not affected by Price List prices.
   * @member {Number} cost_price
   */
  exports.prototype['cost_price'] = undefined;
  /**
   * This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.
   * @member {Number} price
   */
  exports.prototype['price'] = undefined;
  /**
   * This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.
   * @member {Number} sale_price
   */
  exports.prototype['sale_price'] = undefined;
  /**
   * This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.
   * @member {Number} retail_price
   */
  exports.prototype['retail_price'] = undefined;
  /**
   * This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.
   * @member {Number} weight
   */
  exports.prototype['weight'] = undefined;
  /**
   * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. 
   * @member {Number} width
   */
  exports.prototype['width'] = undefined;
  /**
   * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. 
   * @member {Number} height
   */
  exports.prototype['height'] = undefined;
  /**
   * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. 
   * @member {Number} depth
   */
  exports.prototype['depth'] = undefined;
  /**
   * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. 
   * @member {Boolean} is_free_shipping
   */
  exports.prototype['is_free_shipping'] = undefined;
  /**
   * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. 
   * @member {Number} fixed_cost_shipping_price
   */
  exports.prototype['fixed_cost_shipping_price'] = undefined;
  /**
   * If `true`, this variant will not be purchasable on the storefront.
   * @member {Boolean} purchasing_disabled
   */
  exports.prototype['purchasing_disabled'] = undefined;
  /**
   * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
   * @member {String} purchasing_disabled_message
   */
  exports.prototype['purchasing_disabled_message'] = undefined;
  /**
   * The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.
   * @member {String} image_url
   */
  exports.prototype['image_url'] = undefined;
  /**
   * The UPC code used in feeds for shopping comparison sites and external channel integrations.
   * @member {String} upc
   */
  exports.prototype['upc'] = undefined;
  /**
   * Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.
   * @member {Number} inventory_level
   */
  exports.prototype['inventory_level'] = undefined;
  /**
   * When the variant hits this inventory level, it is considered low stock.
   * @member {Number} inventory_warning_level
   */
  exports.prototype['inventory_warning_level'] = undefined;
  /**
   * Identifies where in a warehouse the variant is located.
   * @member {String} bin_picking_number
   */
  exports.prototype['bin_picking_number'] = undefined;



  return exports;
}));


